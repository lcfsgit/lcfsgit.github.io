<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>knn回归</title>
      <link href="/2024/04/07/knn%E5%9B%9E%E5%BD%92/"/>
      <url>/2024/04/07/knn%E5%9B%9E%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<p>knn同样可应用于回归问题：</p><p>找出一个样本的k个邻居，把邻居的属性的平均值赋给该样本。</p><p>缺点：</p><ul><li>对具有很多特征（几百甚至上千）的数据集效果不好</li><li>对于特征中包含很多零的稀疏矩阵效果尤其不好</li></ul><p>注意：</p><p>k值越大，对噪声越不敏感，但可能造成欠拟合；k值越小，容易造成过拟合</p><h4 id="生成训练数据"><a href="#生成训练数据" class="headerlink" title="生成训练数据"></a>生成训练数据</h4><h5 id="生成0-5范围内的随机值，这里生成40个值"><a href="#生成0-5范围内的随机值，这里生成40个值" class="headerlink" title="生成0-5范围内的随机值，这里生成40个值"></a>生成0-5范围内的随机值，这里生成40个值</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n_dots=40</span><br><span class="line">X=5*np.random.rand(n_dots,1)</span><br></pre></td></tr></table></figure><h5 id="余弦函数生成测试数据，使用ravel处理成一维数组"><a href="#余弦函数生成测试数据，使用ravel处理成一维数组" class="headerlink" title="余弦函数生成测试数据，使用ravel处理成一维数组"></a>余弦函数生成测试数据，使用ravel处理成一维数组</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Y=np.cos(X).ravel()</span><br></pre></td></tr></table></figure><h5 id="加入噪声"><a href="#加入噪声" class="headerlink" title="加入噪声"></a>加入噪声</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Y+=0.2*np.random.rand(n_dots)-0.1</span><br></pre></td></tr></table></figure><h4 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.neighbors import KNeighborsRegressor</span><br><span class="line">k=5</span><br><span class="line">knn=KNeighborsRegressor(n_neighbors=k)</span><br><span class="line">knn.fit(X,Y)</span><br></pre></td></tr></table></figure><h4 id="生成预测数据"><a href="#生成预测数据" class="headerlink" title="生成预测数据"></a>生成预测数据</h4><p>均匀分布在0-5之间的包含500个数字的一维数组，对一维数组增加一个新的维度，变成二维数组，：在前面指的是为每个元素添加，：在后面指的是为所有元素添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T=np.linspace(0,5,500)[:,np.newaxis]</span><br></pre></td></tr></table></figure><h5 id="模型预测"><a href="#模型预测" class="headerlink" title="模型预测"></a>模型预测</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y_pred=knn.predict(T)</span><br></pre></td></tr></table></figure><h5 id="计算模型在训练数据x和目标Y上的得分，得分越高，说明模型在训练数据上表现良好"><a href="#计算模型在训练数据x和目标Y上的得分，得分越高，说明模型在训练数据上表现良好" class="headerlink" title="计算模型在训练数据x和目标Y上的得分，得分越高，说明模型在训练数据上表现良好"></a>计算模型在训练数据x和目标Y上的得分，得分越高，说明模型在训练数据上表现良好</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(knn.score(X,Y))</span><br></pre></td></tr></table></figure><h5 id="定义画板"><a href="#定义画板" class="headerlink" title="定义画板"></a>定义画板</h5><h5 id="绘制预测结果，将预测结果数据连接起来，构成拟合曲线"><a href="#绘制预测结果，将预测结果数据连接起来，构成拟合曲线" class="headerlink" title="绘制预测结果，将预测结果数据连接起来，构成拟合曲线"></a>绘制预测结果，将预测结果数据连接起来，构成拟合曲线</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">plt.figure(figsize=(10,6),dpi=144)</span><br></pre></td></tr></table></figure><h5 id="绘制训练数据散点图"><a href="#绘制训练数据散点图" class="headerlink" title="绘制训练数据散点图"></a>绘制训练数据散点图</h5><p>scatter用于绘制散点图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(X,Y,c=&#x27;g&#x27;,label=&#x27;train_data&#x27; ,s=50)</span><br></pre></td></tr></table></figure><h5 id="绘制预测数据折线图"><a href="#绘制预测数据折线图" class="headerlink" title="绘制预测数据折线图"></a>绘制预测数据折线图</h5><p>plot可以用来表示连续的数据关系,绘制折线、线图、柱状图等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(T,y_pred,c=&#x27;r&#x27;,label=&#x27;prediction&#x27;,linewidth=2)</span><br></pre></td></tr></table></figure><h5 id="展示画板"><a href="#展示画板" class="headerlink" title="展示画板"></a>展示画板</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://img2.imgtp.com/2024/04/07/bwnp7Rnq.png" alt="image-20240407234613716"></p>]]></content>
      
      
      <categories>
          
          <category> knn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> knn </tag>
            
            <tag> 回归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stream数据收集</title>
      <link href="/2024/04/07/stream%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86/"/>
      <url>/2024/04/07/stream%E6%95%B0%E6%8D%AE%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h3 id="输出流中的元素"><a href="#输出流中的元素" class="headerlink" title="输出流中的元素"></a>输出流中的元素</h3><h4 id="创建测试数据"><a href="#创建测试数据" class="headerlink" title="创建测试数据"></a>创建测试数据</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);</span><br></pre></td></tr></table></figure><h4 id="顺序输出"><a href="#顺序输出" class="headerlink" title="顺序输出"></a>顺序输出</h4><ul><li>使用foreach输出，将里面函数应用每个元素</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stream.forEach(System.out::println);</span><br></pre></td></tr></table></figure><ul><li>传统迭代器输出</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;Integer&gt; iterator=stream.iterator();</span><br><span class="line">while (iterator.hasNext()) &#123;</span><br><span class="line">    String name = String.valueOf(iterator.next());</span><br><span class="line">    System.out.println(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>并行流的情况</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.parallelStream().forEachOrdered(System.out::println);</span><br></pre></td></tr></table></figure><h4 id="并行输出"><a href="#并行输出" class="headerlink" title="并行输出"></a>并行输出</h4><p>任意顺序遍历所有元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.parallelStream().forEach(System.out::println);</span><br></pre></td></tr></table></figure><h3 id="收集流中的数据"><a href="#收集流中的数据" class="headerlink" title="收集流中的数据"></a>收集流中的数据</h3><h4 id="生成指定类型的集合"><a href="#生成指定类型的集合" class="headerlink" title="生成指定类型的集合"></a>生成指定类型的集合</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer[] result=stream.toArray(Integer[]::new);</span><br></pre></td></tr></table></figure><h4 id="使用收集器，collect，接受一个collector接口的实例"><a href="#使用收集器，collect，接受一个collector接口的实例" class="headerlink" title="使用收集器，collect，接受一个collector接口的实例"></a>使用收集器，collect，接受一个collector接口的实例</h4><ul><li>生成常见集合</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stream.collect(Collectors.toList());</span><br><span class="line">stream.collect(Collectors.toSet());</span><br></pre></td></tr></table></figure><ul><li>指定生成数据结构的类型</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stream.collect(Collectors.toCollection(LinkedList::new));</span><br></pre></td></tr></table></figure><ul><li>使用连接操作收集字符串</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stream.map(p-&gt;p.toString()).collect(Collectors.joining());</span><br><span class="line">stream.map(p-&gt;p.toString()).collect(Collectors.joining(&quot;,&quot;));</span><br></pre></td></tr></table></figure><ul><li>求平均值、总数、和、最大、最小</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IntSummaryStatistics statistics=stream.collect(Collectors.summarizingInt(Integer::intValue));</span><br><span class="line">double avg=statistics.getAverage();</span><br><span class="line">long count=statistics.getCount();</span><br><span class="line">long sum=statistics.getSum();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> stream流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>optinal的创建、转化流</title>
      <link href="/2024/04/05/optinal%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E8%BD%AC%E5%8C%96%E6%B5%81/"/>
      <url>/2024/04/05/optinal%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E8%BD%AC%E5%8C%96%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p>前面我们一直使用给到的Optional对象进行操作，今天实现自行创建和转化流</p><h3 id="创建optional流"><a href="#创建optional流" class="headerlink" title="创建optional流"></a>创建optional流</h3><h4 id="生成一个optional-如果传入的值为空-则返回空optional对象"><a href="#生成一个optional-如果传入的值为空-则返回空optional对象" class="headerlink" title="生成一个optional,如果传入的值为空,则返回空optional对象"></a>生成一个optional,如果传入的值为空,则返回空optional对象</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt;optionalelse=Optional.ofNullable(&quot;b&quot;);</span><br></pre></td></tr></table></figure><h4 id="生成一个optional-如果传入的值为空-生成一个optional-如果传入的值为空-则抛出空指针异常"><a href="#生成一个optional-如果传入的值为空-生成一个optional-如果传入的值为空-则抛出空指针异常" class="headerlink" title="生成一个optional,如果传入的值为空,生成一个optional,如果传入的值为空,则抛出空指针异常"></a>生成一个optional,如果传入的值为空,生成一个optional,如果传入的值为空,则抛出空指针异常</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt;optional=Optional.of(&quot;a&quot;);</span><br></pre></td></tr></table></figure><h4 id="生成一个空的optional"><a href="#生成一个空的optional" class="headerlink" title="生成一个空的optional"></a>生成一个空的optional</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt;empty=Optional.empty();</span><br></pre></td></tr></table></figure><h4 id="生成一个由多个optional组成的optional流"><a href="#生成一个由多个optional组成的optional流" class="headerlink" title="生成一个由多个optional组成的optional流"></a>生成一个由多个optional组成的optional流</h4><p>flatmap会将流组合起来,如果流为空,忽略,不为空则组合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt;result= Optional.of(&quot;a&quot;).flatMap(s-&gt;Optional.of(&quot;b&quot;));</span><br></pre></td></tr></table></figure><h3 id="optional转换为流"><a href="#optional转换为流" class="headerlink" title="optional转换为流"></a>optional转换为流</h3><ul><li>当入参类型和返回类型一致时,可以::</li><li>stream方法会将optional对象转换为流,如果optional为空,则返回空流</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String[] arr=&#123;&quot;a&quot;,&quot;b&quot;,&quot;c&quot;&#125;;</span><br><span class="line">Stream&lt;String&gt;arrStream=Arrays.stream(arr);</span><br><span class="line">Stream&lt;String&gt;resultStream=arrStream.map(Optional::of).flatMap(Optional::stream);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> stream流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> optional类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>optional&lt;T&gt;的消费、获取、管道化</title>
      <link href="/2024/04/04/optional%E7%9A%84%E6%B6%88%E8%B4%B9%E3%80%81%E8%8E%B7%E5%8F%96%E3%80%81%E7%AE%A1%E9%81%93%E5%8C%96/"/>
      <url>/2024/04/04/optional%E7%9A%84%E6%B6%88%E8%B4%B9%E3%80%81%E8%8E%B7%E5%8F%96%E3%80%81%E7%AE%A1%E9%81%93%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>optional<T>对象为一个包装类对象，它被当做一种更安全的方式引用类型T</p><h3 id="创建一个Optional实例，它包装了一个非null的值"><a href="#创建一个Optional实例，它包装了一个非null的值" class="headerlink" title="创建一个Optional实例，它包装了一个非null的值"></a>创建一个Optional实例，它包装了一个非null的值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String a=&quot;h/e/l/lo&quot;;</span><br><span class="line">List&lt;String&gt; b=new ArrayList&lt;String&gt;();</span><br><span class="line">Optional&lt;String&gt; stringOptional= Arrays.stream(a.split(&quot;/&quot;)).findFirst();</span><br></pre></td></tr></table></figure><h3 id="获取optional的值"><a href="#获取optional的值" class="headerlink" title="获取optional的值"></a>获取optional的值</h3><h5 id="获取值，指定默认值"><a href="#获取值，指定默认值" class="headerlink" title="获取值，指定默认值"></a>获取值，指定默认值</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String result=stringOptional.orElse(&quot;default&quot;);</span><br></pre></td></tr></table></figure><h5 id="获取值，计算默认值（它返回一个字符串，表示获取-Java-版本。）如果Optional实例有值则对其执行调用给定的操作，如果Optional实例为空，则不执行任何操作"><a href="#获取值，计算默认值（它返回一个字符串，表示获取-Java-版本。）如果Optional实例有值则对其执行调用给定的操作，如果Optional实例为空，则不执行任何操作" class="headerlink" title="获取值，计算默认值（它返回一个字符串，表示获取 Java 版本。）如果Optional实例有值则对其执行调用给定的操作，如果Optional实例为空，则不执行任何操作"></a>获取值，计算默认值（它返回一个字符串，表示获取 Java 版本。）如果Optional实例有值则对其执行调用给定的操作，如果Optional实例为空，则不执行任何操作</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String result_1=stringOptional.orElseGet(()-&gt;System.getProperty(&quot;java.version&quot;));</span><br></pre></td></tr></table></figure><h5 id="获取值，无值时抛出指定异常"><a href="#获取值，无值时抛出指定异常" class="headerlink" title="获取值，无值时抛出指定异常"></a>获取值，无值时抛出指定异常</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String result_2=stringOptional.orElseThrow(()-&gt;new RuntimeException(&quot;无值&quot;));</span><br></pre></td></tr></table></figure><h3 id="消费optional值"><a href="#消费optional值" class="headerlink" title="消费optional值"></a>消费optional值</h3><h5 id="如果Optional实例有值则为其加入到数组b，如果Optional实例为空，则不进行任何操作"><a href="#如果Optional实例有值则为其加入到数组b，如果Optional实例为空，则不进行任何操作" class="headerlink" title="如果Optional实例有值则为其加入到数组b，如果Optional实例为空，则不进行任何操作"></a>如果Optional实例有值则为其加入到数组b，如果Optional实例为空，则不进行任何操作</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringOptional.ifPresent(b::add);</span><br></pre></td></tr></table></figure><h5 id="如果Optional实例有值则将其使用传入的函数进行处理，如果Optional实例为空，则输出无值"><a href="#如果Optional实例有值则将其使用传入的函数进行处理，如果Optional实例为空，则输出无值" class="headerlink" title="如果Optional实例有值则将其使用传入的函数进行处理，如果Optional实例为空，则输出无值"></a>如果Optional实例有值则将其使用传入的函数进行处理，如果Optional实例为空，则输出无值</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stringOptional.ifPresentOrElse(</span><br><span class="line">        System.out::println,</span><br><span class="line">        ()-&gt;System.out.println(&quot;无值&quot;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="管道化optional"><a href="#管道化optional" class="headerlink" title="管道化optional"></a>管道化optional</h3><h5 id="使用map方法，将Optional实例的值转换成另一种类型，如果实例有值则对其执行调用给定的函数进行转换，否则不进行任何操作"><a href="#使用map方法，将Optional实例的值转换成另一种类型，如果实例有值则对其执行调用给定的函数进行转换，否则不进行任何操作" class="headerlink" title="使用map方法，将Optional实例的值转换成另一种类型，如果实例有值则对其执行调用给定的函数进行转换，否则不进行任何操作"></a>使用map方法，将Optional实例的值转换成另一种类型，如果实例有值则对其执行调用给定的函数进行转换，否则不进行任何操作</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringOptional.map(String::toUpperCase);</span><br></pre></td></tr></table></figure><h5 id="用map方法，将Optional实例的值转换成另一种类型，只处理满足条件的数据"><a href="#用map方法，将Optional实例的值转换成另一种类型，只处理满足条件的数据" class="headerlink" title="用map方法，将Optional实例的值转换成另一种类型，只处理满足条件的数据"></a>用map方法，将Optional实例的值转换成另一种类型，只处理满足条件的数据</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringOptional.filter(s-&gt;s.startsWith(&quot;a&quot;)).map(String::toUpperCase);</span><br></pre></td></tr></table></figure><h5 id="使用or-将optional加入可替代项目，如果stringOptional为空，则返回b的第一个元素"><a href="#使用or-将optional加入可替代项目，如果stringOptional为空，则返回b的第一个元素" class="headerlink" title="使用or,将optional加入可替代项目，如果stringOptional为空，则返回b的第一个元素"></a>使用or,将optional加入可替代项目，如果stringOptional为空，则返回b的第一个元素</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringOptional.or(()-&gt;b.stream().findFirst());</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>不要在集合中定义Optional实例，尽量使用Optional提供的静态工厂方法创建Optional实例</li><li>不要将optional作为map中的键</li></ul>]]></content>
      
      
      <categories>
          
          <category> stream流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> optional类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stream的结束</title>
      <link href="/2024/04/04/stream%E7%9A%84%E7%BB%93%E6%9D%9F/"/>
      <url>/2024/04/04/stream%E7%9A%84%E7%BB%93%E6%9D%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="stream的约简"><a href="#stream的约简" class="headerlink" title="stream的约简"></a>stream的约简</h3><p>stream只有在约简后才能结束，且返回<strong>Optional对象</strong></p><h4 id="创建示例stream流"><a href="#创建示例stream流" class="headerlink" title="创建示例stream流"></a>创建示例stream流</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String[] a=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;c&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><h4 id="统计数量"><a href="#统计数量" class="headerlink" title="统计数量"></a>统计数量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> Arrays.stream(a).count();</span><br></pre></td></tr></table></figure><h4 id="取最大值（忽略大小写或考虑大小写）返回Optional对象"><a href="#取最大值（忽略大小写或考虑大小写）返回Optional对象" class="headerlink" title="取最大值（忽略大小写或考虑大小写）返回Optional对象"></a>取最大值（忽略大小写或考虑大小写）返回Optional对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt;maxIgnoreCase=Arrays.stream(a).max(String::compareToIgnoreCase);</span><br><span class="line">Optional&lt;String&gt;max = Arrays.stream(a).max(String::compareTo);</span><br></pre></td></tr></table></figure><h4 id="取最小值"><a href="#取最小值" class="headerlink" title="取最小值"></a>取最小值</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt;min=Arrays.stream(a).min(String::compareToIgnoreCase);</span><br></pre></td></tr></table></figure><h4 id="查找第一个满足特定条件的元素"><a href="#查找第一个满足特定条件的元素" class="headerlink" title="查找第一个满足特定条件的元素"></a>查找第一个满足特定条件的元素</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt;first=Arrays.stream(a).filter(b-&gt;b.startsWith(&quot;a&quot;)).findFirst();</span><br></pre></td></tr></table></figure><h4 id="查找任何一个满足条件的元素，这里更适合用多线程流"><a href="#查找任何一个满足条件的元素，这里更适合用多线程流" class="headerlink" title="查找任何一个满足条件的元素，这里更适合用多线程流"></a>查找任何一个满足条件的元素，这里更适合用多线程流</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt;any=Arrays.stream(a).parallel().filter(b-&gt;b.startsWith(&quot;a&quot;)).findAny();</span><br></pre></td></tr></table></figure><h4 id="判断是否存在匹配"><a href="#判断是否存在匹配" class="headerlink" title="判断是否存在匹配"></a>判断是否存在匹配</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boolean exist=Arrays.stream(a).anyMatch(b-&gt;b.startsWith(&quot;a&quot;));</span><br></pre></td></tr></table></figure><h4 id="判断是否全部匹配"><a href="#判断是否全部匹配" class="headerlink" title="判断是否全部匹配"></a>判断是否全部匹配</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boolean all=Arrays.stream(a).allMatch(b-&gt;b.startsWith(&quot;a&quot;));</span><br></pre></td></tr></table></figure><h4 id="判断是否全不匹配"><a href="#判断是否全不匹配" class="headerlink" title="判断是否全不匹配"></a>判断是否全不匹配</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boolean none=Arrays.stream(a).noneMatch(b-&gt;b.startsWith(&quot;a&quot;));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> stream流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>索引失效的十个场景</title>
      <link href="/2024/04/03/%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88%E7%9A%84%E5%8D%81%E4%B8%AA%E5%9C%BA%E6%99%AF/"/>
      <url>/2024/04/03/%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88%E7%9A%84%E5%8D%81%E4%B8%AA%E5%9C%BA%E6%99%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p>所谓空口无凭，如果我直接把索引失效的这些场景丢出来，可能没有任何说服力。</p><p>所以，我决定建表和造数据，给大家一步步演示效果，尽量做到有理有据。</p><p>我相信，如果大家耐心的看完这篇文章，一定会有很多收获的。</p><h3 id="1-1-创建user表"><a href="#1-1-创建user表" class="headerlink" title="1.1 创建user表"></a>1.1 创建user表</h3><p>创建一张user表，表中包含：<code>id</code>、<code>code</code>、<code>age</code>、<code>name</code>和<code>height</code>字段。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">解释CREATE TABLE `user` (</span><br><span class="line">  `id` int NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `code` varchar(20) COLLATE utf8mb4_bin DEFAULT NULL,</span><br><span class="line">  `age` int DEFAULT &#x27;0&#x27;,</span><br><span class="line">  `name` varchar(30) COLLATE utf8mb4_bin DEFAULT NULL,</span><br><span class="line">  `height` int DEFAULT &#x27;0&#x27;,</span><br><span class="line">  `address` varchar(30) COLLATE utf8mb4_bin DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `idx_code_age_name` (`code`,`age`,`name`),</span><br><span class="line">  KEY `idx_height` (`height`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin</span><br></pre></td></tr></table></figure><p>此外，还创建了三个索引：</p><ul><li><code>id</code>：数据库的主键</li><li><code>idx_code_age_name</code>：由code、age和name三个字段组成的联合索引。</li><li><code>idx_height</code>：普通索引</li></ul><h3 id="1-2-插入数据"><a href="#1-2-插入数据" class="headerlink" title="1.2 插入数据"></a>1.2 插入数据</h3><p>为了方便给大家做演示，我特意向user表中插入了3条数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO sue.user (id, code, age, name, height) VALUES (1, &#x27;101&#x27;, 21, &#x27;周星驰&#x27;, 175,&#x27;香港&#x27;);</span><br><span class="line">INSERT INTO sue.user (id, code, age, name, height) VALUES (2, &#x27;102&#x27;, 18, &#x27;周杰伦&#x27;, 173,&#x27;台湾&#x27;);</span><br><span class="line">INSERT INTO sue.user (id, code, age, name, height) VALUES (3, &#x27;103&#x27;, 23, &#x27;苏三&#x27;, 174,&#x27;成都&#x27;);</span><br></pre></td></tr></table></figure><p>周星驰和周杰伦是我偶像，在这里自恋了一次，把他们和我放到一起了。哈哈哈。</p><h3 id="1-3-查看数据库版本"><a href="#1-3-查看数据库版本" class="headerlink" title="1.3 查看数据库版本"></a>1.3 查看数据库版本</h3><p>为了防止以后出现不必要的误会，在这里有必要查一下当前数据库的版本。不说版本就直接给结论，是耍流氓，哈哈哈。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select version();</span><br></pre></td></tr></table></figure><p>查出当前的mysql版本号为：<code>8.0.21</code></p><h3 id="1-4-查看执行计划"><a href="#1-4-查看执行计划" class="headerlink" title="1.4 查看执行计划"></a>1.4 查看执行计划</h3><p>在mysql中，如果你想查看某条sql语句是否使用了索引，或者已建好的索引是否失效，可以通过<code>explain</code>关键字，查看该sql语句的执行计划，来判断索引使用情况。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from user where id=1;</span><br></pre></td></tr></table></figure><p>执行结果：<img src="https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5ianHlF0AzOr530aPCbgeARxQJRO75biaUHrCCIzWWLJZA5aXZIb06jQMK0G8EurAl78sRUyr4XsV1g/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">从图中可以看出，由于id字段是主键，该sql语句用到了<code>主键索引</code>。</p><p>当然，如果你想更深入的了解explain关键字的用法，可以看看我的另一篇文章《<a href="https://mp.weixin.qq.com/s?__biz=MzkwNjMwMTgzMQ==&mid=2247490262&idx=1&sn=a67f610afa984ecca130a54a3be453ab&scene=21#wechat_redirect">explain | 索引优化的这把绝世好剑，你真的会用吗？</a>》，里面更为详细的介绍。</p><h2 id="2-不满足最左匹配原则"><a href="#2-不满足最左匹配原则" class="headerlink" title="2. 不满足最左匹配原则"></a>2. 不满足最左匹配原则</h2><p>之前我已经给code、age和name这3个字段建好<code>联合索引</code>：idx_code_age_name。</p><p>该索引字段的顺序是：</p><ul><li>code</li><li>age</li><li>name</li></ul><p>如果在使用联合索引时，没注意最左前缀原则，很有可能导致索引失效喔，不信我们一起往下看。</p><h3 id="2-1-哪些情况索引有效？"><a href="#2-1-哪些情况索引有效？" class="headerlink" title="2.1 哪些情况索引有效？"></a>2.1 哪些情况索引有效？</h3><p>先看看哪些情况下，能走索引。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">explain select * from user</span><br><span class="line">where code=&#x27;101&#x27;;</span><br><span class="line">explain select * from user</span><br><span class="line">where code=&#x27;101&#x27; and age=21 </span><br><span class="line">explain select * from user</span><br><span class="line">where code=&#x27;101&#x27; and age=21 and name=&#x27;周星驰&#x27;;</span><br></pre></td></tr></table></figure><p>执行结果：<img src="https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5ianHlF0AzOr530aPCbgeARxHGjkWPmBePwI2hTrSLIg6unUic58VsiamdqccpKqfxHe7MVicsrqEicRrA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">上面三种情况，sql都能正常走索引。</p><p>其实还有一种比较特殊的场景：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from user</span><br><span class="line">where code = &#x27;101&#x27;  and name=&#x27;周星驰&#x27;;</span><br></pre></td></tr></table></figure><p>执行结果：<img src="https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5ianHlF0AzOr530aPCbgeARxW857PO2AicZaJBzcD8a6YJuuTaSkEZbwOjO9k7kr3gf0wbxTXlTwaUA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">查询条件原本的顺序是：code、age、name，但这里只有code和name中间断层了，掉了age字段，这种情况也能走code字段上的索引。</p><p>看到这里，不知道聪明的你，有没有发现这样一个规律：<strong>这4条sql中都有code字段，它是索引字段中的第一个字段，也就是最左边的字段。只要有这个字段在，该sql已经就能走索引。</strong></p><p>这就是我们所说的<code>最左匹配原则</code>。</p><h3 id="2-2-哪些情况索引失效？"><a href="#2-2-哪些情况索引失效？" class="headerlink" title="2.2 哪些情况索引失效？"></a>2.2 哪些情况索引失效？</h3><p>前面我已经介绍过，建立了联合索引后，在查询条件中有哪些情况索引是有效的。</p><p>接下来，我们重点看看哪些情况下索引会失效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">explain select * from user</span><br><span class="line">where age=21;</span><br><span class="line">explain select * from user</span><br><span class="line">where name=&#x27;周星驰&#x27;;</span><br><span class="line">explain select * from user</span><br><span class="line">where age=21 and name=&#x27;周星驰&#x27;;</span><br></pre></td></tr></table></figure><p>执行结果：<img src="https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5ianHlF0AzOr530aPCbgeARxgNqNibGR2iaSWgLDKr3hAUy967Zyjkgjlyn17yANY1A0lqTkCRg9APHg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">从图中看出这3种情况下索引确实失效了。</p><p>说明以上3种情况不满足最左匹配原则，说白了是因为查询条件中，没有包含给定字段最左边的索引字段，即字段code。</p><h2 id="3-使用了select"><a href="#3-使用了select" class="headerlink" title="3. 使用了select *"></a>3. 使用了select *</h2><p>在《阿里巴巴开发手册》中明确说过，查询sql中禁止使用<code>select *</code> 。</p><p>那么，你知道为什么吗？</p><p>废话不多说，按照国际惯例先上一条sql：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain </span><br><span class="line">select * from user where name=&#x27;苏三&#x27;;</span><br></pre></td></tr></table></figure><p>执行结果：<img src="https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5ianHlF0AzOr530aPCbgeARxwBB9icbgjQt3ubMTLhjtLibicIb61NGQ4bOZicrLMgRBkqsWN7H0JzA0nQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">在该sql中用了<code>select *</code>，从执行结果看，走了全表扫描，没有用到任何索引，查询效率是非常低的。</p><p>如果查询的时候，只查我们真正需要的列，而不查所有列，结果会怎么样？</p><p>非常快速的将上面的sql改成只查了code和name列，太easy了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">explain </span><br><span class="line">select code,name from user </span><br><span class="line">where name=&#x27;苏三&#x27;;</span><br></pre></td></tr></table></figure><p>执行结果：<img src="https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5ianHlF0AzOr530aPCbgeARxqfHBchA4FwqxordoOw63M4GqC6iaGrz9581fW31yiacLxdwiaEjiaMPCvw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">从图中执行结果不难看出，该sql语句这次走了<code>全索引扫描</code>，比<code>全表扫描</code>效率更高。</p><p>其实这里用到了：<code>覆盖索引</code>。</p><p>如果select语句中的查询列，都是索引列，那么这些列被称为覆盖索引。这种情况下，查询的相关字段都能走索引，索引查询效率相对来说更高一些。</p><p>而使用<code>select *</code>查询所有列的数据，大概率会查询非索引列的数据，非索引列不会走索引，查询效率非常低。</p><h2 id="4-索引列上有计算"><a href="#4-索引列上有计算" class="headerlink" title="4. 索引列上有计算"></a>4. 索引列上有计算</h2><p>介绍本章节内容前，先跟大家一起回顾一下，根据id查询数据的sql语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from user where id=1;</span><br></pre></td></tr></table></figure><p>执行结果：<img src="https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5ianHlF0AzOr530aPCbgeARxQJRO75biaUHrCCIzWWLJZA5aXZIb06jQMK0G8EurAl78sRUyr4XsV1g/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">从图中可以看出，由于id字段是主键，该sql语句用到了<code>主键索引</code>。</p><p>但如果id列上面有计算，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from user where id+1=2;</span><br></pre></td></tr></table></figure><p>执行结果：<img src="https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5ianHlF0AzOr530aPCbgeARxFE50mCCOiaW2icHczMAKy2icQqNzfFuiajb3qqbnFXB9TdOcHMsUgZLuibg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">从上图中的执行结果，能够非常清楚的看出，该id字段的主键索引，在有计算的情况下失效了。</p><h2 id="5-索引列用了函数"><a href="#5-索引列用了函数" class="headerlink" title="5. 索引列用了函数"></a>5. 索引列用了函数</h2><p>有时候我们在某条sql语句的查询条件中，需要使用函数，比如：截取某个字段的长度。</p><p>假如现在有个需求：想查出所有身高是17开头的人，如果sql语句写成这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from user  where height=17;</span><br></pre></td></tr></table></figure><p>该sql语句确实用到了普通索引：<img src="https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5ianHlF0AzOr530aPCbgeARxZtcd5Tgr6cItyGyaCPN6eFJDLhxcOgJACxSYiaicRBpHmOqH0fBLkzFQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">但该sql语句肯定是有问题的，因为它只能查出身高正好等于17的，但对于174这种情况，它没办法查出来。</p><p>为了满足上面的要求，我们需要把sql语句稍稍改造了一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from user  where SUBSTR(height,1,2)=17;</span><br></pre></td></tr></table></figure><p>这时需要用到<code>SUBSTR</code>函数，用它截取了height字段的前面两位字符，从第一个字符开始。</p><p>执行结果：<img src="https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5ianHlF0AzOr530aPCbgeARxibYLtLJY8914t6w2kvzicoauoWhVKCJCtdjhicjTYY9EcqUkP0PHAWo5w/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">你有没有发现，在使用该函数之后，该sql语句竟然走了全表扫描，索引失效了。</p><h2 id="6-字段类型不同"><a href="#6-字段类型不同" class="headerlink" title="6. 字段类型不同"></a>6. 字段类型不同</h2><p>在sql语句中因为字段类型不同，而导致索引失效的问题，很容易遇到，可能是我们日常工作中最容易忽略的问题。</p><p>到底怎么回事呢？</p><p>请大家注意观察一下t_user表中的code字段，它是<code>varchar</code>字符类型的。</p><p>在sql语句中查询数据时，查询条件我们可以写成这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain </span><br><span class="line">select * from user where code=&quot;101&quot;;</span><br></pre></td></tr></table></figure><p>执行结果：<img src="https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5ianHlF0AzOr530aPCbgeARxSr5G9x18lcJpxtH6G54kVTBXwHgmjMFcRxSOIOg2PzLShAahnJr5SQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">从上图中看到，该code字段走了索引。</p><blockquote><p>温馨提醒一下，查询字符字段时，用双引号<code>“</code>和单引号<code>&#39;</code>都可以。</p></blockquote><p>但如果你在写sql时，不小心把引号弄掉了，把sql语句变成了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain </span><br><span class="line">select * from user where code=101;</span><br></pre></td></tr></table></figure><p>执行结果：<img src="https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5ianHlF0AzOr530aPCbgeARxZ54Oj4Q6fnDHc10zgmIicZnDksibWDtCqT5DzysgQ2ziawJiaJEbhiaoYTg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">你会惊奇的发现，该sql语句竟然变成了全表扫描。因为少写了引号，这种小小的失误，竟然让code字段上的索引失效了。</p><p>这时你心里可能有一万个为什么，其中有一个肯定是：为什么索引会失效呢？</p><p>答：因为code字段的类型是varchar，而传参的类型是int，两种类型不同。</p><p>此外，还有一个有趣的现象，如果int类型的height字段，在查询时加了引号条件，却还可以走索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from user </span><br><span class="line">where height=&#x27;175&#x27;;</span><br></pre></td></tr></table></figure><p>执行结果：<img src="https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5ianHlF0AzOr530aPCbgeARxN3AzwRmR7OKPE7GnAicdlbyqzeoSm9vImnqtKUAZoktR2VawQnBz67g/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">从图中看出该sql语句确实走了索引。int类型的参数，不管在查询时加没加引号，都能走索引。</p><p>这是变魔术吗？这不科学呀。</p><p>答：mysql发现如果是<code>int</code>类型字段作为查询条件时，它会自动将该字段的传参进行<code>隐式转换</code>，把字符串转换成int类型。</p><p>mysql会把上面列子中的字符串175，转换成数字175，所以仍然能走索引。</p><p>接下来，看一个更有趣的sql语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 1 + &#x27;1&#x27;;</span><br></pre></td></tr></table></figure><p>它的执行结果是2，还是11呢？</p><p>好吧，不卖关子了，直接公布答案执行结果是2。</p><p>mysql自动把字符串1，转换成了int类型的1，然后变成了：1+1&#x3D;2。</p><p>但如果你确实想拼接字符串该怎么办？</p><p>答：可以使用<code>concat</code>关键字。</p><p>具体拼接sql如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select concat(1,&#x27;1&#x27;);</span><br></pre></td></tr></table></figure><p>接下来，关键问题来了：<strong>为什么字符串类型的字段，传入了int类型的参数时索引会失效呢？</strong></p><p>答：根据mysql官网上解释，字符串’1’、’ 1 ‘、’1a’都能转换成int类型的1，也就是说可能会出现多个字符串，对应一个int类型参数的情况。那么，mysql怎么知道该把int类型的1转换成哪种字符串，用哪个索引快速查值?</p><p>感兴趣的小伙伴可以再看看官方文档：<code>https://dev.mysql.com/doc/refman/8.0/en/type-conversion.html</code></p><h2 id="7-like左边包含"><a href="#7-like左边包含" class="headerlink" title="7. like左边包含%"></a>7. like左边包含%</h2><p>模糊查询，在我们日常的工作中，使用频率还是比较高的。</p><p>比如现在有个需求：想查询姓李的同学有哪些?</p><p>使用<code>like</code>语句可以很快的实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user where name like &#x27;李%&#x27;;</span><br></pre></td></tr></table></figure><p>但如果like用的不好，就可能会出现性能问题，因为有时候它的索引会失效。</p><p>不信，我们一起往下看。</p><p>目前like查询主要有三种情况：</p><ul><li>like ‘%a’</li><li>like ‘a%’</li><li>like ‘%a%’</li></ul><p>假如现在有个需求：想查出所有code是10开头的用户。</p><p>这个需求太简单了吧，sql语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from user</span><br><span class="line">where code like &#x27;10%&#x27;;</span><br></pre></td></tr></table></figure><p>执行结果：<img src="https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5ianHlF0AzOr530aPCbgeARxyWM2MscoZ431rv55clQU1rh1nqH35PRic59fKZrTO6n7UHZnwoNC7RQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">图中看出这种<code>%</code>在<code>10</code>右边时走了索引。</p><p>而如果把需求改了：想出现出所有code是1结尾的用户。</p><p>查询sql语句改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from user</span><br><span class="line">where code like &#x27;%1&#x27;;</span><br></pre></td></tr></table></figure><p>执行结果：<img src="https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5ianHlF0AzOr530aPCbgeARxzzyCNkXMJsNEJ4KRkfyFJibUPJSD4kwdhibfe1qPibOvaOAicib5tEdlXEw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">从图中看出这种<code>%</code>在<code>1</code>左边时，code字段上索引失效了，该sql变成了全表扫描。</p><p>此外，如果出现以下sql：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from user</span><br><span class="line">where code like &#x27;%1%&#x27;;</span><br></pre></td></tr></table></figure><p>该sql语句的索引也会失效。</p><p>下面用一句话总结一下规律：当<code>like</code>语句中的<code>%</code>，出现在查询条件的左边时，索引会失效。</p><p>那么，为什么会出现这种现象呢？</p><p>答：其实很好理解，索引就像字典中的目录。一般目录是按字母或者拼音从小到大，从左到右排序，是有顺序的。</p><p>我们在查目录时，通常会先从左边第一个字母进行匹对，如果相同，再匹对左边第二个字母，如果再相同匹对其他的字母，以此类推。</p><p>通过这种方式我们能快速锁定一个具体的目录，或者缩小目录的范围。</p><p>但如果你硬要跟目录的设计反着来，先从字典目录右边匹配第一个字母，这画面你可以自行脑补一下，你眼中可能只剩下绝望了，哈哈。</p><h2 id="8-列对比"><a href="#8-列对比" class="headerlink" title="8. 列对比"></a>8. 列对比</h2><p>上面的内容都是常规需求，接下来，来点不一样的。</p><p>假如我们现在有这样一个需求：过滤出表中某两列值相同的记录。比如user表中id字段和height字段，查询出这两个字段中值相同的记录。</p><p>这个需求很简单，sql可以这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from user </span><br><span class="line">where id=height</span><br></pre></td></tr></table></figure><p>执行结果：<img src="https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5ianHlF0AzOr530aPCbgeARxATykTtpHcIEib2ib2tvIXZYnsHYL1K7f8S59AbSxyR9devtIlR3zE63w/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">意不意外，惊不惊喜？索引失效了。</p><p>为什么会出现这种结果？</p><p>id字段本身是有主键索引的，同时height字段也建了普通索引的，并且两个字段都是int类型，类型是一样的。</p><p>但如果把两个单独建了索引的列，用来做列对比时索引会失效。</p><p>感兴趣的朋友可以找我私聊。</p><h2 id="9-使用or关键字"><a href="#9-使用or关键字" class="headerlink" title="9. 使用or关键字"></a>9. 使用or关键字</h2><p>我们平时在写查询sql时，使用<code>or</code>关键字的场景非常多，但如果你稍不注意，就可能让已有的索引失效。</p><p>不信一起往下面看。</p><p>某天你遇到这样一个需求：想查一下id&#x3D;1或者height&#x3D;175的用户。</p><p>你三下五除二就把sql写好了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from user </span><br><span class="line">where id=1 or height=&#x27;175&#x27;;</span><br></pre></td></tr></table></figure><p>执行结果：<img src="https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5ianHlF0AzOr530aPCbgeARx1CDbf9T5Ih1j7879qB3hQHj1rvCC7tX6R2q7XakLNrNT8XPwgvO2Ww/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">没错，这次确实走了索引，恭喜被你蒙对了，因为刚好id和height字段都建了索引。</p><p>但接下来的一个夜黑风高的晚上，需求改了：除了前面的查询条件之后，还想加一个address&#x3D;’成都’。</p><p>这还不简单，sql走起：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from user </span><br><span class="line">where id=1 or height=&#x27;175&#x27; or address=&#x27;成都&#x27;;</span><br></pre></td></tr></table></figure><p>执行结果：<img src="https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5ianHlF0AzOr530aPCbgeARxFJKUW01NVwsjSwqONS8D6Ljex32QzTT2yibz95AsgEXAbW3QnpoPbvg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">结果悲剧了，之前的索引都失效了。</p><p>你可能一脸懵逼，为什么？我做了什么？</p><p>答：因为你最后加的address字段没有加索引，从而导致其他字段的索引都失效了。</p><blockquote><p>注意：如果使用了<code>or</code>关键字，那么它前面和后面的字段都要加索引，不然所有的索引都会失效，这是一个大坑。</p></blockquote><h2 id="10-not-in和not-exists"><a href="#10-not-in和not-exists" class="headerlink" title="10. not in和not exists"></a>10. not in和not exists</h2><p>在我们日常工作中用得也比较多的，还有范围查询，常见的有：</p><ul><li>in</li><li>exists</li><li>not in</li><li>not exists</li><li>between and</li></ul><p>今天重点聊聊前面四种。</p><h3 id="10-1-in关键字"><a href="#10-1-in关键字" class="headerlink" title="10.1 in关键字"></a>10.1 in关键字</h3><p>假如我们想查出height在某些范围之内的用户，这时sql语句可以这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from user</span><br><span class="line">where height in (173,174,175,176);</span><br></pre></td></tr></table></figure><p>执行结果：<img src="https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5ianHlF0AzOr530aPCbgeARxZRM1aOY5ziaeHOia1dp1tsGSicXc1gXD433RkKnTrgTicf8DoK4MARVUBQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">从图中可以看出，sql语句中用<code>in</code>关键字是走了索引的。</p><h3 id="10-2-exists关键字"><a href="#10-2-exists关键字" class="headerlink" title="10.2 exists关键字"></a>10.2 exists关键字</h3><p>有时候使用<code>in</code>关键字时性能不好，这时就能用<code>exists</code>关键字优化sql了，该关键字能达到in关键字相同的效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from user  t1</span><br><span class="line">where  exists (select 1 from user t2 where t2.height=173 and t1.id=t2.id)</span><br></pre></td></tr></table></figure><p>执行结果：<img src="https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5ianHlF0AzOr530aPCbgeARxuPNvlnNJEwkYZBw5vxzRoTq4GuRvXhlSB0RWSJzXX7C31JSbthicCXg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">从图中可以看出，用<code>exists</code>关键字同样走了索引。</p><h3 id="10-3-not-in关键字"><a href="#10-3-not-in关键字" class="headerlink" title="10.3 not in关键字"></a>10.3 not in关键字</h3><p>上面演示的两个例子是正向的范围，即在某些范围之内。</p><p>那么反向的范围，即不在某些范围之内，能走索引不？</p><p>话不多说，先看看使用<code>not in</code>的情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from user</span><br><span class="line">where height not in (173,174,175,176);</span><br></pre></td></tr></table></figure><p>执行结果：<img src="https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5ianHlF0AzOr530aPCbgeARxMj9sUzEnFHLEjdGpHHOA4enB0ibOR4O3pyD4QZibl9icwjHMdS0ctC15w/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">你没看错，索引失效了。</p><p>看如果现在需求改了：想查一下id不等于1、2、3的用户有哪些，这时sql语句可以改成这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from user</span><br><span class="line">where id  not in (173,174,175,176);</span><br></pre></td></tr></table></figure><p>执行结果：<img src="https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5ianHlF0AzOr530aPCbgeARxibPgPJYMLqbWvZKo5cx836kAOia0wk79YvhlugrBkVUzFvZIHD3LJFKw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">你可能会惊奇的发现，主键字段中使用not in关键字查询数据范围，任然可以走索引。而普通索引字段使用了not in关键字查询数据范围，索引会失效。</p><h3 id="10-4-not-exists关键字"><a href="#10-4-not-exists关键字" class="headerlink" title="10.4 not exists关键字"></a>10.4 not exists关键字</h3><p>除此之外，如果sql语句中使用<code>not exists</code>时，索引也会失效。具体sql语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from user  t1</span><br><span class="line">where  not exists (select 1 from user t2 where t2.height=173 and t1.id=t2.id)</span><br></pre></td></tr></table></figure><p>执行结果：<img src="https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5ianHlF0AzOr530aPCbgeARx0FwkHHm2fJQwnGPjVYvgVUPZUn4PYcekvicWjaCRTwvWUvRT3kEa2nQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">从图中看出sql语句中使用not exists关键后，t1表走了全表扫描，并没有走索引。</p><h2 id="11-order-by的坑"><a href="#11-order-by的坑" class="headerlink" title="11. order by的坑"></a>11. order by的坑</h2><p>在sql语句中，对查询结果进行排序是非常常见的需求，一般情况下我们用关键字：<code>order by</code>就能搞定。</p><p>但我始终觉得order by挺难用的，它跟<code>where</code>或者<code>limit</code>关键字有很多千丝万缕的联系，一不小心就会出问题。</p><p>Let go</p><h3 id="11-1-哪些情况走索引？"><a href="#11-1-哪些情况走索引？" class="headerlink" title="11.1 哪些情况走索引？"></a>11.1 哪些情况走索引？</h3><p>首先当然要温柔一点，一起看看order by的哪些情况可以走索引。</p><p>我之前说过，在code、age和name这3个字段上，已经建了联合索引：idx_code_age_name。</p><h4 id="11-1-1-满足最左匹配原则"><a href="#11-1-1-满足最左匹配原则" class="headerlink" title="11.1.1 满足最左匹配原则"></a>11.1.1 满足最左匹配原则</h4><p>order by后面的条件，也要遵循联合索引的最左匹配原则。具体有以下sql：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">解释explain select * from user</span><br><span class="line">order by code limit 100;</span><br><span class="line"></span><br><span class="line">explain select * from user</span><br><span class="line">order by code,age limit 100;</span><br><span class="line"></span><br><span class="line">explain select * from user</span><br><span class="line">order by code,age,name limit 100;</span><br></pre></td></tr></table></figure><p>执行结果：<img src="https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5ianHlF0AzOr530aPCbgeARxNmINw94jaF576u7kUmo0VuXPibe4lVPuibJSz0eAM9ic0T9uEJMswpVzg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">从图中看出这3条sql都能够正常走索引。</p><p>除了遵循最左匹配原则之外，有个非常关键的地方是，后面还是加了<code>limit</code>关键字，如果不加它索引会失效。</p><h4 id="11-1-2-配合where一起使用"><a href="#11-1-2-配合where一起使用" class="headerlink" title="11.1.2 配合where一起使用"></a>11.1.2 配合where一起使用</h4><p>order by还能配合where一起遵循最左匹配原则。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">explain select * from user</span><br><span class="line">where code=&#x27;101&#x27;</span><br><span class="line">order by age;</span><br></pre></td></tr></table></figure><p>执行结果：<img src="https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5ianHlF0AzOr530aPCbgeARxT7qiaKHq2mbe1jUpDjxbOJNV9ChrQveAx36h7jibJrDjPHzmjtKt3Jcw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">code是联合索引的第一个字段，在where中使用了，而age是联合索引的第二个字段，在order by中接着使用。</p><p>假如中间断层了，sql语句变成这样，执行结果会是什么呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">explain select * from user</span><br><span class="line">where code=&#x27;101&#x27;</span><br><span class="line">order by name;</span><br></pre></td></tr></table></figure><p>执行结果：<img src="https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5ianHlF0AzOr530aPCbgeARxqtBw9qmRiaa5UFykCW8zibVU2OeMuwEZkY1b99OvMmozhwfpkIFEYEIg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">虽说name是联合索引的第三个字段，但根据最左匹配原则，该sql语句依然能走索引，因为最左边的第一个字段code，在where中使用了。只不过order by的时候，排序效率比较低，需要走一次<code>filesort</code>排序罢了。</p><h4 id="11-1-3-相同的排序"><a href="#11-1-3-相同的排序" class="headerlink" title="11.1.3 相同的排序"></a>11.1.3 相同的排序</h4><p>order by后面如果包含了联合索引的多个排序字段，只要它们的排序规律是相同的（要么同时升序，要么同时降序），也可以走索引。</p><p>具体sql如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from user</span><br><span class="line">order by code desc,age desc limit 100;</span><br></pre></td></tr></table></figure><p>执行结果：<img src="https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5ianHlF0AzOr530aPCbgeARxSSTypA76oyALHuu3MDoKvmy3UyMS9q4RSPNs2Wy9N4W7H8zfFLv5Jg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">该示例中order by后面的code和age字段都用了降序，所以依然走了索引。</p><h4 id="11-1-4-两者都有"><a href="#11-1-4-两者都有" class="headerlink" title="11.1.4 两者都有"></a>11.1.4 两者都有</h4><p>如果某个联合索引字段，在where和order by中都有，结果会怎么样？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">explain select * from user</span><br><span class="line">where code=&#x27;101&#x27;</span><br><span class="line">order by code, name;</span><br></pre></td></tr></table></figure><p>执行结果：<img src="https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5ianHlF0AzOr530aPCbgeARxemt6JtTkmxaUIDJN6HJ9dBBdaWwxKV8jibTCN3Am3P33B8MG0h37WMA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">code字段在where和order by中都有，对于这种情况，从图中的结果看出，还是能走了索引的。</p><h3 id="11-2-哪些情况不走索引？"><a href="#11-2-哪些情况不走索引？" class="headerlink" title="11.2 哪些情况不走索引？"></a>11.2 哪些情况不走索引？</h3><p>前面介绍的都是正面的用法，是为了让大家更容易接受下面反面的用法。</p><p>好了，接下来，重点聊聊order by的哪些情况下不走索引？</p><h4 id="11-2-1-没加where或limit"><a href="#11-2-1-没加where或limit" class="headerlink" title="11.2.1 没加where或limit"></a>11.2.1 没加where或limit</h4><p>如果order by语句中没有加where或limit关键字，该sql语句将不会走索引。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from user</span><br><span class="line">order by code, name;</span><br></pre></td></tr></table></figure><p>执行结果：<img src="https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5ianHlF0AzOr530aPCbgeARxEsoVqloBRCENzF6eEf3O9iaqTwhvrMGMYa8DpmnNJHfEUJun6o7iaa1w/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">从图中看出索引真的失效了。</p><h4 id="11-2-2-对不同的索引做order-by"><a href="#11-2-2-对不同的索引做order-by" class="headerlink" title="11.2.2 对不同的索引做order by"></a>11.2.2 对不同的索引做order by</h4><p>前面介绍的基本都是联合索引，这一个索引的情况。但如果对多个索引进行order by，结果会怎么样呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from user</span><br><span class="line">order by code, height limit 100;</span><br></pre></td></tr></table></figure><p>执行结果：<img src="https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5ianHlF0AzOr530aPCbgeARxEsoVqloBRCENzF6eEf3O9iaqTwhvrMGMYa8DpmnNJHfEUJun6o7iaa1w/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">从图中看出索引也失效了。</p><h4 id="11-2-3-不满足最左匹配原则"><a href="#11-2-3-不满足最左匹配原则" class="headerlink" title="11.2.3 不满足最左匹配原则"></a>11.2.3 不满足最左匹配原则</h4><p>前面已经介绍过，order by如果满足最左匹配原则，还是会走索引。下面看看，不满足最左匹配原则的情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from user</span><br><span class="line">order by name limit 100;</span><br></pre></td></tr></table></figure><p>执行结果：<img src="https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5ianHlF0AzOr530aPCbgeARxKibqx24Ba74ljuZgTEHeFOLJtJYpkuYWWcdIXY8AcQHHVia4kpQv5RZw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">name字段是联合索引的第三个字段，从图中看出如果order by不满足最左匹配原则，确实不会走索引。</p><h4 id="11-2-4-不同的排序"><a href="#11-2-4-不同的排序" class="headerlink" title="11.2.4 不同的排序"></a>11.2.4 不同的排序</h4><p>前面已经介绍过，如果order by后面有一个联合索引的多个字段，它们具有相同排序规则，那么会走索引。</p><p>但如果它们有不同的排序规则呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">explain select * from user</span><br><span class="line">order by code asc,age desc limit 100;</span><br></pre></td></tr></table></figure><p>执行结果：<img src="https://mmbiz.qpic.cn/mmbiz_png/ibJZVicC7nz5ianHlF0AzOr530aPCbgeARxcNICl7kPMwXKrPfUHZVkImKkJWNibFZqia4mZA0qOQMRMzzqRrz9QO8g/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">从图中看出，尽管order by后面的code和age字段遵循了最左匹配原则，但由于一个字段是用的升序，另一个字段用的降序，最终会导致索引失效。</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>knn分类案例</title>
      <link href="/2024/03/31/knn%E5%88%86%E7%B1%BB%E6%A1%88%E4%BE%8B/"/>
      <url>/2024/03/31/knn%E5%88%86%E7%B1%BB%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="knn"><a href="#knn" class="headerlink" title="knn"></a>knn</h3><p>k近邻算法，依据少数服从多数。根据已经被正确分类的邻居预测</p><p>选择k个邻居中，较大数量的一类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets._samples_generator <span class="keyword">import</span> make_blobs</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="comment">#中心点</span></span><br><span class="line">centers=[[-<span class="number">2</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">4</span>]]</span><br><span class="line"><span class="comment">#n_samples:生成样本的数量</span></span><br><span class="line"><span class="comment">#centers:生成中心位置和所需生成样本的个数]</span></span><br><span class="line"><span class="comment">#random_state:随机数种子,未指定情况下，随机生成，每次生成结果不同</span></span><br><span class="line"><span class="comment">#cluster_std:每个簇的方差，指明生成点的分散程度</span></span><br><span class="line"><span class="comment">#X为生成的样本特征，Y为样本簇类别，两者长度相同</span></span><br><span class="line"><span class="comment">#训练集</span></span><br><span class="line">X,Y=make_blobs(n_samples=<span class="number">100</span>,centers=centers,random_state=<span class="number">0</span>,cluster_std=<span class="number">0.6</span>)</span><br><span class="line"><span class="comment">#预测点</span></span><br><span class="line">X_sample=np.array([[<span class="number">0</span>,<span class="number">2</span>]])</span><br><span class="line"><span class="comment">#中心点</span></span><br><span class="line">c=np.array(centers)</span><br><span class="line"><span class="comment">#画出样本</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">8</span>),dpi=<span class="number">144</span>)</span><br><span class="line">plt.scatter(X[:,<span class="number">0</span>],X[:,<span class="number">1</span>],c=Y,s=<span class="number">100</span>,alpha=<span class="number">0.5</span>)</span><br><span class="line"><span class="comment">#画出中心点</span></span><br><span class="line">plt.scatter(c[:,<span class="number">0</span>],c[:,<span class="number">1</span>],marker=<span class="string">&#x27;*&#x27;</span>,c=<span class="string">&#x27;red&#x27;</span>,s=<span class="number">500</span>)</span><br><span class="line"><span class="comment">#画出预测点，符号为圆圈，绿色，大小100</span></span><br><span class="line">plt.scatter(X_sample[:,<span class="number">0</span>],X_sample[:,<span class="number">1</span>],marker=<span class="string">&#x27;o&#x27;</span>,c=<span class="string">&#x27;green&#x27;</span>,s=<span class="number">100</span>,alpha=<span class="number">0.5</span>)</span><br><span class="line"><span class="comment">#定义knn算法</span></span><br><span class="line">k=<span class="number">5</span></span><br><span class="line">clf=KNeighborsClassifier(n_neighbors=k)</span><br><span class="line">clf.fit(X,Y)</span><br><span class="line"><span class="comment">#取离预测点最近的k个点</span></span><br><span class="line">neighbors=clf.kneighbors([[<span class="number">0</span>,<span class="number">2</span>]],k,<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(X)</span><br><span class="line"><span class="comment">#画出待遇测点和最近点连接线</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> neighbors[<span class="number">0</span>]:</span><br><span class="line">    <span class="built_in">print</span>(X[i][<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">print</span>(X[i][<span class="number">1</span>])</span><br><span class="line">    <span class="comment">#X[i][0]标识X的第i个横坐标，X[i][1]标识X的第i个纵坐标</span></span><br><span class="line">    plt.plot([X[i][<span class="number">0</span>],X_sample[<span class="number">0</span>][<span class="number">0</span>]],[X[i][<span class="number">1</span>],X_sample[<span class="number">0</span>][<span class="number">1</span>]],<span class="string">&#x27;k--&#x27;</span>,linewidth=<span class="number">0.6</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#开始训练</span></span><br><span class="line">Y_sample=clf.predict(X_sample)</span><br><span class="line"><span class="built_in">print</span>(Y_sample)</span><br></pre></td></tr></table></figure><p>预测结果：</p><p>[0]</p><p><img src="https://img2.imgtp.com/2024/03/31/DYt3th0L.png" alt="image-20240331233138309"></p>]]></content>
      
      
      <categories>
          
          <category> knn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> knn </tag>
            
            <tag> 分类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stream流的创建和转化</title>
      <link href="/2024/03/31/stream%E6%B5%81%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/03/31/stream%E6%B5%81%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h4 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; a=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(</span><br><span class="line">        Arrays.asList(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;f&quot;</span>,<span class="string">&quot;g&quot;</span>,<span class="string">&quot;h&quot;</span>,<span class="string">&quot;i&quot;</span>,<span class="string">&quot;j&quot;</span>,<span class="string">&quot;k&quot;</span>,<span class="string">&quot;l&quot;</span>,<span class="string">&quot;m&quot;</span>,<span class="string">&quot;n&quot;</span>,<span class="string">&quot;o&quot;</span>,<span class="string">&quot;p&quot;</span>,<span class="string">&quot;q&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="string">&quot;s&quot;</span>,<span class="string">&quot;t&quot;</span>,<span class="string">&quot;u&quot;</span>,<span class="string">&quot;v&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="string">&quot;x&quot;</span>,<span class="string">&quot;y&quot;</span>,<span class="string">&quot;z&quot;</span>)</span><br><span class="line">);</span><br><span class="line"> String[] arr=<span class="keyword">new</span> <span class="title class_">String</span>[]</span><br><span class="line">         &#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line"> String str=<span class="string">&quot;a/b/c&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="流的创建"><a href="#流的创建" class="headerlink" title="流的创建"></a>流的创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt;newStream= Stream.of(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>);</span><br><span class="line">Stream&lt;String&gt;arrStream=Arrays.stream(arr);</span><br><span class="line">Stream&lt;String&gt;arrsubStream=Arrays.stream(arr,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">Stream&lt;String&gt;patterStream=Pattern.compile(<span class="string">&quot;a/b/c&quot;</span>).splitAsStream(str);</span><br><span class="line">Stream&lt;String&gt;strStream=Arrays.stream(str.split(<span class="string">&quot;/&quot;</span>));</span><br><span class="line">Stream&lt;String&gt;emptyStream=Stream.empty();</span><br><span class="line">Stream&lt;String&gt;echoStream=Stream.generate(()-&gt; <span class="string">&quot;echo&quot;</span>);</span><br><span class="line">Stream&lt;Double&gt;randomStream=Stream.generate(Double m-&gt;&#123;</span><br><span class="line">     <span class="keyword">return</span>  Math.random();</span><br><span class="line">&#125;);</span><br><span class="line">Stream&lt;Double&gt;iterateStream=Stream.iterate(<span class="number">0.5</span>,p-&gt;p.compareTo(<span class="number">10.0</span>)&lt;<span class="number">0</span>, p-&gt;p+p);</span><br></pre></td></tr></table></figure><h4 id="流的转化"><a href="#流的转化" class="headerlink" title="流的转化"></a>流的转化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">String[] c=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line">String[] d=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>&#125;;</span><br><span class="line">Stream.concat(Arrays.stream(d),Arrays.stream(c));</span><br><span class="line">arrStream.filter(aa-&gt;aa.startsWith(<span class="string">&quot;a&quot;</span>)).map(String::toUpperCase).forEach(x-&gt;System.out.println(x));</span><br><span class="line">arrStream.filter(aaaa-&gt;aaaa.startsWith(<span class="string">&quot;a&quot;</span>)).map(x-&gt;x.toUpperCase()).forEach(x-&gt;System.out.println(x));</span><br><span class="line"></span><br><span class="line">Arrays.stream(c,<span class="number">1</span>,<span class="number">3</span>).flatMap(p-&gt;Arrays.stream(d));</span><br><span class="line">iterateStream.limit(<span class="number">5</span>).collect(Collectors.toList());</span><br><span class="line">iterateStream.limit(<span class="number">5</span>).skip(<span class="number">1</span>);</span><br><span class="line">iterateStream.limit(<span class="number">5</span>).skip(<span class="number">1</span>).takeWhile(p-&gt;p&lt;<span class="number">5</span>);</span><br><span class="line">iterateStream.limit(<span class="number">5</span>).skip(<span class="number">1</span>).takeWhile(p-&gt;p&lt;<span class="number">5</span>).dropWhile(p-&gt;p&lt;<span class="number">3</span>);</span><br><span class="line">iterateStream.limit(<span class="number">5</span>).skip(<span class="number">1</span>).takeWhile(p-&gt;p&lt;<span class="number">5</span>).dropWhile(p-&gt;p&lt;<span class="number">3</span>).peek(x-&gt;System.out.println(<span class="string">&quot;peek&quot;</span>+x));</span><br><span class="line">iterateStream.limit(<span class="number">5</span>).skip(<span class="number">1</span>).takeWhile(p-&gt;p&lt;<span class="number">5</span>).dropWhile(p-&gt;p&lt;<span class="number">3</span>).peek(x-&gt;System.out.println(<span class="string">&quot;peek&quot;</span>+x)).sorted()</span><br><span class="line">;</span><br><span class="line">echoStream.distinct().peek(x-&gt;System.out.println(<span class="string">&quot;peek&quot;</span>+x));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> stream流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Personalized Federated Recommendation via Joint Representation Learning, User Clustering, and Model Adaptation</title>
      <link href="/2023/12/26/Personalized-Federated-Recommendation-via-Joint-Representation-Learning-User-Clustering-and-Model-Adaptation/"/>
      <url>/2023/12/26/Personalized-Federated-Recommendation-via-Joint-Representation-Learning-User-Clustering-and-Model-Adaptation/</url>
      
        <content type="html"><![CDATA[<p>文章针对其他联邦学习框架存在的问题，包括：</p><p>中央服务器需要和所有节点进行通信，对于计算性能较差的节点性能负担大，整个框架的通信成本高</p><p>各个节点共用一个全局模型，未考虑节点的个性化需求（非独立同分布的用户任务数据）</p><p>提出了对应的解决方案（PerFedRec framework)：</p><p>框架由两部分组成，user-side 端到端本地推荐网络和server-side聚合器组成。</p><p>user-side 端到端本地推荐网络分为三部分，负责原始数据编码的Raw Embedding Model、Local GNN Model（图卷积网络，文章实验中使用了Light GCN）、Personalized Prediction Module（生成预测模型）</p><p>在Raw Embedding Model中，文章基于用户属性信息、item 信息，使用attention机制，将用户与item的协作信息结合（文章未详细说明结合信息，猜测根据接单频次，对不同类型任务进行了降权重等操作），训练过程中，用户embeddings本地存储，item embeddings全局共享。</p><p>在Local GNN Model中，文章将用户embeddings和这个用户协作过的item的ID加密并上传到服务器，服务器将信息发送给同样与该item交互过的用户（其中所谓的ID具体用作何用，未解释，文章只提到采用与Federated Social Recommendation with Graph Neural Network相同的方式），最终每个用户使用本地user-item交互矩阵和从服务器获得的信息，训练自己的模型。</p><p>在Personalized Prediction Module，文章分别训练节点本地模型、用户簇模型和全局模型，并将三个模型根据权重α，α，α，最终实现个性化预测。</p><p>server-side聚合器主要实现相似用户的聚类、聚类后参与训练的用户选择、以及全局模型和用户簇模型的聚合、用户embeddings与服务器交互（加密的情况下）、item embeddings全局更新。</p><p>文章未对Raw Embedding Model中使用的特征信息作详细说明，例如任务类型、任务空间信息等。其次在相似用户簇中随机挑选用户进行训练的方式，未考虑用户参与训练的积极性，未采取相应的激励机制，同时随机挑选的用户是否能代表用户簇内绝大多数用户偏好，文章并未验证说明；</p><p>因文章中提到了GNN，最近也对GNN的相关概念进行了学习，但是并不够深入，GNN在推荐系统中被应用，但阅读文章时有很多涉及原理的知识，不是很懂，后面也会继续学习相关知识。最后，关于文章中提到的Federated Social Recommendation with Graph Neural Network，使用GNN实现推荐，打算进行详细阅读。</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 联邦学习 </tag>
            
            <tag> GNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue表格动态匹配列表数据</title>
      <link href="/2023/12/20/vue%E8%A1%A8%E6%A0%BC%E5%8A%A8%E6%80%81%E5%8C%B9%E9%85%8D%E5%88%97%E8%A1%A8%E6%95%B0%E6%8D%AE/"/>
      <url>/2023/12/20/vue%E8%A1%A8%E6%A0%BC%E5%8A%A8%E6%80%81%E5%8C%B9%E9%85%8D%E5%88%97%E8%A1%A8%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>业务场景：</p><p>数据隶属于区域之下，区域分为二级，分别为一级区域和二级区域，二级区域隶属于一级区域。存放该数据的数据库表，每条记录和其关联的一级区域、二级区域的id做关联。</p><p>现要将数据在前端页面统一管理，并将区域id显示为区域名称；</p><p>初始表格渲染数据的写法为：</p><p>后端接口查询数据库记录，根据数据记录关联的各个id查询对应区域数据库表的数据，在接口中将区域名称等信息返回给前端，前端直接渲染区域名称字段，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-table :data=<span class="string">&quot;overviewTableData&quot;</span> style=<span class="string">&quot;width: 100% ;&quot;</span> size=<span class="string">&quot;small&quot;</span></span><br><span class="line">          :header-cell-style=<span class="string">&quot;&#123; background: &#x27;#F8F8F9&#x27;, color: &#x27;#606266&#x27; &#125;&quot;</span></span><br><span class="line">          height=<span class="string">&quot;83vh&quot;</span></span><br><span class="line">          v-loading=<span class="string">&quot;loading&quot;</span></span><br><span class="line">          element-loading-text=<span class="string">&quot;拼命加载中&quot;</span></span><br><span class="line">          @row-dblclick=<span class="string">&quot;overviewRowClickDispose&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;id&quot;</span> <span class="attr">label</span>=<span class="string">&quot;编号&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50px&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;&#123;scope.$index&#125;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;factory_id&quot;</span> <span class="attr">label</span>=<span class="string">&quot;分厂&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>   </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;workshop_id&quot;</span> <span class="attr">label</span>=<span class="string">&quot;车间&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;alarm_type_id&quot;</span> <span class="attr">label</span>=<span class="string">&quot;报警类型&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;报警原因&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line">&lt;/el-table&gt;</span><br></pre></td></tr></table></figure><p>面临问题：在编辑信息时，由于字段对应的是区域名称，而数据库中需要的是区域id，需要作处理，有两种方式：</p><ul><li>前端增加两个列表，存放所有区域的信息，并在渲染表格时，使用v-for、v-if，做名称匹配</li><li>后端在接受的前端数据后，根据名称查询区域id</li></ul><p>这里采用第一种方式，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-table :data=<span class="string">&quot;overviewTableData&quot;</span> style=<span class="string">&quot;width: 100% ;&quot;</span> size=<span class="string">&quot;small&quot;</span></span><br><span class="line">          :header-cell-style=<span class="string">&quot;&#123; background: &#x27;#F8F8F9&#x27;, color: &#x27;#606266&#x27; &#125;&quot;</span></span><br><span class="line">          height=<span class="string">&quot;83vh&quot;</span></span><br><span class="line">          v-loading=<span class="string">&quot;loading&quot;</span></span><br><span class="line">          element-loading-text=<span class="string">&quot;拼命加载中&quot;</span></span><br><span class="line">          @row-dblclick=<span class="string">&quot;overviewRowClickDispose&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;id&quot;</span> <span class="attr">label</span>=<span class="string">&quot;编号&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50px&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;&#123;scope.$index&#125;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;factory_id&quot;</span> <span class="attr">label</span>=<span class="string">&quot;分厂&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">span</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">v-for</span>=<span class="string">&quot;item in factoryList&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">:value</span>=<span class="string">&quot;item.id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">v-if</span>=<span class="string">&quot;scope.row.factory_id == item.id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;&#123; item.company &#125;&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;workshop_id&quot;</span> <span class="attr">label</span>=<span class="string">&quot;车间&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">span</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">v-for</span>=<span class="string">&quot;item in workshopListAll&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">:value</span>=<span class="string">&quot;item.id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">v-if</span>=<span class="string">&quot;scope.row.workshop_id == item.id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;&#123; item.team_name &#125;&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;alarm_type_id&quot;</span> <span class="attr">label</span>=<span class="string">&quot;报警类型&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">span</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">v-for</span>=<span class="string">&quot;item in alarmTypeList&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">:value</span>=<span class="string">&quot;item.id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">v-if</span>=<span class="string">&quot;scope.row.alarm_type_id == item.id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;&#123; item.type_name &#125;&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;报警原因&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                       @<span class="attr">click</span>=<span class="string">&quot;overviewDelete(scope.row)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                       @<span class="attr">click</span>=<span class="string">&quot;overviewUpdate(scope.row)&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line">&lt;/el-table&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> el-table </tag>
            
            <tag> 数据匹配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>空间众包中联邦任务分配的个性化位置偏好学习</title>
      <link href="/2023/12/19/%E7%A9%BA%E9%97%B4%E4%BC%97%E5%8C%85%E4%B8%AD%E8%81%94%E9%82%A6%E4%BB%BB%E5%8A%A1%E5%88%86%E9%85%8D%E7%9A%84%E4%B8%AA%E6%80%A7%E5%8C%96%E4%BD%8D%E7%BD%AE%E5%81%8F%E5%A5%BD%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/12/19/%E7%A9%BA%E9%97%B4%E4%BC%97%E5%8C%85%E4%B8%AD%E8%81%94%E9%82%A6%E4%BB%BB%E5%8A%A1%E5%88%86%E9%85%8D%E7%9A%84%E4%B8%AA%E6%80%A7%E5%8C%96%E4%BD%8D%E7%BD%AE%E5%81%8F%E5%A5%BD%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h4 id="文章内容"><a href="#文章内容" class="headerlink" title="文章内容"></a>文章内容</h4><p>文章主要有两部分，首先基于用户历史的任务轨迹和对应的时间节点，进行位置偏好建模和模型训练，得到用户空间偏好，期间通过联邦学习保证隐私；其次基于上一步预测的用户偏好，把当前任务集合推荐给在线的工人，同时实现推荐任务数量的最大化。</p><p>在任务分配期间，文章对与预测到的偏好位置任务目的地距离近的任务分配更大的权重，并基于权重对任务作优先级排序，将任务匹配问题转换为最大权值匹配问题，并构造无向二部图，通过location-aware KM算法实现任务匹配。</p><p>在训练本地模型时，文章随机采样了部分的本地数据，使得训练结果不能准确地表示用户的位置偏好；文章使用中央服务器完成各个本地模型的整合，同时中央服务器负责将训练好的模型分发到各个平台。负责整合、训练、通信的中央服务器有出现单点故障、受攻击的风险，会导致系统的可用性降低，存在安全隐患。同时，文章并没有明确训练本地模型的主体、时间，是自动周期性训练还是需要用户主动参与训练，如果是用户主动训练，是否加入相应的激励机制。</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> 联邦学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日设计模式-桥接模式</title>
      <link href="/2023/11/28/%E6%AF%8F%E6%97%A5%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/11/28/%E6%AF%8F%E6%97%A5%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="设计实现"><a href="#设计实现" class="headerlink" title="设计实现"></a>设计实现</h4><p>桥接模式，通过将一个相关的大类，拆分出抽象和实现两个层次，两个层次相互独立，抽象为通用的接口，各个实现类可根据自己的实际情况，采用不同的技术细节实现通用接口功能。</p><p>比如：在设计一套GUI组件时，需要对不同的操作系统作适配</p><ul><li>传统方式：针对不同的系统，各自设计一套组件；针对红色按钮、蓝色按钮、白色按钮，各自写一套代码去实现。</li><li>桥接模式：针对GUI所要包含的组件，拆分抽象和实现两个层次；设计一套通用接口，不同的操作系统只需要实现接口要求的功能，不同操作系统上的使用者使用相同的代码，即可得到想要的组件。</li></ul><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><p>控制电视机、收音机，需要不同的控制器，且同一种设备的控制器仍然不同，比如a厂家的控制比较高级，功能多，能控制电视机闪烁；b厂家的控制器比较基础，只能控制开关。</p><p><strong>Device</strong>-抽象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcf.demo.pattern.bridge.devices;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Device</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">down</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isOpen</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getChannel</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setChannel</span><span class="params">(<span class="type">int</span> channel)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printStatus</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>RadioDevice-收音机设备</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcf.demo.pattern.bridge.devices;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedioDevice</span> <span class="keyword">implements</span> <span class="title class_">Device</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">open</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.open=<span class="literal">true</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;open the radio&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">down</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;shutdown the radio&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isOpen</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> open;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getChannel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setChannel</span><span class="params">(<span class="type">int</span> channel)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.channel=channel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printStatus</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;radio channel is&quot;</span>+ open);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>TVDevice-电视机设备</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcf.demo.pattern.bridge.devices;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TVDevice</span> <span class="keyword">implements</span> <span class="title class_">Device</span>&#123;</span><br><span class="line">    <span class="type">int</span> channel=<span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> open=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.open=<span class="literal">true</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;open the tv&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">down</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.open=<span class="literal">false</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;close the tv&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isOpen</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> open;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getChannel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> channel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setChannel</span><span class="params">(<span class="type">int</span> channel)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.channel=channel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printStatus</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;the tv status is&quot;</span>+open);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Remote-控制器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcf.demo.pattern.bridge.remotes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">power</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">shudown</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><strong>BasicRemote-基础控制器</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package com.lcf.demo.pattern.bridge.remotes;</span><br><span class="line"></span><br><span class="line">import com.lcf.demo.pattern.bridge.devices.Device;</span><br><span class="line"></span><br><span class="line">public class BaseRemote implements Remote&#123;</span><br><span class="line">    private Device device;</span><br><span class="line"></span><br><span class="line">    public BaseRemote(Device device)&#123;</span><br><span class="line">        this.device=device;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void power() &#123;</span><br><span class="line">        device.open();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void shudown() &#123;</span><br><span class="line">        device.down();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>AdviceRemote-高级控制器</strong></p><p>可在基础控制器基础上，进一步扩展高级功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.lcf.demo.pattern.bridge.remotes;</span><br><span class="line"></span><br><span class="line">import com.lcf.demo.pattern.bridge.devices.Device;</span><br><span class="line"></span><br><span class="line">public class AdvanceRemote extends BaseRemote&#123;</span><br><span class="line">    public AdvanceRemote(Device device) &#123;</span><br><span class="line">        super(device);</span><br><span class="line">    &#125;</span><br><span class="line">    public void play()&#123;</span><br><span class="line">        super.power();</span><br><span class="line">        super.shudown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 桥接模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FedCrowd，区块链联合和隐私保护众包平台 | 基于区块链物联网设备联邦学习系统</title>
      <link href="/2023/11/18/FedCrowd%EF%BC%8C%E5%8C%BA%E5%9D%97%E9%93%BE%E8%81%94%E5%90%88%E5%92%8C%E9%9A%90%E7%A7%81%E4%BF%9D%E6%8A%A4%E4%BC%97%E5%8C%85%E5%B9%B3%E5%8F%B0/"/>
      <url>/2023/11/18/FedCrowd%EF%BC%8C%E5%8C%BA%E5%9D%97%E9%93%BE%E8%81%94%E5%90%88%E5%92%8C%E9%9A%90%E7%A7%81%E4%BF%9D%E6%8A%A4%E4%BC%97%E5%8C%85%E5%B9%B3%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<p>文章提出了一个基于以太坊的，能够将孤立的众包平台任务资源联合起来，并实现准确的任务推荐，且保证共享和推荐过程隐私安全的可信平台。</p><p>当前存在的问题：</p><ul><li>各个众包平台相互独立，无法将计算资源集中，任务推荐的范围具有局限性，任务请求者无法获取到充分且准确的任务资源。</li><li>众包平台采用集中式的部署方式，容易受到单点故障和恶意攻击的影响</li></ul><p>其中，借助区块链去中心化的特性解决第二种问题；关于第一种问题，文章设计了一种任务资源共享流程，并提出了针对该流程的任务匹配协议，采用将代理重加密和双线性配对混合的方式，实现在不共享密钥的情况下，对加密后的任务索引进行匹配。</p><p>该文章设计的任务资源共享流程如下:</p><p>概括来说，是将上传者的任务原文，加密后仍然存放在原有的众包系统中，文章称之为代理人。同时将标识任务类别的标签等信息，由代理人服务器进行重加密，将密文转换为同一个格式的加密任务索引，嵌入到智能合约。工人在查询任务时，将加密关键字发送到代理人服务器，代理人服务器在进行重加密后，利用智能合约中嵌入的索引进行双线性匹配，匹配成功后，将匹配结果记录到区块链中，最后工人可根据查询推荐结果，向对应的代理请求任务。</p><p>文章在平台设计部分，分为两部分介绍，分别是流程设计和原理设计。在原理设计部分，对于流程设计中每个涉及的算法，采用伪代码作了详细的描述。同时对流程中的每个具体操作，附上相关的数学公式。</p><p>基于区块链物联网设备联邦学习系统</p><p>智能家居制造商为了提高市场占有率和用户满意度，需要对用户未来的需求和消费进行预测。而预测需要用户的日常使用数据，</p><p>当前存在的问题：</p><ul><li>对于用户而言，制造商采集用户对智能设备的使用数据时，可能存在恶意过度采集数据，导致用户隐私数据的泄漏。</li><li>对于制造商，客户在提供数据时，有可能会提供虚假数据或者脏数据，对最终的预测结果产生影响</li><li>将所有数据上传到集中式服务器，进行预测模型的统一训练，可能会受到恶意攻击导致数据泄漏，同时存在单点故障的风险</li></ul><p>其中，借助区块链不可篡改、可追溯的特性解决前两种问题，采用联邦学习的方式解决第三种问题，同时针对模型安全和模型过大影响存储效率问题，文章一方面使用差分隐私和批量归一化，来防止对手通过分析用户上传的模型得到原始数据。另一方面，使用ipfs分布式文件存储方式，实现对模型的存储，区块链总只存储模型对应的地址hash即可。</p><p>文章所提出的流程如下：</p><ul><li>首先建立初始模型并上传到区块链，用户在边缘计算设备下载初始模型，并在本地使用本地数据完成模型的训练，将得到的模型上传到区块链，同时上传的，还有自身的签名。其中，在进行本地数据特征提取后，对特征添加噪声处理。</li><li>选择某个组织作为矿工，对用户上传的模型，进行签名验证和模型聚合，矿工确认交易后，可凭借交易记录赢取奖励，根据奖励，确定下一轮该组织被选为矿工的权重。</li><li>最后，从一组矿工中，选择领导者，负责对用户上传的模型聚合和更新全局模型。同时矿工的模型聚合结果主要是对领导者的聚合结果进行验证。</li></ul><p>文章同时采取了激励机制，鼓励更多的用户参与模型的训练：给定初始声望、在用户上传模型，并经过矿工成功验证且评价积极后，声望加一，否则减一</p>]]></content>
      
      
      <categories>
          
          <category> 论文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> 联邦学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习案例-鸢尾花分类</title>
      <link href="/2023/11/05/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A1%88%E4%BE%8B-%E9%B8%A2%E5%B0%BE%E8%8A%B1%E5%88%86%E7%B1%BB/"/>
      <url>/2023/11/05/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A1%88%E4%BE%8B-%E9%B8%A2%E5%B0%BE%E8%8A%B1%E5%88%86%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h4 id="案例简介"><a href="#案例简介" class="headerlink" title="案例简介"></a>案例简介</h4><p>使用<strong>Sklearn-learn</strong>机器学习模块提供的鸢尾花数据集</p><h4 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"></span><br><span class="line"><span class="comment">#将数据分为训练集和测试集，训练鞋用于训练模型，测试集用户评估模型的性能，使用train_test_split（），将random——state设置随机值，可保证每次分的训练集和测试集数据比例一致</span></span><br><span class="line">iris_dataset=load_iris()</span><br><span class="line">X_train,X_test,Y_train,Y_test = train_test_split(iris_dataset[<span class="string">&#x27;data&#x27;</span>],iris_dataset[<span class="string">&#x27;target&#x27;</span>],random_state=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;X_train:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(X_train[:<span class="number">10</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Y_train:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(Y_train[:<span class="number">10</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用k近邻算法训练模型，需要实例化一个算法对象;n_neighbors为传入的k值，1表示只和最近的一个邻居比较；fit（）表示训练模型</span></span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line">knn= KNeighborsClassifier(n_neighbors=<span class="number">1</span>)</span><br><span class="line">knn.fit(X_train,Y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment">#模型构件好后，新构建一个花的数据点，进行预测</span></span><br><span class="line">new_iris=np.array([[<span class="number">5</span>,<span class="number">2.9</span>,<span class="number">1</span>,<span class="number">0.2</span>]])</span><br><span class="line">prediction=knn.predict(new_iris)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;prediction_result:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(prediction))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;prediction_result_tartget_name:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(iris_dataset[<span class="string">&#x27;target_names&#x27;</span>][prediction]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用score（）测试模型的精度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;test_score:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(knn.score(X_test,Y_test)))</span><br></pre></td></tr></table></figure><h4 id="训练结果"><a href="#训练结果" class="headerlink" title="训练结果"></a>训练结果</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">prediction_result:[0]</span><br><span class="line">prediction_result_tartget_name:[&#x27;setosa&#x27;]</span><br></pre></td></tr></table></figure><h4 id="模型精度"><a href="#模型精度" class="headerlink" title="模型精度"></a>模型精度</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test_score:0.9736842105263158</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> K-近邻算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日设计模式-适配器</title>
      <link href="/2023/11/03/%E6%AF%8F%E6%97%A5%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8/"/>
      <url>/2023/11/03/%E6%AF%8F%E6%97%A5%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="设计实现"><a href="#设计实现" class="headerlink" title="设计实现"></a>设计实现</h4><p>适配器模式 往往用在新代码和老代码相互合作上。</p><p>首先以圆孔适配圆钉，圆孔不适配方钉为例，建立圆钉适配器，参数为方钉，从而使得圆孔也能适配方钉；圆钉和圆孔相当于老代码，方钉相当于新代码，适配器可以使得，新代码方钉和老代码圆孔相互合作。</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p><strong>RoundPeg</strong></p><p>包含有参无参构造函数，获取圆钉直径的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoundPeg</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> radis;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRadis</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> radis;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RoundPeg</span><span class="params">(<span class="type">int</span> radis)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.radis = radis;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RoundPeg</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>RoundHole</strong></p><p>包含有参和无参构造函数，获取圆孔直径的方法，以及检查钉子适配圆孔的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoundHole</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> radis;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RoundHole</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RoundHole</span><span class="params">(<span class="type">int</span> radis)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.radis = radis;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRadis</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> radis;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">fits</span><span class="params">(RoundPeg roundPeg)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.radis&gt;=roundPeg.getRadis())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SquarePeg</strong></p><p>包含有参和无参构造函数，获取宽度的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SquarePeg</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> width;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWidth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLength</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SquarePeg</span><span class="params">(<span class="type">int</span> width, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">        <span class="built_in">this</span>.length = length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SquarePegAdapter</strong></p><p>方钉转圆钉适配器，继承圆钉，传参为方钉</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SquarePegAdapter</span> <span class="keyword">extends</span> <span class="title class_">RoundPeg</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> SquarePeg squarePeg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SquarePegAdapter</span><span class="params">(SquarePeg squarePeg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.squarePeg=squarePeg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*方钉到圆孔*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRadis</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) Math.sqrt(Math.pow((squarePeg.getWidth() / <span class="number">2</span>), <span class="number">2</span>) * <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 适配器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日设计模式-原型模式</title>
      <link href="/2023/11/02/%E6%AF%8F%E6%97%A5%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/11/02/%E6%AF%8F%E6%97%A5%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="java中应用"><a href="#java中应用" class="headerlink" title="java中应用"></a>java中应用</h4><p>java中继承cloneable接口，可以实现clone；</p><h4 id="设计实现"><a href="#设计实现" class="headerlink" title="设计实现"></a>设计实现</h4><p>继承同一个父类，父类拥有公共的参数，父类定义抽象方法 clone（）子类实现自己的有参、无参构造方法，有参构造方法，有参构造方法传入克隆的目标对象，一方面使用super构造父类，一方面对自己特有的参数赋值，最终clone（），返回new 构造方法（this）</p><p><strong>父类-shape</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcf.demo.pattern.prototype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Shape</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Shape</span><span class="params">(Shape target)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.x=target.x;</span><br><span class="line">            <span class="built_in">this</span>.y=target.y;</span><br><span class="line">            <span class="built_in">this</span>.color=target.color;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span>  Shape <span class="title function_">clone</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>子类-Cycle</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcf.demo.pattern.prototype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cycle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> radis;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cycle</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Shape <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Cycle</span>(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cycle</span><span class="params">(Cycle target)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(target);</span><br><span class="line">        <span class="keyword">if</span>(target!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.radis=target.radis;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>子类-Retangle</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcf.demo.pattern.prototype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Retangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> width;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Retangle</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Retangle</span><span class="params">(Retangle retangle)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(retangle);</span><br><span class="line">        <span class="built_in">this</span>.width=retangle.width;</span><br><span class="line">        <span class="built_in">this</span>.height=retangle.height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Shape <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Retangle</span>(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>应用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lcf.demo.pattern.prototype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Shape&gt; shapeList=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Shape&gt; shapeCopy =<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Cycle cycle=<span class="keyword">new</span> <span class="title class_">Cycle</span>();</span><br><span class="line">        cycle.x=<span class="number">1</span>;</span><br><span class="line">        cycle.y=<span class="number">2</span>;</span><br><span class="line">        cycle.color=<span class="string">&quot;red&quot;</span>;</span><br><span class="line">        cycle.radis=<span class="number">0</span>;</span><br><span class="line">        shapeList.add(cycle);</span><br><span class="line"></span><br><span class="line">        Retangle retangle=<span class="keyword">new</span> <span class="title class_">Retangle</span>();</span><br><span class="line">        retangle.height=<span class="number">1</span>;</span><br><span class="line">        retangle.width=<span class="number">2</span>;</span><br><span class="line">        shapeList.add(retangle);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Shape shape:shapeList)&#123;</span><br><span class="line">            shapeCopy.add(shape.clone());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;shapeList.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(shapeList.get(i)!=shapeCopy.get(i))&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;两个对象不同&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一次云服务器部署环境搭建</title>
      <link href="/2023/08/29/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/08/29/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="记录一次云服务器部署环境搭建"><a href="#记录一次云服务器部署环境搭建" class="headerlink" title="记录一次云服务器部署环境搭建"></a>记录一次云服务器部署环境搭建</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p><strong>将sprinboot项目、vue项目部署到云服务器</strong></p><p>技术栈：<code>springBoot sprinbSecurity mybatis-plus vue gradle docker nginx  git node jdk</code></p><p>操作系统：<code>Ubuntu 22.04 </code></p><p>ssh工具：<code>Tabby</code></p><h3 id="安装必要软件"><a href="#安装必要软件" class="headerlink" title="安装必要软件"></a>安装必要软件</h3><h4 id="Node和npm"><a href="#Node和npm" class="headerlink" title="Node和npm"></a>Node和npm</h4><h5 id="从-Ubuntu-软件源安装-Node-js-和-npm"><a href="#从-Ubuntu-软件源安装-Node-js-和-npm" class="headerlink" title="从 Ubuntu 软件源安装 Node.js 和 npm"></a>从 Ubuntu 软件源安装 Node.js 和 npm</h5><p>在写作的时候，包含在 Ubuntu 20.04 软件源中的 Node.js 版本是<code>12.22.9</code>，这是一个长期版本。</p><p>安装非常直接。运行下面的命令更新软件包索引，并且安装 Node.js 和 npm:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install nodejs npm</span><br></pre></td></tr></table></figure><p>上面的命令将会安装一系列包，包括编译和安装从 npm 来的本地扩展。</p><p>一旦完成，运行下面的命令，验证安装过程：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@hecs-296785:~# node -v</span><br><span class="line">v12.22.9</span><br></pre></td></tr></table></figure><h4 id="jdk"><a href="#jdk" class="headerlink" title="jdk"></a>jdk</h4><p><strong>1）：官方下载对应的.gz包，这里以jdk-8u181-linux-x64.tar.gz为例</strong></p><p><strong>2）：创建一个目录用于存放解压后的文件，并解压缩到该目录下</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /usr/lib/jvm</span><br><span class="line">sudo tar -zxvf jdk-8u181-linux-x64.tar.gz -C /usr/lib/jvm</span><br></pre></td></tr></table></figure><p><strong>3）：修改环境变量</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim ~/.bashrc</span><br></pre></td></tr></table></figure><p><strong>4）：文件末尾追加如下内容</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#set oracle jdk environment</span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_181  ## 这里要注意目录要换成自己解压的jdk 目录</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre  </span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib  </span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH  </span><br></pre></td></tr></table></figure><p><strong>5）：使环境变量生效</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p><strong>8）：测试是否安装成功</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><h4 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h4><p>Nginx 在默认的 Ubuntu 源仓库中可用。想要安装它，运行下面的命令：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure><p>一旦安装完成，Nginx 将会自动被启动。你可以运行下面的命令来验证它：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status nginx</span><br></pre></td></tr></table></figure><h5 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h5><p>现在你已经在你的服务器上安装和运行了 Nginx，你需要确保你的防火墙被配置好，允许流量通过 HTTP（<code>80</code>）和 HTTPS（<code>443</code>）端口。假设你正在使用<code>UFW</code>,你可以做的是启用 ‘Nginx Full’ profile，它包含了这两个端口：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow &#x27;Nginx Full&#x27;</span><br></pre></td></tr></table></figure><p>想要验证状态，输入：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure><h5 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h5><p>想要测试你的新 Nginx 安装，在你的浏览器中打开<code>http://YOUR_IP</code>，你应该可以看到默认的 Nginx 加载页面，</p><h6 id="Nginx-配置文件结构以及最佳实践"><a href="#Nginx-配置文件结构以及最佳实践" class="headerlink" title="Nginx 配置文件结构以及最佳实践"></a>Nginx 配置文件结构以及最佳实践</h6><ul><li>所有的 Nginx 配置文件都在<code>/etc/nginx/</code>目录下。</li><li>主要的 Nginx 配置文件是<code>/etc/nginx/nginx.conf</code>。</li><li>为每个域名创建一个独立的配置文件，便于维护服务器。你可以按照需要定义任意多的 block 文件。</li><li>Nginx 服务器配置文件被储存在<code>/etc/nginx/sites-available</code>目录下。在<code>/etc/nginx/sites-enabled</code>目录下的配置文件都将被 Nginx 使用。</li><li>最佳推荐是使用标准的命名方式。例如，如果你的域名是<code>mydomain.com</code>，那么配置文件应该被命名为<code>/etc/nginx/sites-available/mydomain.com.conf</code></li><li>如果你在域名服务器配置块中有可重用的配置段，把这些配置段摘出来，做成一小段可重用的配置。</li><li>Nginx 日志文件(access.log 和 error.log)定位在<code>/var/log/nginx/</code>目录下。推荐为每个服务器配置块，配置一个不同的<code>access</code>和<code>error</code>。</li><li>你可以将你的网站根目录设置在任何你想要的地方。最常用的网站根目录位置包括：</li><li><ul><li><code>/home/&lt;user_name&gt;/&lt;site_name&gt;</code></li><li><code>/var/www/&lt;site_name&gt;</code></li><li><code>/var/www/html/&lt;site_name&gt;</code></li><li><code>/opt/&lt;site_name&gt;</code></li></ul></li></ul><h4 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h4><h5 id="下载gradle"><a href="#下载gradle" class="headerlink" title="下载gradle"></a>下载gradle</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://downloads.gradle.org/distributions/gradle-7.6.1-bin.zip /tmp</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo unzip -d /opt/gradle /tmp/gradle-7.6.1-bin.zip</span><br></pre></td></tr></table></figure><h5 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h5><p>需要配置PATH环境变量以包含Gradle bin目录。使用你喜欢的文本编辑器，然后在<code>/etc/profile.d</code>目录中创建一个名为<code>gradle.sh</code>的新文件，使用vim创建文件&#x2F;etc&#x2F;profile.d&#x2F;gradle.sh，粘贴以下内容gradle.sh文件中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile.d/gradle.sh</span><br><span class="line"></span><br><span class="line">//添加</span><br><span class="line"><span class="built_in">export</span> GRADLE_HOME=/opt/gradle/gradle-7.5.1</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;GRADLE_HOME&#125;</span>/bin:<span class="variable">$&#123;PATH&#125;</span></span><br><span class="line"></span><br><span class="line">sudo <span class="built_in">chmod</span> +x /etc/profile.d/gradle.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile.d/gradle.sh</span><br><span class="line"></span><br><span class="line">gradle -v</span><br></pre></td></tr></table></figure><h3 id="打包-部署后端项目"><a href="#打包-部署后端项目" class="headerlink" title="打包&amp;部署后端项目"></a>打包&amp;部署后端项目</h3><h4 id="gradle配置文件"><a href="#gradle配置文件" class="headerlink" title="gradle配置文件"></a>gradle配置文件</h4><p><strong>gradle 中的sourceCompatibility 与 targetCompatibility 的区别</strong></p><p>sourceCompatibility:指定编译编译.java文件的jdk版本；targetCompatibility：确保class文件与targetCompatibility指定版本，或者更新的java虚拟机兼容，</p><p>有这么几个原则，是不能违背的，总结起来就是这样</p><p>代码用的语言特性对应的JavaVersion<br>≦ sourceCompatibility<br>≦ targetCompatibility<br>≦ Gradle使用的JavaVersion<br>≦ 客户端环境的JavaVersion</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id &#x27;org.springframework.boot&#x27; version &#x27;2.6.11&#x27;</span><br><span class="line">    id &#x27;io.spring.dependency-management&#x27; version &#x27;1.0.13.RELEASE&#x27;</span><br><span class="line">    id &#x27;java&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group = &#x27;com.lcf&#x27;</span><br><span class="line">//version = &#x27;0.0.1-SNAPSHOT&#x27;</span><br><span class="line">sourceCompatibility = &quot;17&quot;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bootJar &#123;</span><br><span class="line">    archivesBaseName = &#x27;blue-server&#x27; // jar包名</span><br><span class="line">    manifest &#123;</span><br><span class="line">        attributes &quot;Manifest-Version&quot;: 1.0,</span><br><span class="line">                &#x27;Start-Class&#x27;: &#x27;com.lcf.BlueApplication&#x27; //  springboot项目的启动类</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation &#x27;org.springframework.boot:spring-boot-starter&#x27;</span><br><span class="line"></span><br><span class="line">    implementation group: &#x27;org.springframework.boot&#x27;, name: &#x27;spring-boot-starter-web&#x27;, version: &#x27;2.7.5&#x27;</span><br><span class="line">    testImplementation &#x27;org.springframework.boot:spring-boot-starter-test&#x27;</span><br><span class="line">    implementation group: &#x27;mysql&#x27;, name: &#x27;mysql-connector-java&#x27;, version: &#x27;8.0.21&#x27;</span><br><span class="line">    implementation group: &#x27;com.baomidou&#x27;, name: &#x27;mybatis-plus-boot-starter&#x27;, version: &#x27;3.5.2&#x27;</span><br><span class="line">    implementation group: &#x27;org.springframework.boot&#x27;, name: &#x27;spring-boot-starter-security&#x27;, version: &#x27;2.7.3&#x27;</span><br><span class="line">    implementation group: &#x27;com.baomidou&#x27;, name: &#x27;mybatis-plus-generator&#x27;, version: &#x27;3.3.0&#x27;</span><br><span class="line"></span><br><span class="line">    implementation group: &#x27;org.apache.velocity&#x27;, name: &#x27;velocity-engine-core&#x27;, version: &#x27;2.3&#x27;</span><br><span class="line"></span><br><span class="line">    compileOnly group: &#x27;org.projectlombok&#x27;, name: &#x27;lombok&#x27;, version: &#x27;1.18.24&#x27;</span><br><span class="line"></span><br><span class="line">    implementation group: &#x27;io.jsonwebtoken&#x27;, name: &#x27;jjwt-api&#x27;, version: &#x27;0.10.5&#x27;</span><br><span class="line"></span><br><span class="line">    implementation group: &#x27;io.jsonwebtoken&#x27;, name: &#x27;jjwt&#x27;, version: &#x27;0.9.1&#x27;</span><br><span class="line"></span><br><span class="line">    implementation group: &#x27;com.auth0&#x27;, name: &#x27;java-jwt&#x27;, version: &#x27;3.19.2&#x27;</span><br><span class="line"></span><br><span class="line">    // https://mvnrepository.com/artifact/com.alibaba.fastjson2/fastjson2</span><br><span class="line">    implementation group: &#x27;com.alibaba.fastjson2&#x27;, name: &#x27;fastjson2&#x27;, version: &#x27;2.0.20&#x27;</span><br><span class="line"></span><br><span class="line">    // https://mvnrepository.com/artifact/javax.xml.bind/jaxb-api</span><br><span class="line">    implementation group: &#x27;javax.xml.bind&#x27;, name: &#x27;jaxb-api&#x27;, version: &#x27;2.3.1&#x27;</span><br><span class="line"></span><br><span class="line">    implementation &#x27;org.hyperledger.fabric:fabric-gateway:1.2.2&#x27;</span><br><span class="line">    compileOnly &#x27;io.grpc:grpc-api:1.54.1&#x27;</span><br><span class="line">    runtimeOnly &#x27;io.grpc:grpc-netty-shaded:1.54.1&#x27;</span><br><span class="line">    implementation &#x27;com.google.code.gson:gson:2.10.1&#x27;</span><br><span class="line"></span><br><span class="line">    // https://mvnrepository.com/artifact/cn.hutool/hutool-all</span><br><span class="line">    implementation &#x27;cn.hutool:hutool-all:5.8.21&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test &#123;</span><br><span class="line">    useJUnitPlatform()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="定制dockerfile镜像"><a href="#定制dockerfile镜像" class="headerlink" title="定制dockerfile镜像"></a>定制dockerfile镜像</h4><p>docker镜像学习文档<code>https://docker-practice.github.io/zh-cn/image/</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM openjdk:8</span><br><span class="line">MAINTAINER lcf</span><br><span class="line">ADD blue-server.jar blue-server.jar</span><br><span class="line">EXPOSE 8080</span><br><span class="line">ENTRYPOINT [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;blue-server.jar&quot;</span>]</span><br></pre></td></tr></table></figure><h4 id="定制项目部署脚本"><a href="#定制项目部署脚本" class="headerlink" title="定制项目部署脚本"></a>定制项目部署脚本</h4><h5 id="后端项目部署之前要做的："><a href="#后端项目部署之前要做的：" class="headerlink" title="后端项目部署之前要做的："></a>后端项目部署之前要做的：</h5><ul><li>更新仓库代码</li><li>打包最新代码</li><li>重新构建docker镜像</li><li>删除先前的docker容器</li><li>重新构建docker容器</li><li>创建最新的docker容器</li><li>输出执行成功提示信息</li></ul><p>bash脚本内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">cd blue-server</span><br><span class="line">gradle bootJar</span><br><span class="line">cd build/libs</span><br><span class="line">docker build -t blue-server .</span><br><span class="line">docker stop blue-server</span><br><span class="line">docker rm blue-server</span><br><span class="line">docker run -d --restart=always --name blue-server -p 8080:8080  blue-server</span><br><span class="line">echo &#x27;sucessful----------------------------------------------------------------------------------------------------------------------------------&#x27;</span><br></pre></td></tr></table></figure><h5 id="前端项目部署需要做的"><a href="#前端项目部署需要做的" class="headerlink" title="前端项目部署需要做的"></a>前端项目部署需要做的</h5><ul><li>更新仓库代码</li><li>打包最新的代码文件</li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> gradle </tag>
            
            <tag> docker </tag>
            
            <tag> nginx </tag>
            
            <tag> ubuntu </tag>
            
            <tag> vue </tag>
            
            <tag> git </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决docker与服务器时间不一致问题</title>
      <link href="/2023/08/22/%E8%A7%A3%E5%86%B3docker%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%B6%E9%97%B4%E4%B8%8D%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98/"/>
      <url>/2023/08/22/%E8%A7%A3%E5%86%B3docker%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%B6%E9%97%B4%E4%B8%8D%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>部署在docker上的web程序，获取当前时间时，与服务器时间相差四个多小时</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ul><li><p>在dockfile中加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加时区环境变量，亚洲，上海</span></span><br><span class="line">ENV TimeZone=Asia/Shanghai</span><br><span class="line"><span class="comment"># 使用软连接，并且将时区配置覆盖/etc/timezone</span></span><br><span class="line">RUN <span class="built_in">ln</span> -snf /usr/share/zoneinfo/<span class="variable">$TimeZone</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TimeZone</span> &gt; /etc/timezone</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改后的dockerfile文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM openjdk:8</span><br><span class="line">MAINTAINER lcf</span><br><span class="line"><span class="comment"># 添加时区环境变量，亚洲，上海</span></span><br><span class="line">ENV TimeZone=Asia/Shanghai</span><br><span class="line"><span class="comment"># 使用软连接，并且将时区配置覆盖/etc/timezone</span></span><br><span class="line">RUN <span class="built_in">ln</span> -snf /usr/share/zoneinfo/<span class="variable">$TimeZone</span> /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TimeZone</span> &gt; /etc/timezone</span><br><span class="line">ADD boss-server.jar boss-server.jar</span><br><span class="line">EXPOSE 8080</span><br><span class="line">ENTRYPOINT [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;boss-server.jar&quot;</span>]</span><br></pre></td></tr></table></figure></li></ul><h4 id="其他解决方法"><a href="#其他解决方法" class="headerlink" title="其他解决方法"></a>其他解决方法</h4><ul><li><p>dockerfile中添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># CentOS</span><br><span class="line">RUN echo &quot;Asia/shanghai&quot; &gt; /etc/timezone</span><br><span class="line"># Ubuntu</span><br><span class="line">RUN cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure></li><li><p>docker run 添加时间参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 实例1</span><br><span class="line">docker run -p 3306:3306 --name mysql -v /etc/localtime:/etc/localtime</span><br></pre></td></tr></table></figure></li><li><p>宿主机直接执行命令给某个容器同步时间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 方法1：直接在宿主机操作</span><br><span class="line">docker cp /etc/localtime 【容器ID或者NAME】:/etc/localtime</span><br><span class="line">docker cp -L /usr/share/zoneinfo/Asia/Shanghai 【容器ID或者NAME】:/etc/localtime</span><br><span class="line"> </span><br><span class="line"># 方法2：登录容器同步时区timezone</span><br><span class="line">ln -sf /usr/share/zoneinfo/Asia/Singapore /etc/localtime</span><br></pre></td></tr></table></figure></li></ul><p>完成后，再通过date命令进行查看当前时间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select now() from dual;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot+gradle+docker+nginx项目部署到ubuntu云服务器.md</title>
      <link href="/2023/08/22/springboot+gradle+docker+nginx%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0ubuntu%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2023/08/22/springboot+gradle+docker+nginx%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0ubuntu%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="安装gradle"><a href="#安装gradle" class="headerlink" title="安装gradle"></a>安装gradle</h4><ul><li><p>下载，解压到指定目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="comment">//downloads.gradle-dn.com/distributions/gradle-7.4-bin.zip</span></span><br><span class="line"> unzip -d /opt/gradle gradle-<span class="number">7.4</span>-bin.zip</span><br><span class="line"> #查看是否解压成功</span><br><span class="line"> ls /opt/gradle/gradle-<span class="number">7.6</span></span><br></pre></td></tr></table></figure></li><li><p>配置环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile.d/gradle.sh</span><br><span class="line">sudo chmod +x /etc/profile.d/gradle.sh</span><br><span class="line">source /etc/profile.d/gradle.sh</span><br></pre></td></tr></table></figure><p>gradle.sh文件内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export GRADLE_HOME=/opt/gradle/gradle-7.4</span><br><span class="line">export PATH=$&#123;GRADLE_HOME&#125;/bin:$&#123;PATH&#125;</span><br></pre></td></tr></table></figure></li><li><p>验证安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle -v</span><br></pre></td></tr></table></figure></li></ul><h4 id="构建jar包"><a href="#构建jar包" class="headerlink" title="构建jar包"></a>构建jar包</h4><ul><li><p>配置文件-build.gradle 文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;org.springframework.boot&#x27;</span> version <span class="string">&#x27;2.6.11&#x27;</span></span><br><span class="line">    id <span class="string">&#x27;io.spring.dependency-management&#x27;</span> version <span class="string">&#x27;1.0.13.RELEASE&#x27;</span></span><br><span class="line">    id <span class="string">&#x27;java&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jar &#123;</span><br><span class="line">    enabled = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bootJar &#123;</span><br><span class="line"></span><br><span class="line">    archivesBaseName = <span class="string">&#x27;boss-server&#x27;</span> <span class="comment">// jar包名</span></span><br><span class="line">    manifest &#123;</span><br><span class="line">        attributes <span class="string">&quot;Manifest-Version&quot;</span>: <span class="number">1.0</span>,</span><br><span class="line">                <span class="string">&#x27;Start-Class&#x27;</span>: <span class="string">&#x27;com.lcf.BlueApplication&#x27;</span> <span class="comment">//  springboot项目的启动类</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group = <span class="string">&#x27;com.boss&#x27;</span></span><br><span class="line"><span class="comment">//version = &#x27;1.0.0&#x27;</span></span><br><span class="line">sourceCompatibility = <span class="string">&#x27;1.8&#x27;</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter&#x27;</span></span><br><span class="line"></span><br><span class="line">    implementation group: <span class="string">&#x27;org.springframework.boot&#x27;</span>, name: <span class="string">&#x27;spring-boot-starter-web&#x27;</span>, version: <span class="string">&#x27;2.7.5&#x27;</span></span><br><span class="line">    testImplementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-test&#x27;</span></span><br><span class="line">    implementation group: <span class="string">&#x27;mysql&#x27;</span>, name: <span class="string">&#x27;mysql-connector-java&#x27;</span>, version: <span class="string">&#x27;8.0.21&#x27;</span></span><br><span class="line">    implementation group: <span class="string">&#x27;com.baomidou&#x27;</span>, name: <span class="string">&#x27;mybatis-plus-boot-starter&#x27;</span>, version: <span class="string">&#x27;3.5.2&#x27;</span></span><br><span class="line">    implementation group: <span class="string">&#x27;org.springframework.boot&#x27;</span>, name: <span class="string">&#x27;spring-boot-starter-security&#x27;</span>, version: <span class="string">&#x27;2.7.3&#x27;</span></span><br><span class="line">    implementation group: <span class="string">&#x27;com.baomidou&#x27;</span>, name: <span class="string">&#x27;mybatis-plus-generator&#x27;</span>, version: <span class="string">&#x27;3.3.0&#x27;</span></span><br><span class="line"></span><br><span class="line">    implementation group: <span class="string">&#x27;org.apache.velocity&#x27;</span>, name: <span class="string">&#x27;velocity-engine-core&#x27;</span>, version: <span class="string">&#x27;2.3&#x27;</span></span><br><span class="line"></span><br><span class="line">    compileOnly group: <span class="string">&#x27;org.projectlombok&#x27;</span>, name: <span class="string">&#x27;lombok&#x27;</span>, version: <span class="string">&#x27;1.18.24&#x27;</span></span><br><span class="line">    annotationProcessor <span class="string">&#x27;org.projectlombok:lombok:1.18.24&#x27;</span></span><br><span class="line"></span><br><span class="line">    implementation group: <span class="string">&#x27;io.jsonwebtoken&#x27;</span>, name: <span class="string">&#x27;jjwt-api&#x27;</span>, version: <span class="string">&#x27;0.10.5&#x27;</span></span><br><span class="line"></span><br><span class="line">    implementation group: <span class="string">&#x27;io.jsonwebtoken&#x27;</span>, name: <span class="string">&#x27;jjwt&#x27;</span>, version: <span class="string">&#x27;0.9.1&#x27;</span></span><br><span class="line"></span><br><span class="line">    implementation group: <span class="string">&#x27;com.auth0&#x27;</span>, name: <span class="string">&#x27;java-jwt&#x27;</span>, version: <span class="string">&#x27;3.19.2&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// https://mvnrepository.com/artifact/com.alibaba.fastjson2/fastjson2</span></span><br><span class="line">    implementation group: <span class="string">&#x27;com.alibaba.fastjson2&#x27;</span>, name: <span class="string">&#x27;fastjson2&#x27;</span>, version: <span class="string">&#x27;2.0.20&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// https://mvnrepository.com/artifact/javax.xml.bind/jaxb-api</span></span><br><span class="line">    implementation group: <span class="string">&#x27;javax.xml.bind&#x27;</span>, name: <span class="string">&#x27;jaxb-api&#x27;</span>, version: <span class="string">&#x27;2.3.1&#x27;</span></span><br><span class="line"></span><br><span class="line">    implementation <span class="string">&#x27;cn.hutool:hu</span></span><br><span class="line"><span class="string">    tool-all:5.8.11&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test &#123;</span><br><span class="line">    useJUnitPlatform()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>jar包构建命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle bootJar</span><br></pre></td></tr></table></figure></li></ul><h4 id="构建容器镜像"><a href="#构建容器镜像" class="headerlink" title="构建容器镜像"></a>构建容器镜像</h4><ul><li><p>创建Dockerfile 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi Dockerfile</span><br></pre></td></tr></table></figure></li><li><p>修改 Dockerfile 文件并保存，将jar包复制到当前目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 拉取一个jdk为<span class="number">1.8</span>的docker镜像</span><br><span class="line">FROM java:<span class="number">8</span></span><br><span class="line"># 声明作者是lcf</span><br><span class="line">MAINTAINER lcf</span><br><span class="line"># 前一个 ROOT.jar 为上传的jar包，后一个 ROOT.jar 是将服务器中jar包对应在容器中运行的jar包名称</span><br><span class="line">ADD ROOT.jar ROOT.jar</span><br><span class="line"># 容器暴露的端口号，需要与jar包在容器中运行使用端口号一致</span><br><span class="line">EXPOSE <span class="number">8080</span></span><br><span class="line"># 容器启动之后执行的命令， java -jar ROOT.jar</span><br><span class="line">ENTRYPOINT [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;ROOT.jar&quot;</span>]</span><br></pre></td></tr></table></figure></li><li><p>执行命令，构建镜像, . 表示Dockerfile在当前目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t boss-server .</span><br></pre></td></tr></table></figure></li><li><p>构建容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># --restart=always 表示docker容器在停止或服务器开机之后会自动重新启动</span><br><span class="line">docker run -d --restart=always --name demo -p 8080:8080 -v /docker/logs/test:/logs boss-server</span><br></pre></td></tr></table></figure></li><li><p>验证是否成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure></li></ul><h4 id="nginx-配置反向代理"><a href="#nginx-配置反向代理" class="headerlink" title="nginx 配置反向代理"></a>nginx 配置反向代理</h4><p>问题：转发后多了一个反斜杠</p><p>解决：使用正则替换前缀</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location /pager-server &#123;</span><br><span class="line">                rewrite  ^/pager-server/?(.*)$ /$1 break;</span><br><span class="line">                proxy_pass http://localhost:8080/ ;</span><br><span class="line">                proxy_redirect default;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> gradle </tag>
            
            <tag> docker </tag>
            
            <tag> nginx </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Vanta.js实现动态背景</title>
      <link href="/2023/08/22/%E4%BD%BF%E7%94%A8Vanta-js%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E8%83%8C%E6%99%AF/"/>
      <url>/2023/08/22/%E4%BD%BF%E7%94%A8Vanta-js%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E8%83%8C%E6%99%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>anta.js可以为网站设置炫酷的动态背景 比如在网站登陆的首页，可以与普通JS、React、Angular、Vue等一起使用</p><p>官网 <a href="https://link.juejin.cn/?target=https://www.vantajs.com/">Vanta.js - Animated 3D Backgrounds For Your Website</a></p><h3 id="安装three-js-依赖和Vanta-JS-依赖"><a href="#安装three-js-依赖和Vanta-JS-依赖" class="headerlink" title="安装three.js 依赖和Vanta JS 依赖"></a>安装three.js 依赖和Vanta JS 依赖</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i three</span><br><span class="line">npm i vanta</span><br></pre></td></tr></table></figure><h3 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码"></a>整体代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;div ref=<span class="string">&quot;vantaRef&quot;</span> id=<span class="string">&quot;vantaRef&quot;</span> style=<span class="string">&quot;width:100%;height:100vh&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="variable constant_">THREE</span> <span class="keyword">from</span> <span class="string">&#x27;three&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">NET</span> <span class="keyword">from</span> <span class="string">&#x27;vanta/src/vanta.net&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vantaEffect</span> = <span class="title function_">NET</span>(&#123;</span><br><span class="line">      <span class="attr">el</span>: <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">vantaRef</span>,</span><br><span class="line">      <span class="attr">THREE</span>: <span class="variable constant_">THREE</span>,</span><br><span class="line">      <span class="attr">mouseControls</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">touchControls</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">gyroControls</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">minHeight</span>: <span class="number">200.00</span>,</span><br><span class="line">      <span class="attr">minWidth</span>: <span class="number">200.00</span>,</span><br><span class="line">      <span class="attr">scale</span>: <span class="number">1.00</span>,</span><br><span class="line">      <span class="attr">scaleMobile</span>: <span class="number">1.00</span>,</span><br><span class="line">      <span class="attr">color</span>: <span class="number">0x3ffffb</span>,</span><br><span class="line">      <span class="attr">points</span>: <span class="number">15.00</span>,</span><br><span class="line">      <span class="attr">maxDistance</span>: <span class="number">23.00</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">vantaEffect</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">vantaEffect</span>.<span class="title function_">destroy</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  </span><br></pre></td></tr></table></figure><p><img src="https://img1.imgtp.com/2023/08/22/KK3T5NgX.png" alt="image-20230822192625372"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vanta </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vanta </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将智能合约部署到通道</title>
      <link href="/2023/08/22/%E5%B0%86%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E9%83%A8%E7%BD%B2%E5%88%B0%E9%80%9A%E9%81%93/"/>
      <url>/2023/08/22/%E5%B0%86%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E9%83%A8%E7%BD%B2%E5%88%B0%E9%80%9A%E9%81%93/</url>
      
        <content type="html"><![CDATA[<h4 id="启动测试网络"><a href="#启动测试网络" class="headerlink" title="启动测试网络"></a>启动测试网络</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd fabric-samples/test-network</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./network.sh down</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">创建一个默认通道mychannel、两个通道成员Org1 和 Org2，将属于每个组织的peer加入通道</span><br><span class="line">./network.sh up createChannel </span><br><span class="line">如果网络和通道创建成功，您可以在日志中看到以下消息</span><br><span class="line">========= Channel successfully joined ===========</span><br></pre></td></tr></table></figure><h4 id="第一步：打包链码（以go语言编写的智能合约为例）"><a href="#第一步：打包链码（以go语言编写的智能合约为例）" class="headerlink" title="第一步：打包链码（以go语言编写的智能合约为例）"></a>第一步：打包链码（以go语言编写的智能合约为例）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> fabric-samples/asset-transfer-basic/chaincode-java-user</span><br><span class="line"></span><br><span class="line">java-安装依赖</span><br><span class="line">bash gradlew installDist</span><br><span class="line"></span><br><span class="line">使用peerCLI 构建链代码包，以下命令将这些二进制文件添加到您的 CLI 路径</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PWD&#125;</span>/../bin:<span class="variable">$PATH</span></span><br><span class="line">设置FABRIC_CFG_PATH指向存储库中的core.yaml文件fabric-samples</span><br><span class="line"><span class="built_in">export</span> FABRIC_CFG_PATH=<span class="variable">$PWD</span>/../config/</span><br><span class="line">检查是否能够使用peer cli</span><br><span class="line">peer version</span><br><span class="line">打包</span><br><span class="line">peer lifecycle chaincode package user.tar.gz --path ../asset-transfer-basic/chaincode-java-user/ --lang java --label user_1.0</span><br><span class="line"><span class="comment"># basic.tar.gz ：包名称</span></span><br><span class="line"><span class="comment"># --lang ： 指定链代码语言；--path ： 智能合约代码的位置； </span></span><br><span class="line"><span class="comment"># --label ：该标签将在安装后识别您的链代码。建议您的标签包含链码名称和版本。</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打包java链码-安装依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h4 id="安装链码包"><a href="#安装链码包" class="headerlink" title="安装链码包"></a>安装链码包</h4><p>链代码需要安装在每个将认可交易的节点上，因为我们要将背书策略设置为需要来自 Org1 和 Org2 的背书，所以我们需要在两个组织运营的对等节点上安装链代码：</p><h5 id="先在-Org1-节点上安装链码"><a href="#先在-Org1-节点上安装链码" class="headerlink" title="先在 Org1 节点上安装链码"></a>先在 Org1 节点上安装链码</h5><ol><li><p>设置org1环境变量</p><p>以<code>peer</code>作为 Org1 管理员用户操作 CLI。将<code>CORE_PEER_ADDRESS</code>被设置为指向 Org1 对等体，<code>peer0.org1.example.com</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_LOCALMSPID=&quot;Org1MSP&quot;</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:7051</span><br></pre></td></tr></table></figure></li><li><p>在org1对等节点上安装链代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install user.tar.gz</span><br><span class="line">如果命令成功，对等方将生成并返回包标识符。此包 ID 将用于在下一步中批准链代码。您应该看到类似于以下内容的输出：</span><br><span class="line"></span><br><span class="line">2020-07-16 10:09:57.534 CDT [cli.lifecycle.chaincode] submitInstallProposal -&gt; INFO 001 Installed remotely: response:&lt;status:200 payload:<span class="string">&quot;\nJbasic_1.0:e2db7f693d4aa6156e652741d5606e9c5f0de9ebb88c5721cb8248c3aead8123\022\tbasic_1.0&quot;</span> &gt;</span><br><span class="line">2020-07-16 10:09:57.534 CDT [cli.lifecycle.chaincode] submitInstallProposal -&gt; INFO 002 Chaincode code pack</span><br></pre></td></tr></table></figure></li><li><p>设置org2环境变量</p><p>设置以下环境变量以作为 Org2 管理员运行并以 Org2 对等体为目标，<code>peer0.org2.example.com</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_LOCALMSPID=&quot;Org2MSP&quot;</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:9051</span><br></pre></td></tr></table></figure></li><li><p>在org2对等节点上安装链代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode install user.tar.gz</span><br></pre></td></tr></table></figure></li></ol><h4 id="批准链码定义"><a href="#批准链码定义" class="headerlink" title="批准链码定义"></a>批准链码定义</h4><p>安装链代码包后，需要为您的组织批准链代码定义，该定义包括链代码治理的重要参数，例如名称、版本和链代码背书策略。部署之前需要批准链代码的一组通道成员由该<code>/Channel/Application/LifecycleEndorsement</code>策略管理，默认情况下，此策略要求大多数通道成员需要批准链代码才能在通道上使用它，</p><p>因为我们在通道上只有两个组织，并且 2 的多数是 2，所以我们需要 Org1 和 Org2，批准资产转移（基本）的链代码定义</p><p>如果一个组织已经在他们的peer上安装了链代码，需要在他们的组织批准的链代码定义中包含 packageID</p><ol><li><p>查询链代码id</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode queryinstalled</span><br><span class="line">包 ID 是链代码标签和链代码二进制文件的哈希值的组合。每个对等点都将生成相同的包 ID。您应该看到类似于以下内容的输出：</span><br><span class="line">Installed chaincodes on peer:</span><br><span class="line">Package ID: basic_1.0:69de748301770f6ef64b42aa6bb6cb291df20aa39542c3ef94008615704007f3, Label: basic_1.0</span><br></pre></td></tr></table></figure></li><li><p>将包id保存为环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC_PACKAGE_ID= user_1.0:4a68ea4328545789c8da1c16ddda59f8485057609de457526dff74e4199faa3c</span><br></pre></td></tr></table></figure></li><li><p>org2批准链代码</p><p>由于环境变量已设置为<code>peer</code>以 Org2 管理员身份运行 CLI</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --channelID mychannel --name user --version 1.0 --package-id $CC_PACKAGE_ID --sequence 1 --tls --cafile &quot;$&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem&quot;</span><br></pre></td></tr></table></figure><p>上面的命令使用<code>--package-id</code>标志将包标识符包含在链码定义中。该<code>--sequence</code>参数是一个整数，用于跟踪定义或更新链代码的次数。因为链码是第一次部署到通道，所以序列号是 1。当升级资产转移（基本）链码时，序列号将增加到 2。如果您使用提供的低级 API通过 Fabric Chaincode Shim API，您可以将<code>--init-required</code>标志传递给上面的命令以请求执行 Init 函数来初始化链码。链码的第一次调用需要以 Init 函数为目标并包含<code>--isInit</code>标志，然后您才能使用链码中的其他函数与账本进行交互。</p></li><li><p>org1批准链代码</p><p>设置环境变量作为org1运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_LOCALMSPID=&quot;Org1MSP&quot;</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span><br><span class="line">export CORE_PEER_ADDRESS=localhost:7051</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode approveformyorg -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --channelID mychannel --name user --version 1.0 --package-id $CC_PACKAGE_ID --sequence 1 --tls --cafile &quot;$&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem&quot;</span><br></pre></td></tr></table></figure></li></ol><h4 id="链代码定义提交到通道"><a href="#链代码定义提交到通道" class="headerlink" title="链代码定义提交到通道"></a>链代码定义提交到通道</h4><p>足够数量的组织批准链代码定义后，一个组织可以将链代码定义提交到通道。如果大多数通道成员批准了定义，则提交交易将成功，并且链代码定义中约定的参数将在通道上实现</p><ol><li><p>检查通道组织是否批准链代码定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> peer lifecycle chaincode checkcommitreadiness --channelID mychannel --name user --version 1.0 --sequence 1 --tls --cafile </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> &#123;</span><br><span class="line">        &quot;approvals&quot;: &#123;</span><br><span class="line">                &quot;Org1MSP&quot;: true,</span><br><span class="line">                &quot;Org2MSP&quot;: true</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>组织管理员提交链码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode commit -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --channelID mychannel --name user --version 1.0 --sequence 1 --tls --cafile &quot;$&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem&quot; --peerAddresses localhost:7051 --tlsRootCertFiles &quot;$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt&quot; --peerAddresses localhost:9051 --tlsRootCertFiles &quot;$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt&quot;</span><br></pre></td></tr></table></figure></li><li><p>使用<a href="https://hyperledger-fabric.readthedocs.io/en/release-2.5/commands/peerlifecycle.html#peer-lifecycle-chaincode-querycommitted">对等生命周期 chaincode querycomfilled</a>命令来确认链码定义已提交到通道</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">peer lifecycle chaincode querycommitted --channelID mychannel --name user --cafile &quot;$&#123;PWD&#125;/organizations/order</span><br><span class="line">erOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem&quot;</span><br></pre></td></tr></table></figure></li></ol><h4 id="调用链码"><a href="#调用链码" class="headerlink" title="调用链码"></a>调用链码</h4><p>在分类账上创建一组初始资产</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o localhost:7050 --ordererTLSHostnameOverride orderer.example.com --tls --cafile &quot;$&#123;PWD&#125;/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem&quot; -C mychannel -n basic --peerAddresses localhost:7051 --tlsRootCertFiles &quot;$&#123;PWD&#125;/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt&quot; --peerAddresses localhost:9051 --tlsRootCertFiles &quot;$&#123;PWD&#125;/organizations/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt&quot; -c &#x27;&#123;&quot;function&quot;:&quot;InitLedger&quot;,&quot;Args&quot;:[]&#125;&#x27;</span><br></pre></td></tr></table></figure><p>使用查询函数来读取由链代码创建的汽车集合：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C mychannel -n user -c &#x27;&#123;&quot;Args&quot;:[&quot;GetAllAssets&quot;]&#125;&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
          <category> fabric-hyperledger </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fabric-hyperledger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网页图片下载-同源或非同源</title>
      <link href="/2023/08/21/vue%E7%BD%91%E9%A1%B5%E5%9B%BE%E7%89%87%E4%B8%8B%E8%BD%BD-%E5%90%8C%E6%BA%90%E6%88%96%E9%9D%9E%E5%90%8C%E6%BA%90/"/>
      <url>/2023/08/21/vue%E7%BD%91%E9%A1%B5%E5%9B%BE%E7%89%87%E4%B8%8B%E8%BD%BD-%E5%90%8C%E6%BA%90%E6%88%96%E9%9D%9E%E5%90%8C%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h4 id="同源图片下载"><a href="#同源图片下载" class="headerlink" title="同源图片下载"></a>同源图片下载</h4><blockquote><p>html中可以这样写</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./img/logo.png&quot;</span> <span class="attr">download</span>=<span class="string">&quot;logo.png&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>javascript中可以这样写</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">imgDownload</span>(<span class="params">url,name</span>)&#123;</span><br><span class="line"><span class="comment">//创建一个a标签</span></span><br><span class="line"><span class="keyword">const</span> a_b = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="comment">//设置href指向</span></span><br><span class="line">a_b.<span class="property">href</span> = url;</span><br><span class="line"><span class="comment">//设置图片下载名字</span></span><br><span class="line">a_b.<span class="property">download</span> = name;</span><br><span class="line"><span class="comment">//点击a标签</span></span><br><span class="line">a_b.<span class="title function_">click</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="非同源图片下载方案"><a href="#非同源图片下载方案" class="headerlink" title="非同源图片下载方案"></a>非同源图片下载方案</h4><p><strong>通过axios请求来实现图片下载</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">downloadByAxios</span>(<span class="params">url,name</span>)&#123;</span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line"><span class="comment">//设置图片路径</span></span><br><span class="line"><span class="attr">url</span>:url,</span><br><span class="line"><span class="comment">//设置请求方法为get请求</span></span><br><span class="line"><span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line"><span class="comment">//设置相应类型为blob</span></span><br><span class="line"><span class="attr">responseType</span>: <span class="string">&#x27;blob&#x27;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(</span><br><span class="line"><span class="comment">//得到的是一个blob对象</span></span><br><span class="line"><span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(res.<span class="property">data</span>)</span><br><span class="line">            <span class="keyword">const</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">             a.<span class="property">href</span> = url</span><br><span class="line">             a.<span class="property">download</span> = name</span><br><span class="line">             a.<span class="title function_">click</span>()</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 图片下载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java scripts </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue添加背景水印效果</title>
      <link href="/2023/08/21/vue%E6%B7%BB%E5%8A%A0%E8%83%8C%E6%99%AF%E6%B0%B4%E5%8D%B0%E6%95%88%E6%9E%9C/"/>
      <url>/2023/08/21/vue%E6%B7%BB%E5%8A%A0%E8%83%8C%E6%99%AF%E6%B0%B4%E5%8D%B0%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<h4 id="项目中新建一个-watermark-js-文件"><a href="#项目中新建一个-watermark-js-文件" class="headerlink" title="项目中新建一个 watermark.js 文件"></a>项目中新建一个 watermark.js 文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">let</span> <span class="variable">watermark</span> <span class="operator">=</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">let</span> <span class="variable">setWatermark</span> <span class="operator">=</span> (text, sourceBody) =&gt; &#123;</span><br><span class="line">  <span class="type">let</span> <span class="variable">id</span> <span class="operator">=</span></span><br><span class="line">    Math.random() * <span class="number">10000</span> +</span><br><span class="line">    <span class="string">&quot;-&quot;</span> +</span><br><span class="line">    Math.random() * <span class="number">10000</span> +</span><br><span class="line">    <span class="string">&quot;/&quot;</span> +</span><br><span class="line">    Math.random() * <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (document.getElementById(id) !== <span class="literal">null</span>) &#123;</span><br><span class="line">    document.body.removeChild(document.getElementById(id));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">let</span> <span class="variable">can</span> <span class="operator">=</span> document.createElement(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">  can.width = <span class="number">120</span>; <span class="comment">//设置水印之间的左右间距</span></span><br><span class="line">  can.height = <span class="number">80</span>; <span class="comment">//设置水印之间的上下间距</span></span><br><span class="line"></span><br><span class="line">  <span class="type">let</span> <span class="variable">cans</span> <span class="operator">=</span> can.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">  cans.rotate((-<span class="number">20</span> * Math.PI) / <span class="number">180</span>);</span><br><span class="line">  cans.font = <span class="string">&quot;15px Vedana&quot;</span>;</span><br><span class="line">  cans.fillStyle = <span class="string">&quot;rgba(0, 0, 0, .5)&quot;</span>;</span><br><span class="line">  cans.textAlign = <span class="string">&quot;left&quot;</span>;</span><br><span class="line">  cans.textBaseline = <span class="string">&quot;Middle&quot;</span>;</span><br><span class="line">  cans.fillText(text, can.width / <span class="number">20</span>, can.height);</span><br><span class="line"></span><br><span class="line">  <span class="type">let</span> <span class="variable">water_div</span> <span class="operator">=</span> document.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">  water_div.id = id;</span><br><span class="line">  water_div.className = <span class="string">&quot;watermarkClass&quot;</span>;</span><br><span class="line">  water_div.style.pointerEvents = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">  water_div.style.background =</span><br><span class="line">    <span class="string">&quot;url(&quot;</span> + can.toDataURL(<span class="string">&quot;image/png&quot;</span>) + <span class="string">&quot;) left top repeat&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (sourceBody) &#123;</span><br><span class="line">    water_div.style.width = <span class="string">&quot;100%&quot;</span>;</span><br><span class="line">    water_div.style.height = <span class="string">&quot;100%&quot;</span>;</span><br><span class="line">    sourceBody.appendChild(water_div);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    water_div.style.top = <span class="string">&quot;3px&quot;</span>;</span><br><span class="line">    water_div.style.left = <span class="string">&quot;0px&quot;</span>;</span><br><span class="line">    water_div.style.position = <span class="string">&quot;fixed&quot;</span>;</span><br><span class="line">    water_div.style.zIndex = <span class="string">&quot;100000&quot;</span>;</span><br><span class="line">    water_div.style.width = document.documentElement.clientWidth + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">    water_div.style.height = document.documentElement.clientHeight + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">    document.body.appendChild(water_div);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> id;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  该方法只允许调用一次</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@param</span>:</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@text</span> == 水印内容</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@sourceBody</span> == 水印添加的位置，不传就是body</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">watermark.set = (text, sourceBody) =&gt; &#123;</span><br><span class="line">  <span class="type">const</span> <span class="variable">domArr</span> <span class="operator">=</span> Array.from(document.getElementsByClassName(<span class="string">&quot;watermarkClass&quot;</span>));</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">let</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; domArr.length; i++) &#123;</span><br><span class="line">    <span class="type">const</span> <span class="variable">element</span> <span class="operator">=</span> domArr[i];</span><br><span class="line">    <span class="comment">// element.parentNode.removeChild(element);</span></span><br><span class="line">    element.remove();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (text == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  setWatermark(text, sourceBody);</span><br><span class="line">  <span class="comment">// let id = setWatermark(text, sourceBody);</span></span><br><span class="line">  <span class="comment">// setInterval(() =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   if (document.getElementById(id) === null) &#123;</span></span><br><span class="line">  <span class="comment">//     id = setWatermark(text, sourceBody);</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">// &#125;, 2000);</span></span><br><span class="line">  <span class="comment">// window.onresize = () =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   setWatermark(text, sourceBody);</span></span><br><span class="line">  <span class="comment">// &#125;;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> watermark;</span><br></pre></td></tr></table></figure><h4 id="main-js-中引入-watermark-js"><a href="#main-js-中引入-watermark-js" class="headerlink" title="main.js 中引入 watermark.js"></a>main.js 中引入 watermark.js</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/ 引入水印文件地址</span><br><span class="line">import watermark from &#x27;./util/watermark.js&#x27;</span><br><span class="line">Vue.prototype.$watermark = watermark</span><br></pre></td></tr></table></figure><h4 id="页面中使用"><a href="#页面中使用" class="headerlink" title="页面中使用"></a>页面中使用</h4><p><code>this.$watermark.set(text，dom)</code></p><table><thead><tr><th>参数</th><th>说明</th><th>是否必填</th></tr></thead><tbody><tr><td>text</td><td>水印内容</td><td>是</td></tr><tr><td>dom</td><td>水印容器。若不传，则全屏水印，若传，则指定容器。</td><td>否</td></tr></tbody></table><h4 id="全屏水印"><a href="#全屏水印" class="headerlink" title="全屏水印"></a>全屏水印</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;page&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted()&#123;</span><br><span class="line">    this.$watermark.set(&quot;水印&quot;)</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeDestroy() &#123;</span><br><span class="line">    this.$watermark.set(&quot;&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.page&#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">  background-color: skyblue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="指定容器水印"><a href="#指定容器水印" class="headerlink" title="指定容器水印"></a>指定容器水印</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;page&quot;&gt;</span><br><span class="line">    &lt;div ref=&quot;content&quot; style=&quot;width: 500px;height: 500px;border: 2px solid red;&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted()&#123;</span><br><span class="line">    this.$watermark.set(&quot;水印&quot;,this.$refs.content)</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeDestroy() &#123;</span><br><span class="line">    this.$watermark.set(&quot;&quot;,this.$refs.content);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.page&#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">  background-color: skyblue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网页水印 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何打印html中的图片</title>
      <link href="/2023/08/21/%E5%A6%82%E4%BD%95%E6%89%93%E5%8D%B0html%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/"/>
      <url>/2023/08/21/%E5%A6%82%E4%BD%95%E6%89%93%E5%8D%B0html%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h4 id="打印html中的图片"><a href="#打印html中的图片" class="headerlink" title="打印html中的图片"></a>打印html中的图片</h4><p>浏览器 window 对象提供了 print 方法，就可以对整个页面进行打印。只需要点击按钮执行以下方法即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">js</span><br><span class="line">复制代码<span class="variable language_">window</span>.<span class="title function_">print</span>()</span><br></pre></td></tr></table></figure><p>调用此方法，会打印出整个 html 里的内容，即 document 对象下所有的页面节点。而我们需要的是只打印页面的某个元素部分，即只打印图片。</p><p>浏览器在 具体的dom 节点上并没有部署 print 方法，不过我们可以转变个思路，我们<strong>可以将需要打印的元素提取出来，同时构造一个新的window对象，将提取出来的元素插入到这个window对象下，再调用打印即可</strong>。</p><h5 id="html"><a href="#html" class="headerlink" title="html"></a>html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-image</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">&quot;width: 300px; height: 300px;&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:src</span>=<span class="string">&quot;imageUrl&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:fit</span>=<span class="string">&quot;fit&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-image</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="js"><a href="#js" class="headerlink" title="js"></a>js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">ORCodePrint</span>()&#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">imageDialogVisible</span>=<span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#box&quot;</span>)</span><br><span class="line">                    <span class="keyword">var</span> docStr = el.<span class="property">innerHTML</span>;</span><br><span class="line">                    <span class="keyword">const</span> printContent = el.<span class="property">innerHTML</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;p style=&#x27;text-align: center;margin-top: 55%;font-size: 30px&#x27;&gt;&quot;</span>+<span class="variable language_">this</span>.<span class="property">currentRow</span>.<span class="property">first_area_name</span>+<span class="string">&quot;-&quot;</span>+<span class="variable language_">this</span>.<span class="property">currentRow</span>.<span class="property">second_area_name</span>+<span class="string">&quot;-&quot;</span>+<span class="variable language_">this</span>.<span class="property">currentRow</span>.<span class="property">specific_area_name</span>+<span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line">                    <span class="keyword">var</span> newWindow=<span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&quot;打印窗口&quot;</span>,<span class="string">&quot;_blank&quot;</span>);</span><br><span class="line">                    newWindow.<span class="property">document</span>.<span class="title function_">write</span>(printContent);</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(docStr)</span><br><span class="line">                    <span class="comment">// newWindow.document.write(&quot;\n&quot;+this.currentRow.id);</span></span><br><span class="line">                    newWindow.<span class="property">document</span>.<span class="title function_">close</span>();</span><br><span class="line">                    newWindow.<span class="title function_">print</span>();</span><br><span class="line">                    newWindow.<span class="title function_">close</span>();</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 图片打印 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java scripts </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>负载均衡</title>
      <link href="/2023/08/21/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>/2023/08/21/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="实现请求负载均衡"><a href="#实现请求负载均衡" class="headerlink" title="实现请求负载均衡"></a>实现请求负载均衡</h3><p><strong>配置多个目标服务器，当一台服务器出现故障时，<code>nginx</code> 能将请求自动转向另一台服务器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    sendfile_max_chunk 100k;  <span class="comment">#每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。</span></span><br><span class="line">    keepalive_timeout 65;  <span class="comment">#连接超时时间，默认为75s，可以在http，server，location块。</span></span><br><span class="line"></span><br><span class="line">    upstream mysvr &#123;   </span><br><span class="line">      server 127.0.0.1:7878 weight=2;</span><br><span class="line">      server 192.168.10.121:3333 backup weight=1;  <span class="comment">#根据权重进行轮询负载均衡</span></span><br><span class="line">    &#125;</span><br><span class="line">    error_page 404 https://www.baidu.com; <span class="comment">#错误页</span></span><br><span class="line">    server &#123;</span><br><span class="line">        keepalive_requests 120; <span class="comment">#单连接请求上限次数。</span></span><br><span class="line">        listen       9090;   <span class="comment">#监听端口</span></span><br><span class="line">        server_name  127.0.0.1;   <span class="comment">#监听地址       </span></span><br><span class="line">        location  ~*^.+$ &#123;       <span class="comment">#请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。</span></span><br><span class="line">           <span class="comment">#root path;  #根目录</span></span><br><span class="line">           <span class="comment">#index vv.txt;  #设置默认页</span></span><br><span class="line">           proxy_pass  http://mysvr;  <span class="comment">#请求转向mysvr 定义的服务器列表</span></span><br><span class="line">           deny 127.0.0.1;  <span class="comment">#拒绝的ip</span></span><br><span class="line">           allow 172.18.5.54; <span class="comment">#允许的ip    </span></span><br><span class="line">         <span class="comment"># expires 设置客户端缓存</span></span><br><span class="line">            <span class="comment">#expires 1h;</span></span><br><span class="line">            index index.php index.html; </span><br><span class="line">            <span class="comment"># 资源重定向，如访问http://shop.devops.com/index.html后会被重写为访问        http://shop.devops.com/index.php，permanent表示永久重定向</span></span><br><span class="line">            rewrite /index.html /index.php permanent;</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 资源重定向，$request_filename为nginx的内置变量，表示资源文件路径</span></span><br><span class="line">            <span class="keyword">if</span> (!-e <span class="variable">$request_filename</span>) &#123;</span><br><span class="line">                rewrite ^(.*)$ /index.php?s=/<span class="variable">$1</span> last;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>当服务器 <code>ocalhost:8080</code> 挂掉时，<code>nginx</code>能将请求自动转向服务器 <code>192.168.101.9:8080</code>。上面还加了一个 <code>weight</code> 属性，此属性表示各服务器被访问到的权重，<code>weight</code> 越高被访问到的几率越高。</strong></p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> 负载均衡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows下静态资源代理</title>
      <link href="/2023/08/21/windows%E4%B8%8B%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E4%BB%A3%E7%90%86/"/>
      <url>/2023/08/21/windows%E4%B8%8B%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="静态资源访问配置"><a href="#静态资源访问配置" class="headerlink" title="静态资源访问配置"></a>静态资源访问配置</h3><p><code>windows下</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        keepalive_requests 120; <span class="comment">#单连接请求上限次数。</span></span><br><span class="line">        listen       9090;   <span class="comment">#监听端口</span></span><br><span class="line">        server_name  127.0.0.1;   <span class="comment">#监听地址       </span></span><br><span class="line">        location  ~*^.+$ &#123;       <span class="comment">#请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。</span></span><br><span class="line">           <span class="comment">#root path;  #根目录</span></span><br><span class="line">           <span class="comment">#index vv.txt;  #设置默认页</span></span><br><span class="line">           proxy_pass  http://mysvr;  <span class="comment">#请求转向mysvr 定义的服务器列表</span></span><br><span class="line">           deny 127.0.0.1;  <span class="comment">#拒绝的ip</span></span><br><span class="line">           allow 172.18.5.54; <span class="comment">#允许的ip    </span></span><br><span class="line">         <span class="comment"># expires 设置客户端缓存</span></span><br><span class="line">            <span class="comment">#expires 1h;</span></span><br><span class="line">            index index.php index.html; </span><br><span class="line">            <span class="comment"># 资源重定向，如访问http://shop.devops.com/index.html后会被重写为访问http://shop.devops.com/index.php，permanent表示永久重定向</span></span><br><span class="line">            rewrite /index.html /index.php permanent;</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 资源重定向，$request_filename为nginx的内置变量，表示资源文件路径</span></span><br><span class="line">            <span class="keyword">if</span> (!-e <span class="variable">$request_filename</span>) &#123;</span><br><span class="line">                rewrite ^(.*)$ /index.php?s=/<span class="variable">$1</span> last;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        location ~ \.(js|css|jpg|png) &#123;</span><br><span class="line">            <span class="comment"># 告诉客户端所有js,css,jpg,png文件都可以缓存1小时，不用重新在服务器下载</span></span><br><span class="line">            expires 1h;</span><br><span class="line">            <span class="comment"># 防盗链实现，所有不是从shop.devops.com跳转过去访问js|css|jpg|png文件的都被拦截，返回404</span></span><br><span class="line">            valid_referers shop.devops.com;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$invalid_referer</span>) &#123;</span><br><span class="line">                <span class="built_in">return</span> 404;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">server &#123;</span><br><span class="line">       listen       9091;</span><br><span class="line">       server_name  localhost;</span><br><span class="line">       </span><br><span class="line">       location /image &#123;</span><br><span class="line">           root   D:\apache-tomcat-10.0.23\webapps\patrol ;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>请求url：<a href="http://localhost:9090/image/a.jpg">http://localhost:9090/image/a.jpg</a></p><p>实际请求地址：D:\apache-tomcat-10.0.23\webapps\patrol\image\a.jpg</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反向代理</title>
      <link href="/2023/08/21/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
      <url>/2023/08/21/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="nginx的proxy-pass配置路径，加与不加“-”差异巨大"><a href="#nginx的proxy-pass配置路径，加与不加“-”差异巨大" class="headerlink" title="nginx的proxy_pass配置路径，加与不加“&#x2F;”差异巨大"></a>nginx的proxy_pass配置路径，加与不加“&#x2F;”差异巨大</h2><h3 id="1-1-绝对路径"><a href="#1-1-绝对路径" class="headerlink" title="1.1 绝对路径"></a>1.1 绝对路径</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /proxy &#123;</span><br><span class="line">    proxy_pass http://192.168.137.181:8080/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当访问 <code>http://127.0.0.1/proxy/test/test.txt</code>时，nginx匹配到&#x2F;proxy路径，把请求转发给192.168.137.181:8080服务，实际请求路径为<br> <code>http://10.0.0.1:8080/test/test.txt</code>，nginx会去掉匹配的“&#x2F;proxy”。</p><h3 id="1-2-相对路径"><a href="#1-2-相对路径" class="headerlink" title="1.2 相对路径"></a>1.2 相对路径</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /proxy &#123;</span><br><span class="line">    proxy_pass http://10.0.0.1:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当访问 <code>http://127.0.0.1/proxy/test/test.txt</code>时，nginx匹配到&#x2F;proxy路径，把请求转发给<code>192.168.137.181:8080</code>服务，实际请求代理服务器的路径为<br> <code>http://192.168.137.181:8080/proxy/test/test.txt</code>， 此时nginx会把匹配的“&#x2F;proxy”也代理给代理服务器。</p><h3 id="1-3-代理路径添加uri"><a href="#1-3-代理路径添加uri" class="headerlink" title="1.3 代理路径添加uri"></a>1.3 代理路径添加uri</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /proxy &#123;</span><br><span class="line">    proxy_pass http://10.0.0.1:8080/static01/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当访问 <code>http://127.0.0.1/proxy/test/test.txt</code>时，nginx匹配到&#x2F;proxy路径，把请求转发给192.168.137.181:8080服务，实际请求代理服务器的路径为<br> <code>http://10.0.0.1:8080/static01/test/test.txt</code>。<br> 实际上2、3是一种情况，即加了“&#x2F;”就会去掉匹配前缀。这就引出了下一个问题。</p><h2 id="2-nginx反向代理去掉前缀的另一种方法"><a href="#2-nginx反向代理去掉前缀的另一种方法" class="headerlink" title="2.nginx反向代理去掉前缀的另一种方法"></a>2.nginx反向代理去掉前缀的另一种方法</h2><p>我们使用nginx的很多时候都需要去掉前缀。前缀只是为了让nginx用来区分转发到哪个服务器，不是实际URL的一部分。例如我们需要代理访问<code>http://10.0.0.1:8080/test/test.txt</code>，如果不去掉前缀，nginx代理访问的就是<code>http://192.168.137.181:8080/proxy/test/test.txt</code>，那么这时候就需要改变代理服务器原来写好的url，这是不合理的。<br> 一个种方案是上面提到的proxy_pass后面加根路径“&#x2F;”。另一种方案是使用正则重写url。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /resource &#123;</span><br><span class="line">    rewrite  ^/resource/?(.*)$ /$1 break;</span><br><span class="line">    proxy_pass http://192.168.137.189:8082/; # 转发地址</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite <span class="string">&quot;^/resource/(.)$&quot;</span> /<span class="variable">$1</span> <span class="built_in">break</span></span><br></pre></td></tr></table></figure><p>就是路径重写，其中：</p><ul><li><code>&quot;^/resource/(.)$&quot;</code>：匹配路径的正则表达式，用了分组语法就是<code>*(.)*</code>，把&#x2F;resource&#x2F;以后的所有部分当做1组</li><li><code>/$1</code>：重写的目标路径，这里用$1引用前面正则表达式匹配到的分组（组编号从1开始，也就是api），即&#x2F;resource&#x2F;后面的所有。这样新的路径就是除去&#x2F;resource&#x2F;以外的所有，就达到了去除&#x2F;resource前缀的目的；</li><li>break：指令，重写路径结束后。</li></ul><h3 id="重启nginx、测试语法正确性"><a href="#重启nginx、测试语法正确性" class="headerlink" title="重启nginx、测试语法正确性"></a>重启nginx、测试语法正确性</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br><span class="line">nginx -t</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> 反向代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BCryptPasswordEncoder使用</title>
      <link href="/2023/08/21/BCryptPasswordEncoder%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/08/21/BCryptPasswordEncoder%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="BCryptPasswordEncoder使用"><a href="#BCryptPasswordEncoder使用" class="headerlink" title="BCryptPasswordEncoder使用"></a>BCryptPasswordEncoder使用</h4><p> 在 Spring Security 中有一个加密的类 BCryptPasswordEncoder ，它的使用非常的简单而且也比较有趣。让我们来看看它的使用。</p><p> 首先创建一个 SpringBoot 的项目，在创建项目的时候添加 Spring Security 的依赖。然后我们添加一个测试类，写如下的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">final private <span class="title class_">String</span> password = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Test</span></span><br><span class="line">public <span class="keyword">void</span> <span class="title class_">TestCrypt</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title class_">BCryptPasswordEncoder</span> bCryptPasswordEncoder = <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line"></span><br><span class="line">    <span class="title class_">String</span> encode1 = bCryptPasswordEncoder.<span class="title function_">encode</span>(password);</span><br><span class="line">    <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;encode1:&quot;</span> + encode1);</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">String</span> encode2 = bCryptPasswordEncoder.<span class="title function_">encode</span>(password);</span><br><span class="line">    <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;encode2:&quot;</span> + encode2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中，首先实例化了一个 BCryptPasswordEncoder 类，然后使用该类的 encode 方法对同一个明文字符串进行了加密，并输出。运行上面的代码，查看输出。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">encode1</span>:$2a$10$SqbQb0pD3KYrH7ZVTWdRZOhPAelQqa..<span class="property">lUnysXoWag6RvMkyC5SE6</span></span><br><span class="line"><span class="attr">encode2</span>:$2a$10$0sjBLlwrrch2EjgYls197e9dGRCMbQ7KUIt/<span class="title class_">ODPTSU0W</span>.<span class="property">mEPaGkfG</span></span><br></pre></td></tr></table></figure><p> 从上面的输出可以看出，同一个明文加密两次，却输出了不同的结果。是不是很神奇？但是这样有一个问题，如果使用 BCryptPasswordEncoder 去加密登录密码的话，还能进行验证么？当然是可以验证的。验证的话，使用的是 BCryptPasswordEncoder 的 matches 方法，代码如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">final private <span class="title class_">String</span> password = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Test</span></span><br><span class="line">public <span class="keyword">void</span> <span class="title class_">TestCrypt</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title class_">BCryptPasswordEncoder</span> bCryptPasswordEncoder = <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line"></span><br><span class="line">    <span class="title class_">String</span> encode1 = bCryptPasswordEncoder.<span class="title function_">encode</span>(password);</span><br><span class="line">    <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;encode1:&quot;</span> + encode1);</span><br><span class="line"></span><br><span class="line">    boolean matches1 = bCryptPasswordEncoder.<span class="title function_">matches</span>(password, encode1);</span><br><span class="line">    <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;matches1:&quot;</span> + matches1);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">String</span> encode2 = bCryptPasswordEncoder.<span class="title function_">encode</span>(password);</span><br><span class="line">    <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;encode2:&quot;</span> + encode2);</span><br><span class="line"></span><br><span class="line">    boolean matches2 = bCryptPasswordEncoder.<span class="title function_">matches</span>(password, encode2);</span><br><span class="line">    <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;matches2:&quot;</span> + matches2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复制</p><p>使用 matches 方法可以对加密前和加密后是否匹配进行验证。输出如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">encode1</span>:$2a$10$qxU.<span class="property">rFLeTmZg47FyqJlZwu</span>.<span class="property">QNX9RpEvqBUJiwUvUE0p4ENR</span>.<span class="property">EndfS</span></span><br><span class="line"><span class="attr">matches1</span>:<span class="literal">true</span></span><br><span class="line"><span class="attr">encode2</span>:$2a$10$NyGEOsQ1Hxv2gvYRmaEENueORlVDtSqoB/fHN76KkvQDeg7fbTy22</span><br><span class="line"><span class="attr">matches2</span>:<span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BCryptPasswordEncoder </tag>
            
            <tag> Spring Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JwT的工作流程</title>
      <link href="/2023/08/21/JwT%E7%9A%84%E7%AE%80%E5%8D%95%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/"/>
      <url>/2023/08/21/JwT%E7%9A%84%E7%AE%80%E5%8D%95%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是JWT？"><a href="#什么是JWT？" class="headerlink" title="什么是JWT？"></a>什么是JWT？</h3><p>JWT是Json Web Token的缩写。它是基于 RFC 7519 标准定义的一种可以安全传输的 小巧 和 自包含 的JSON对象。由于数据是使用数字签名的，所以是可信任的和安全的。JWT可以使用HMAC算法对secret进行加密或者使用RSA的公钥私钥对来进行签名。</p><h3 id="JWT的工作流程"><a href="#JWT的工作流程" class="headerlink" title="JWT的工作流程"></a>JWT的工作流程</h3><p>下面是一个JWT的工作流程图。模拟一下实际的流程是这样的（假设受保护的API在&#x2F;protected中）</p><ul><li>用户导航到登录页，输入用户名、密码，进行登录</li><li>服务器验证登录鉴权，如果改用户合法，根据用户的信息和服务器的规则生成JWT Token</li><li>服务器将该token以json形式返回（不一定要json形式，这里说的是一种常见的做法）</li><li>用户得到token，存在localStorage、cookie或其它数据存储形式中。</li><li>以后用户请求&#x2F;protected中的API时，在请求的header中加入Authorization: Bearer xxxx(token)。此处注意token之前有一个7字符长度的 Bearer</li><li>服务器端对此token进行检验，如果合法就解析其中内容，根据其拥有的权限和自己的业务逻辑给出对应的响应结果。</li><li>用户取得结果</li></ul><p><img src="https://img1.imgtp.com/2023/08/21/VkHrEFRX.png" alt="image-20221129144255035"></p><h3 id="JWT的主要应用场景"><a href="#JWT的主要应用场景" class="headerlink" title="JWT的主要应用场景"></a>JWT的主要应用场景</h3><p>身份认证在这种场景下，一旦用户完成了登陆，在接下来的每个请求中包含JWT，可以用来验证用户身份以及对路由，服务和资源的访问权限进行验证。由于它的开销非常小，可以轻松的在不同域名的系统中传递，所有目前在单点登录（SSO）中比较广泛的使用了该技术。 信息交换在通信的双方之间使用JWT对数据进行编码是一种非常安全的方式，由于它的信息是经过签名的，可以确保发送者发送的信息是没有经过伪造的。</p><p>优点<br>1.简洁(Compact): 可以通过URL，POST参数或者在HTTP header发送，因为数据量小，传输速度也很快<br>2.自包含(Self-contained)：负载中包含了所有用户所需要的信息，避免了多次查询数据库<br>3.因为Token是以JSON加密的形式保存在客户端的，所以JWT是跨语言的，原则上任何web形式都支持。<br>4.不需要在服务端保存会话信息，特别适用于分布式微服务。</p><h3 id="JWT的结构"><a href="#JWT的结构" class="headerlink" title="JWT的结构"></a>JWT的结构</h3><p>JWT是由三段信息构成的，将这三段信息文本用.链接一起就构成了JWT字符串。<br>就像这样:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span><br></pre></td></tr></table></figure><p>JWT包含了三部分：<br>Header 头部(标题包含了令牌的元数据，并且包含签名和&#x2F;或加密算法的类型)<br>Payload 负载 (类似于飞机上承载的物品)<br>Signature 签名&#x2F;签证</p><p>Header<br>JWT的头部承载两部分信息：token类型和采用的加密算法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;,</span><br><span class="line">   &quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>声明类型:这里是jwt<br>声明加密的算法:通常直接使用 HMAC SHA256</p><p>加密算法是单向函数散列算法，常见的有MD5 、SHA 、HAMC 。<br>MD5(message-digest algorithm 5) （信息-摘要算法）缩写，广泛用于加密和解密技术，常用于文件校验。校验？不管文件多大，经过MD5后都能生成唯一的MD5值<br>SHA (Secure Hash Algorithm，安全散列算法），数字签名等密码学应用中重要的工具，安全性高于MD5<br>HMAC (Hash Message Authentication Code)，散列消息鉴别码，基于密钥的Hash算法的认证协议。用公开函数和密钥产生一个固定长度的值作为认证标识，用这个标识鉴别消息的完整性。常用于接口签名验证</p><p>Payload<br>载荷就是存放有效信息的地方。<br>有效信息包含三个部分<br>1.标准中注册的声明<br>2.公共的声明<br>3.私有的声明</p><p>标准中注册的声明 (建议但不强制使用) ：<br>iss: jwt签发者<br>sub: 面向的用户(jwt所面向的用户)<br>aud: 接收jwt的一方<br>exp: 过期时间戳(jwt的过期时间，这个过期时间必须要大于签发时间)<br>nbf: 定义在什么时间之前，该jwt都是不可用的.<br>iat: jwt的签发时间<br>jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</p><p>公共的声明 ：<br>公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密.</p><p>私有的声明 ：<br>私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。</p><p>Signature<br>jwt的第三部分是一个签证信息，这个签证信息由三部分组成：<br>header (base64后的)<br>payload (base64后的)<br>secret<br>这个部分需要base64加密后的header和base64加密后的payload使用.连接组成的字符串，然后通过header中声明的加密方式进行加盐secret组合加密，然后就构成了jwt的第三部分。<br>密钥secret是保存在服务端的，服务端会根据这个密钥进行生成token和进行验证，所以需要保护好。</p><h3 id="SpringBoot-Spring-Security和JWT的集成实现token验证"><a href="#SpringBoot-Spring-Security和JWT的集成实现token验证" class="headerlink" title="SpringBoot+Spring Security和JWT的集成实现token验证"></a>SpringBoot+Spring Security和JWT的集成实现token验证</h3><h4 id="引入JWT依赖"><a href="#引入JWT依赖" class="headerlink" title="引入JWT依赖"></a>引入JWT依赖</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jjwt&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.9.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="JWT的生成和解析工具类"><a href="#JWT的生成和解析工具类" class="headerlink" title="JWT的生成和解析工具类"></a>JWT的生成和解析工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.jsonwebtoken.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: xxm</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/5/28 15:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**过期时间---24 hour*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">EXPIRATION_TIME</span> <span class="operator">=</span> <span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>;</span><br><span class="line">    <span class="comment">/**自己设定的秘钥*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SECRET</span> <span class="operator">=</span> <span class="string">&quot;023bdc63c3c5a4587*9ee6581508b9d03ad39a74fc0c9a9cce604743367c9646b&quot;</span>;</span><br><span class="line">    <span class="comment">/**前缀*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TOKEN_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;Bearer &quot;</span>;</span><br><span class="line">    <span class="comment">/**表头授权*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">AUTHORIZATION</span> <span class="operator">=</span> <span class="string">&quot;Authorization&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span>: xxm</span></span><br><span class="line"><span class="comment">     * 功能描述:创建Token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>: 2020/5/28 16:09</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>: </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateToken</span><span class="params">(String userName)</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line">        <span class="comment">// 设置签发时间</span></span><br><span class="line">        calendar.setTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="comment">// 设置过期时间</span></span><br><span class="line">        <span class="comment">// 添加秒钟</span></span><br><span class="line">        calendar.add(Calendar.SECOND, EXPIRATION_TIME);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">time</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//you can put any data in the map</span></span><br><span class="line">        map.put(<span class="string">&quot;userName&quot;</span>, userName);</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                .setClaims(map)</span><br><span class="line">                <span class="comment">//签发时间</span></span><br><span class="line">                .setIssuedAt(now)</span><br><span class="line">                <span class="comment">//过期时间</span></span><br><span class="line">                .setExpiration(time)</span><br><span class="line">                .signWith(SignatureAlgorithm.HS256, SECRET)</span><br><span class="line">                .compact();</span><br><span class="line">        <span class="comment">//jwt前面一般都会加Bearer</span></span><br><span class="line">        <span class="keyword">return</span> TOKEN_PREFIX + jwt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span>: xxm</span></span><br><span class="line"><span class="comment">     * 功能描述: 解密Token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>: 2020/5/28 16:18</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>: </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">validateToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// parse the token.</span></span><br><span class="line">            Map&lt;String, Object&gt; body = Jwts.parser()</span><br><span class="line">                    .setSigningKey(SECRET)</span><br><span class="line">                    .parseClaimsJws(token.replace(TOKEN_PREFIX, <span class="string">&quot;&quot;</span>))</span><br><span class="line">                    .getBody();</span><br><span class="line">            <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> body.get(<span class="string">&quot;userName&quot;</span>).toString();</span><br><span class="line">            <span class="keyword">return</span> userName;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ExpiredJwtException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedJwtException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedJwtException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SignatureException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Spring-Security配置"><a href="#Spring-Security配置" class="headerlink" title="Spring Security配置"></a>Spring Security配置</h4><p>Spring Security是一个基于Spring的通用安全框架，里面内容太多了，本文的主要目的也不是展开讲这个框架，而是如何利用Spring Security和JWT一起来完成API保护。所以关于Spring Secruity的基础内容或展开内容，请自行去官网学习（<a href="http://projects.spring.io/spring-security/">官网</a>）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: xxm</span></span><br><span class="line"><span class="comment"> * 功能描述: SpringSecurity的配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/5/28 15:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(securedEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要放行的URL</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] AUTH_WHITELIST = &#123;</span><br><span class="line">            <span class="string">&quot;/user/login&quot;</span></span><br><span class="line">            <span class="comment">// other public endpoints of your API may be appended to this array</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置请求拦截</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.cors().and()</span><br><span class="line">                <span class="comment">//由于使用的是JWT，我们这里不需要csrf</span></span><br><span class="line">                .csrf().disable()</span><br><span class="line">                <span class="comment">//基于token，所以不需要session</span></span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">//可以匿名访问的链接</span></span><br><span class="line">                .antMatchers(AUTH_WHITELIST).permitAll()</span><br><span class="line">                <span class="comment">//其他所有请求需要身份认证</span></span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line"></span><br><span class="line">                .and()</span><br><span class="line">                <span class="comment">//.addFilter(new JWTLoginFilter(authenticationManager()))</span></span><br><span class="line">                .addFilter(<span class="keyword">new</span> <span class="title class_">JWTAuthenticationFilter</span>(authenticationManager()));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这是标准的SpringSecurity配置内容，就不在详细说明。注意其中的</p><p>.addFilter(new JwtAuthenticationFilter(authenticationManager()))</p><p>这行，将我们定义的JWT方法加入SpringSecurity的处理流程中。</p><p>重点就是配置请求拦截，由于我做的是一个接口服务，所以暂时除了登录验证，其他接口链接全部都要拦截，通过JWTAuthenticationFilter 过滤器来实现token的验证</p><h4 id="登录生成token"><a href="#登录生成token" class="headerlink" title="登录生成token"></a>登录生成token</h4><p>验证用户名密码正确后，生成一个token，并将token返回给客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/login&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toLogin</span><span class="params">(SysUser user)</span> &#123;</span><br><span class="line">        JSONObject json=<span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        <span class="type">BCryptPasswordEncoder</span> <span class="variable">bCryptPasswordEncoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">SysUser</span> <span class="variable">user1</span> <span class="operator">=</span> userControllerClient.getUserInfoByLoginName(user.getUsername());</span><br><span class="line">            <span class="keyword">if</span> (user1!=<span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">dbPassWord</span> <span class="operator">=</span> user1.getPassword();</span><br><span class="line">                <span class="keyword">if</span> (bCryptPasswordEncoder.matches(user.getPassword(),dbPassWord)) &#123;</span><br><span class="line">                    <span class="comment">//创建token</span></span><br><span class="line"></span><br><span class="line">                    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JwtUtil.generateToken(user.getUsername());</span><br><span class="line">                    json.put(<span class="string">&quot;success&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">                    json.put(<span class="string">&quot;code&quot;</span>, <span class="number">1</span>);</span><br><span class="line">                    <span class="comment">//json.put(&quot;result&quot;, user1);</span></span><br><span class="line">                    json.put(<span class="string">&quot;time&quot;</span>, DateUtil.dateToString(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">                    json.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;登陆成功&quot;</span>);</span><br><span class="line">                    json.put(JwtUtil.AUTHORIZATION,token);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    json.put(<span class="string">&quot;success&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">                    json.put(<span class="string">&quot;code&quot;</span>, -<span class="number">1</span>);</span><br><span class="line">                    json.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;登陆失败,密码错误&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                json.put(<span class="string">&quot;success&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">                json.put(<span class="string">&quot;code&quot;</span>, <span class="number">0</span>);</span><br><span class="line">                json.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;无此用户信息&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            json.put(<span class="string">&quot;code&quot;</span>, -<span class="number">2</span>);</span><br><span class="line">            json.put(<span class="string">&quot;success&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            json.put(<span class="string">&quot;message&quot;</span>, e.getMessage());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(json);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>授权验证</p><p>用户一旦登录成功后，会拿到token，后续的请求都会带着这个token，服务端会验证token的合法性。</p><p>创建<code>JWTAuthenticationFilter</code>类，我们在这个类中实现token的校验功能。</p><h4 id="token的校验"><a href="#token的校验" class="headerlink" title="token的校验"></a>token的校验</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * token的校验</span></span><br><span class="line"><span class="comment"> * 该类继承自BasicAuthenticationFilter，在doFilterInternal方法中，</span></span><br><span class="line"><span class="comment"> * 从http头的Authorization 项读取token数据，然后用Jwts包提供的方法校验token的合法性。</span></span><br><span class="line"><span class="comment"> * 如果校验通过，就认为这是一个取得授权的合法请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xxm</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JWTAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title class_">BasicAuthenticationFilter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(<span class="built_in">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JWTAuthenticationFilter</span><span class="params">(AuthenticationManager authenticationManager)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(authenticationManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        <span class="type">String</span> <span class="variable">header</span> <span class="operator">=</span> request.getHeader(JwtUtil.AUTHORIZATION);</span><br><span class="line"></span><br><span class="line">        JSONObject json=<span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        <span class="comment">//跳过不需要验证的路径</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> != SpringSecurityConfig.AUTH_WHITELIST&amp;&amp;Arrays.asList(SpringSecurityConfig.AUTH_WHITELIST).contains(url))&#123;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(header) || !header.startsWith(JwtUtil.TOKEN_PREFIX)) &#123;</span><br><span class="line">            </span><br><span class="line">            json.put(<span class="string">&quot;codeCheck&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            json.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Token为空&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            response.getWriter().write(JSON.toJSONString(json));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authentication</span> <span class="operator">=</span> getAuthentication(request,response);</span><br><span class="line"></span><br><span class="line">            SecurityContextHolder.getContext().setAuthentication(authentication);</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (ExpiredJwtException e) &#123;</span><br><span class="line">            <span class="comment">//json.put(&quot;status&quot;, &quot;-2&quot;);</span></span><br><span class="line">            json.put(<span class="string">&quot;codeCheck&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            json.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Token已过期&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            response.getWriter().write(JSON.toJSONString(json));</span><br><span class="line">            logger.error(<span class="string">&quot;Token已过期: &#123;&#125; &quot;</span> + e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedJwtException e) &#123;</span><br><span class="line">            <span class="comment">//json.put(&quot;status&quot;, &quot;-3&quot;);</span></span><br><span class="line">            json.put(<span class="string">&quot;codeCheck&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            json.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Token格式错误&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            response.getWriter().write(JSON.toJSONString(json));</span><br><span class="line">            logger.error(<span class="string">&quot;Token格式错误: &#123;&#125; &quot;</span> + e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedJwtException e) &#123;</span><br><span class="line">            <span class="comment">//json.put(&quot;status&quot;, &quot;-4&quot;);</span></span><br><span class="line">            json.put(<span class="string">&quot;codeCheck&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            json.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Token没有被正确构造&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            response.getWriter().write(JSON.toJSONString(json));</span><br><span class="line">            logger.error(<span class="string">&quot;Token没有被正确构造: &#123;&#125; &quot;</span> + e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SignatureException e) &#123;</span><br><span class="line">            <span class="comment">//json.put(&quot;status&quot;, &quot;-5&quot;);</span></span><br><span class="line">            json.put(<span class="string">&quot;codeCheck&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            json.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Token签名失败&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            response.getWriter().write(JSON.toJSONString(json));</span><br><span class="line">            logger.error(<span class="string">&quot;签名失败: &#123;&#125; &quot;</span> + e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            <span class="comment">//json.put(&quot;status&quot;, &quot;-6&quot;);</span></span><br><span class="line">            json.put(<span class="string">&quot;codeCheck&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            json.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Token非法参数异常&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            response.getWriter().write(JSON.toJSONString(json));</span><br><span class="line">            logger.error(<span class="string">&quot;非法参数异常: &#123;&#125; &quot;</span> + e);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="comment">//json.put(&quot;status&quot;, &quot;-9&quot;);</span></span><br><span class="line">            json.put(<span class="string">&quot;codeCheck&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            json.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Invalid Token&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            response.getWriter().write(JSON.toJSONString(json));</span><br><span class="line">            logger.error(<span class="string">&quot;Invalid Token &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UsernamePasswordAuthenticationToken <span class="title function_">getAuthentication</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span>  &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(JwtUtil.AUTHORIZATION);</span><br><span class="line">        <span class="keyword">if</span> (token != <span class="literal">null</span>) &#123;</span><br><span class="line">            String userName=<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 解密Token</span></span><br><span class="line">                userName = JwtUtil.validateToken(token);</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isNotBlank(userName)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(userName, <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (ExpiredJwtException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">                <span class="comment">//throw new TokenException(&quot;Token已过期&quot;);</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedJwtException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">                <span class="comment">//throw new TokenException(&quot;Token格式错误&quot;);</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (MalformedJwtException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">                <span class="comment">//throw new TokenException(&quot;Token没有被正确构造&quot;);</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SignatureException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">                <span class="comment">//throw new TokenException(&quot;签名失败&quot;);</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">                <span class="comment">//throw new TokenException(&quot;非法参数异常&quot;);</span></span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">                <span class="comment">//throw new IllegalStateException(&quot;Invalid Token. &quot;+e.getMessage());</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该类继承自BasicAuthenticationFilter，在doFilterInternal方法中，从http头的Authorization 项读取token数据，然后用Jwts包提供的方法校验token的合法性。如果校验通过，就认为这是一个取得授权的合法请求。<br>这其中也包括了，token验证异常处理的返回信息</p>]]></content>
      
      
      <categories>
          
          <category> java进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+typra+picgo+gitee搭建博客写作环境</title>
      <link href="/2023/08/21/hexo-typra-picgo-gitee%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%86%99%E4%BD%9C%E7%8E%AF%E5%A2%83/"/>
      <url>/2023/08/21/hexo-typra-picgo-gitee%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%86%99%E4%BD%9C%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>博客使用hexo，部署在github page，Typora支持markdown非常棒，但是图片之类的无法直接上传到云端，因为它的图片是本地的，这几天看到网上有介绍Typora设置免费的图床（gitee），而且图片粘贴上去，直接自动上传到图床生成链接，这样将<code>md</code>文件发给别人，再也不用担心图片无法正常显示的问题了。设置好之后，写一篇教程，记录一下。</p><h4 id="安装下载PicGo"><a href="#安装下载PicGo" class="headerlink" title="安装下载PicGo"></a>安装下载PicGo</h4><p>山东大学镜像站 <a href="https://mirrors.sdu.edu.cn/github-release/Molunerfinn_PicGo/%EF%BC%8C%E9%80%89%E6%8B%A9%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD">https://mirrors.sdu.edu.cn/github-release/Molunerfinn_PicGo/，选择最新版本下载</a></p><p><img src="https://gitee.com/lcfsgitee/image-library/raw/master/image-20230821151540523.png" alt="image-20230821151540523"></p><h4 id="新建gitee仓库-生成令牌"><a href="#新建gitee仓库-生成令牌" class="headerlink" title="新建gitee仓库-生成令牌"></a>新建gitee仓库-生成令牌</h4><p>新仓库要初始化readme！！！</p><p><img src="https://gitee.com/lcfsgitee/image-library/raw/master/image-20230821151620466.png" alt="image-20230821151620466"></p><h5 id="在PicGo设置图床参数"><a href="#在PicGo设置图床参数" class="headerlink" title="在PicGo设置图床参数"></a>在PicGo设置图床参数</h5><p><code>repo：用户名/网址仓库名</code>,并设置为默认图库</p><p><img src="https://gitee.com/lcfsgitee/image-library/raw/master/image-20230821151639633.png" alt="image-20230821151639633"></p><h4 id="设置typra"><a href="#设置typra" class="headerlink" title="设置typra"></a>设置typra</h4><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://gitee.com/lcfsgitee/image-library/raw/master/image-20230821151701055.png" alt="image-20230821151701055"></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo new post <span class="string">&quot;xxx&quot;</span></span><br><span class="line">hexo c</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> gitee </tag>
            
            <tag> PicGo </tag>
            
            <tag> Typra </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态监听搜索实现</title>
      <link href="/2023/08/21/%E5%8A%A8%E6%80%81%E7%9B%91%E5%90%AC%E6%90%9C%E7%B4%A2%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/08/21/%E5%8A%A8%E6%80%81%E7%9B%91%E5%90%AC%E6%90%9C%E7%B4%A2%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="需求是怎样的"><a href="#需求是怎样的" class="headerlink" title="需求是怎样的"></a>需求是怎样的</h3><p>因为数据条数过多，用户要求新增搜索功能</p><p><img src="https://gitee.com/lcfsgitee/image-library/raw/master/image-20230821151723985.png" alt="image-20230821151723985"></p><h3 id="实际如何做"><a href="#实际如何做" class="headerlink" title="实际如何做"></a>实际如何做</h3><p>面板头部头部空间有限，再加之考虑美观性，决定通过<strong>动态监听搜索框</strong>内所输入的数据，展示匹配结果。因为监听变量位于对象内，故采用<strong>深度监听</strong>。</p><h4 id="两种监听方式"><a href="#两种监听方式" class="headerlink" title="两种监听方式"></a>两种监听方式</h4><h5 id="普通监听"><a href="#普通监听" class="headerlink" title="普通监听"></a>普通监听</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">data()&#123;</span><br><span class="line">variable:null,</span><br><span class="line">&#125;,</span><br><span class="line">watch:&#123;</span><br><span class="line">// 此处监听variable变量，当期有变化时执行</span><br><span class="line">variable(item1,item2)&#123;</span><br><span class="line">// item1为新值，item2为旧值</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="深度监听（变量在对象内）"><a href="#深度监听（变量在对象内）" class="headerlink" title="深度监听（变量在对象内）"></a>深度监听（变量在对象内）</h5><h6 id="一个变量"><a href="#一个变量" class="headerlink" title="一个变量"></a>一个变量</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">data()&#123;</span><br><span class="line">obj:&#123;</span><br><span class="line">a:&#x27;&#x27;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">watch:&#123;</span><br><span class="line">// 此处监听obj属性a值变量</span><br><span class="line">&#x27;obj.a&#x27;(item1,item2)&#123;</span><br><span class="line">// item1为新值，item2为旧值</span><br><span class="line">&#125;,</span><br><span class="line">deep:true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h6 id="多个变量"><a href="#多个变量" class="headerlink" title="多个变量"></a>多个变量</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">data()&#123;</span><br><span class="line">obj:&#123;</span><br><span class="line">a:&#x27;&#x27;,</span><br><span class="line">b:&#x27;&#x27;,</span><br><span class="line">c:&#x27;&#x27;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">watch:&#123;</span><br><span class="line">obj:&#123;</span><br><span class="line">// 此处监听obj属性a值变量</span><br><span class="line">handler(item1,item2)&#123;</span><br><span class="line">// item1为新值，item2为旧值</span><br><span class="line">&#125;,</span><br><span class="line">deep:true </span><br><span class="line">// 对象中对象属性变化监测需要使用deep:true，多少层内产生变化都可以监测到</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="实际代码"><a href="#实际代码" class="headerlink" title="实际代码"></a>实际代码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">overviewForm</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="attr">name</span>:<span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">watch</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="string">&#x27;overviewForm.name&#x27;</span> (newName) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">this</span>.<span class="title function_">fetchOverviewData</span>(newName);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        methods：&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="comment">//获取车间信息</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">fetchWorkShopData</span>(<span class="params">param</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="title function_">axios</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="attr">headers</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="string">&quot;Access-Control-Allow-Origin&quot;</span>:<span class="string">&quot;*&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="attr">url</span>: <span class="title class_">HTTPUrl</span>+<span class="string">&#x27;reason/queryWorkShopList&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="attr">company_id</span>: param,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="keyword">if</span>(res.<span class="property">status</span>===<span class="number">200</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="variable language_">this</span>.<span class="property">workshopList</span>=res.<span class="property">data</span>.<span class="property">data</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="comment">// this.alarmTypeList=res.data.data.alarmTypeList;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="最终实现结果"><a href="#最终实现结果" class="headerlink" title="最终实现结果"></a>最终实现结果</h4><p><img src="https://gitee.com/lcfsgitee/image-library/raw/master/image-20230821151741296.png" alt="image-20230821151741296"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> element </tag>
            
            <tag> vue </tag>
            
            <tag> 深度监听 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql条件查询</title>
      <link href="/2023/08/20/sql%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2/"/>
      <url>/2023/08/20/sql%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<h4 id="sql条件查询"><a href="#sql条件查询" class="headerlink" title="sql条件查询-"></a>sql条件查询-</h4><h5 id="使用like-实现模糊查询，子查询"><a href="#使用like-实现模糊查询，子查询" class="headerlink" title="使用like,实现模糊查询，子查询"></a>使用like,<strong>实现模糊查询</strong>，子查询</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">            <span class="built_in">MAX</span>( ctime ) <span class="keyword">AS</span> max_ctime</span><br><span class="line">        <span class="keyword">FROM</span></span><br><span class="line">            ( <span class="keyword">SELECT</span> ctime <span class="keyword">FROM</span> alarm_monitor <span class="keyword">WHERE</span> alarm_status <span class="operator">=</span> <span class="string">&#x27;true&#x27;</span> <span class="keyword">AND</span> is_under <span class="keyword">like</span> <span class="string">&#x27;%0&#x27;</span> ) <span class="keyword">as</span> a</span><br></pre></td></tr></table></figure><h5 id="使用自定义值，默认查询所有"><a href="#使用自定义值，默认查询所有" class="headerlink" title="使用自定义值，默认查询所有"></a>使用自定义值，默认查询所有</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="variable">@pos</span><span class="operator">=</span>&quot;&quot;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> (name<span class="operator">=</span><span class="variable">@pos</span> <span class="keyword">or</span> <span class="variable">@pos</span><span class="operator">=</span>&quot;&quot;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 条件查询 </tag>
            
            <tag> 子查询 </tag>
            
            <tag> 模糊查询 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于mysql大小写敏感问题</title>
      <link href="/2023/08/20/%E5%85%B3%E4%BA%8Emysql%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/"/>
      <url>/2023/08/20/%E5%85%B3%E4%BA%8Emysql%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="1-决定大小写是否敏感的参数"><a href="#1-决定大小写是否敏感的参数" class="headerlink" title="1.决定大小写是否敏感的参数"></a>1.决定大小写是否敏感的参数</h4><p>在 <a href="https://cloud.tencent.com/product/cdb?from=10680">MySQL</a> 中，数据库与 data 目录中的目录相对应。数据库中的每个表都对应于数据库目录中的至少一个文件（可能是多个文件，具体取决于存储引擎）。因此，操作系统的大小写是否敏感决定了数据库大小写是否敏感，而 Windows 系统是对大小写不敏感的，Linux 系统对大小写敏感。</p><p>默认情况下，库表名在 Windows 系统下是不区分大小写的，而在 Linux 系统下是区分大小写的。列名，索引名，存储过程、函数及事件名称在任何操作系统下都不区分大小写，列别名也不区分大小写。</p><p>除此之外，MySQL 还提供了 lower_case_table_names 系统变量，该参数会影响表和数据库名称在磁盘上的存储方式以及在 MySQL 中的使用方式，在 Linux 系统，该参数默认为 0 ，在 Windows 系统，默认值为 1 ，在 macOS 系统，默认值为 2 。下面再来看下各个值的具体含义：</p><table><thead><tr><th align="left">Value</th><th align="left">Meaning</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">库表名以创建语句中指定的字母大小写存储在磁盘上，名称比较区分大小写。</td></tr><tr><td align="left">1</td><td align="left">库表名以小写形式存储在磁盘上，名称比较不区分大小写。MySQL 在存储和查找时将所有表名转换为小写。此行为也适用于数据库名称和表别名。</td></tr><tr><td align="left">2</td><td align="left">库表名以创建语句中指定的字母大小写存储在磁盘上，但是 MySQL 在查找时将它们转换为小写。名称比较不区分大小写。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日总结-8.10</title>
      <link href="/2023/08/19/%E6%AF%8F%E6%97%A5%E6%80%BB%E7%BB%93-8-10/"/>
      <url>/2023/08/19/%E6%AF%8F%E6%97%A5%E6%80%BB%E7%BB%93-8-10/</url>
      
        <content type="html"><![CDATA[<h5 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h5><ol><li><p>使用springboot自动注入，没有引用接口，而是直接引用的类，导致在类名修改的时候，要寻找到引用类名的地方，在修改类名</p></li><li><p>不同数据库表的pojo类复用，导致后期在数据库表的数据相差较大时，还需再次定义对应的pojo类，此时大量的逻辑都是针对之前的pojo类操作，导致代码改动较大</p></li><li><p>在编写dao层时，对于方法的通用性考虑不足，<strong>不符合开闭原则</strong>，例如在传参时，固定传参某个对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;PatrolArea&gt; queryFirstAreaByAreaId(PatrolDevice patrolDevice)</span><br></pre></td></tr></table></figure><p>造成如果此时有另一对象同样含有areaid，那么需要再写一个方法去适应这种变化，</p><p><strong>改进方案</strong></p><ol><li><p>将传参类型变为基础类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;PatrolArea&gt; queryFirstAreaByAreaId(String id)</span><br></pre></td></tr></table></figure></li><li><p>或者将传参改为接口，只要实现接口，都可以作为参数被传入，如果实现类中没有查询条件，也就是<strong>areaid</strong>，那么查询就会出错，此时需要在接口中实现赋值方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class PatrolArea implements interface&#123;</span><br><span class="line">   String areaId=‘’；</span><br><span class="line">   void setAreaId(String id);</span><br><span class="line">&#125;</span><br><span class="line">List&lt;PatrolArea&gt; queryFirstAreaByAreaId(interface param)</span><br></pre></td></tr></table></figure></li></ol></li></ol><h5 id="获得的经验"><a href="#获得的经验" class="headerlink" title="获得的经验"></a>获得的经验</h5><ol><li><p>使用hutool自定义线程池，并提交任务以及判断，任务结束时返回响应的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> ExecutorBuilder.create()</span><br><span class="line">                .setCorePoolSize(<span class="number">3</span>)</span><br><span class="line">                .setMaxPoolSize(<span class="number">6</span>)</span><br><span class="line">                .setWorkQueue(<span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">100</span>))</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Future task1=executor.submit(<span class="keyword">new</span> <span class="title class_">InsertRecordTask</span>());</span><br><span class="line">            Future task2=executor.submit(<span class="keyword">new</span> <span class="title class_">InsertItemTask</span>());</span><br><span class="line">            Future task3=executor.submit(<span class="keyword">new</span> <span class="title class_">InsertImageTask</span>());</span><br><span class="line">            <span class="keyword">if</span>(task1.get()==<span class="literal">null</span> &amp;&amp; task2.get() == <span class="literal">null</span> &amp;&amp; task3.get() ==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseDTO</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            executor.shutdown();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseDTO</span>(<span class="string">&quot;线程执行异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseDTO</span>(<span class="string">&quot;线程执行任务失败&quot;</span>);</span><br><span class="line">        </span><br></pre></td></tr></table></figure><p>java提交线程池的两种方式：<strong>execute</strong>和<strong>submit</strong></p><ol><li><p>execute用于提交无返回值的任务，也就是某个class继承了Runnable接口并且重写了run方法的任务。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">static class ThreadTask implements Runnable&#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            System.out.println(&quot;正在执行多线程任务......&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> executor.submit(new Runnable() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure></li><li><p>submit用于提交有返回值的任务，也就是继承了Callable接口并且重写了call方法的任务，最好指定返回类型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">static class CallableTask implements Callable&#123;</span><br><span class="line">        @Override</span><br><span class="line">        public String call() throws Exception &#123;</span><br><span class="line">            return &quot;正在有返回值的多线程任务......&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li><li><p>使用hutool文件工具，接受上传的图片，并保存到本地用ngnix映射的目录方法</p></li><li><p>在对项目运行较重要的逻辑部分，要习惯抛出异常，最后由路由捕捉，统一返回到前端，避免大量的判断逻辑</p></li><li><p>解析前端较复杂的数据时，可针对数据格式指定对应的dto类，使用注解自动解析（@resquestBody注解只能解析一次）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class PatrolRectifiedDTO &#123;</span><br><span class="line"></span><br><span class="line">    public List&lt;PatrolImage&gt; rectifiedImages;</span><br><span class="line"></span><br><span class="line">    public PatrolRecord rectifiedResult;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 每日总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> hutool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口改造多线程</title>
      <link href="/2023/08/19/%E6%8E%A5%E5%8F%A3%E6%94%B9%E9%80%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2023/08/19/%E6%8E%A5%E5%8F%A3%E6%94%B9%E9%80%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h5 id="采用共享变量＋Callable的方式"><a href="#采用共享变量＋Callable的方式" class="headerlink" title="采用共享变量＋Callable的方式"></a>采用共享变量＋Callable的方式</h5><p>需求：将同步代码改成多线程</p><p>原始同步代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  JSONObject resultJson=<span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line"><span class="comment">//查询该用户是否存在该任务</span></span><br><span class="line">   patrolDevice.setHead_people_id_number(userService.getUserDetailAndCheckIdNumber(token));</span><br><span class="line">        List&lt;PatrolDevice&gt; results=patrolDeviceDao.queryDeviceByObjectNoPagination(patrolDevice);</span><br><span class="line">        <span class="keyword">if</span>(results.isEmpty() || results.size()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MissingArgumentException</span>(<span class="string">&quot;本设备不属于当前登录人员的巡检任务&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        PatrolDevice resultDevice=results.get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(resultDevice.getDevice_type()==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MissingArgumentException</span>(<span class="string">&quot;获取巡检任务类型异常，获取检查项失败，请完善巡检任务基础信息&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> interval= TimeUtil.getExpireIntervalByExpireTime(resultDevice.getExpiry_time());</span><br><span class="line">        resultDevice.setExpire_interval(interval);</span><br><span class="line">        List&lt;PatrolCheckItem&gt;resultItems=patrolCheckItemDao.queryCheckItemByTypeName(<span class="keyword">new</span> <span class="title class_">PatrolDeviceType</span>(resultDevice.getDevice_type()));</span><br><span class="line">        <span class="type">AppUser</span> <span class="variable">resultUser</span> <span class="operator">=</span> userService.getUserDetail(token);</span><br><span class="line"></span><br><span class="line">        resultJson.put(<span class="string">&quot;checkItem&quot;</span>,resultItems);</span><br><span class="line">        resultJson.put(<span class="string">&quot;taskDetail&quot;</span>, resultDevice);</span><br><span class="line">        resultJson.put(<span class="string">&quot;userDetail&quot;</span>, resultUser);</span><br><span class="line">        <span class="keyword">return</span> resultJson;</span><br></pre></td></tr></table></figure><p>改进成多线程方式</p><p>首先使用<strong>ExecutorService</strong>线程池固定生成三个线程：</p><ul><li><p>身份验证线程</p></li><li><p>用户详情查询线程</p></li><li><p>任务详情查询功能</p></li></ul><p>但是，后两种线程需要第一个线程的执行结果，且三个线程需要共同将执行结果<strong>put</strong>到结果json类中，<strong>期间用户详情查询线程需要根据身份验证线程的返回结果作补充</strong>。</p><p>采用<strong>Future</strong>父类接受执行结果，利用<strong>get</strong>（）函数阻塞，实现在身份验证线程执行完后，在异步执行后两种线程。自定义有参构造函数，实现参数的接续传递和共享。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> JSONObject <span class="title function_">queryCheckTaskDetailByUserToken</span><span class="params">(String token, PatrolDevice patrolDevice)</span> <span class="keyword">throws</span> MissingArgumentException &#123;</span><br><span class="line">        JSONObject resultJson=<span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Future&lt;PatrolDevice&gt; futureIdentifier = executorService.submit(<span class="keyword">new</span> <span class="title class_">IdentifierTask</span>(patrolDevice,token));</span><br><span class="line">            PatrolDevice resultDevice=futureIdentifier.get();</span><br><span class="line">            Future&lt;List&lt;PatrolCheckItem&gt;&gt; futurePatrolTask = executorService.submit(<span class="keyword">new</span> <span class="title class_">FetchPatrolTask</span>(resultDevice,resultJson));</span><br><span class="line">            Future&lt;AppUser&gt; futureUser = executorService.submit(<span class="keyword">new</span> <span class="title class_">FetchUserDetail</span>(token,resultJson));</span><br><span class="line">            <span class="keyword">if</span>(futurePatrolTask.get()==<span class="literal">null</span> &amp;&amp; futureUser.get()==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> resultJson;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            executorService.shutdown();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MissingArgumentException</span>(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultJson;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程任务类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IdentifierTask</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;PatrolDevice&gt; &#123;</span><br><span class="line">        <span class="keyword">public</span> PatrolDevice patrolDevice;</span><br><span class="line">        <span class="keyword">public</span> String token;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">IdentifierTask</span><span class="params">(PatrolDevice patrolDevice, String token)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.patrolDevice = patrolDevice;</span><br><span class="line">            <span class="built_in">this</span>.token = token;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> PatrolDevice <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            patrolDevice.setHead_people_id_number(userService.getUserDetailAndCheckIdNumber(token));</span><br><span class="line">            List&lt;PatrolDevice&gt; results=patrolDeviceDao.queryDeviceByObjectNoPagination(patrolDevice);</span><br><span class="line">            <span class="keyword">if</span>(results.isEmpty() || results.size()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MissingArgumentException</span>(<span class="string">&quot;本设备不属于当前登录人员的巡检任务&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> results.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">FetchPatrolTask</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;List&lt;PatrolCheckItem&gt;&gt;&#123;</span><br><span class="line">        <span class="keyword">public</span> PatrolDevice  resultDevice;</span><br><span class="line">        <span class="keyword">public</span> JSONObject resultJson;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">FetchPatrolTask</span><span class="params">(PatrolDevice resultDevice, JSONObject resultJson)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.resultDevice = resultDevice;</span><br><span class="line">            <span class="built_in">this</span>.resultJson = resultJson;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> List&lt;PatrolCheckItem&gt; <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="keyword">if</span>(resultDevice.getDevice_type()==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MissingArgumentException</span>(<span class="string">&quot;获取巡检任务类型异常，获取检查项失败，请完善巡检任务基础信息&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">long</span> interval= TimeUtil.getExpireIntervalByExpireTime(resultDevice.getExpiry_time());</span><br><span class="line">            resultDevice.setExpire_interval(interval);</span><br><span class="line">            List&lt;PatrolCheckItem&gt;resultItems=patrolCheckItemDao.queryCheckItemByTypeName(<span class="keyword">new</span> <span class="title class_">PatrolDeviceType</span>(resultDevice.getDevice_type()));</span><br><span class="line">            resultJson.put(<span class="string">&quot;checkItem&quot;</span>,resultItems);</span><br><span class="line">            resultJson.put(<span class="string">&quot;taskDetail&quot;</span>, resultDevice);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">FetchUserDetail</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;AppUser&gt; &#123;</span><br><span class="line">        <span class="keyword">public</span> String token;</span><br><span class="line">        <span class="keyword">public</span> JSONObject resultJson;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">FetchUserDetail</span><span class="params">(String token, JSONObject resultJson)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.token = token;</span><br><span class="line">            <span class="built_in">this</span>.resultJson = resultJson;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> AppUser <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="type">AppUser</span> <span class="variable">resultUser</span> <span class="operator">=</span> userService.getUserDetail(token);</span><br><span class="line">            resultJson.put(<span class="string">&quot;userDetail&quot;</span>, resultUser);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br></pre></td></tr></table></figure><h5 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h5><p>单线程<strong>10000</strong>次请求的压力测试，设定100ms的响应时间为标准：</p><table><thead><tr><th align="center"></th><th align="center">通过</th><th align="center">未通过</th></tr></thead><tbody><tr><td align="center">改进前</td><td align="center">9106次</td><td align="center">896次</td></tr><tr><td align="center">改进后</td><td align="center">9254</td><td align="center">746</td></tr></tbody></table><p>单线程100次压力测试，设定30ms的响应时间为标准</p><table><thead><tr><th align="center"></th><th align="center">通过</th><th align="center">未通过</th></tr></thead><tbody><tr><td align="center">改进前</td><td align="center">53</td><td align="center">47</td></tr><tr><td align="center">改进后</td><td align="center">58</td><td align="center">42</td></tr></tbody></table><p>单线程100次压力测试，设定10ms的响应时间为标准</p><table><thead><tr><th align="center"></th><th align="center">通过</th><th align="center">未通过</th></tr></thead><tbody><tr><td align="center">改进前</td><td align="center">0</td><td align="center">100</td></tr><tr><td align="center">改进后</td><td align="center">2</td><td align="center">98</td></tr></tbody></table><p>测试结果由于现场网络情况较差且不稳定原因，会有偏差，但是综合来看，改进后响应速度还是有提升，特别是在压力较大的情况下，提升较为明显。</p>]]></content>
      
      
      <categories>
          
          <category> 调优记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式锁</title>
      <link href="/2023/08/19/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>/2023/08/19/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h4 id="线程锁"><a href="#线程锁" class="headerlink" title="线程锁"></a>线程锁</h4><p>给方法、代码块加锁，某个方法或代码使用锁，在同一时刻仅有一个线程执行该方法或该代码段。线程锁只在同一JVM中有效果，因为线程锁的实现在根本上是依靠线程之间共享内存实现的，比如Synchronized、Lock等</p><h4 id="进程锁"><a href="#进程锁" class="headerlink" title="进程锁"></a>进程锁</h4><p>控制同一个系统中多个线程访问同一个共享资源，因为程序的独立性，各个进程无法控制其他进程对资源的访问，可以利用操作系统的信号量机制</p><h4 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h4><p>多个进程不在同一个系统中，使用分布式锁控制多个进程对同一资源的访问</p><h5 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h5><ul><li><strong>互斥性</strong>：任意时刻，只能有一个客户端可以获取锁</li><li><strong>安全性</strong>::  锁只能被持有该锁的客户端删除，不能由其它客户端删除</li><li><strong>死锁</strong>: 获取锁的客户端因为某些原因（如down机等）而未能释放锁，其它客户端再也无法获取到该锁。</li><li><strong>容错</strong>：当部分节点（redis节点等）down机时，客户端仍然能够获取锁和释放锁</li></ul><h5 id="实现分布式锁的三种方式"><a href="#实现分布式锁的三种方式" class="headerlink" title="实现分布式锁的三种方式"></a>实现分布式锁的三种方式</h5><ul><li>基于缓存（Redis等）实现分布式锁； </li><li>基于数据库实现分布式锁； </li><li>基于Zookeeper实现分布式锁；</li></ul><h5 id="基于Redis的分布式锁"><a href="#基于Redis的分布式锁" class="headerlink" title="基于Redis的分布式锁"></a>基于Redis的分布式锁</h5><h6 id="利用SETNX和SETEX"><a href="#利用SETNX和SETEX" class="headerlink" title="利用SETNX和SETEX"></a>利用SETNX和SETEX</h6><p>使用key-value的方式，以数据的某个属性作为键，给改代码块或者对象加锁。在进程初次使用改数据时，会先检查键是不是已经被创建（被锁），否则创建键（加锁）。发现数据被锁后，会不断的在设置超时时间的范围内循环请求该数据，直到超出超时时间。</p><p><strong>缺点：</strong></p><ol><li>高并发的情况下，如果两个线程同时进入循环，可能导致加锁失败。</li><li>SETNX 是一个耗时操作，因为它需要判断 Key 是否存在，因为会存在性能问题。</li></ol><p>官方推荐使用Redlock实现分布式锁，更加可靠；</p><h5 id="基于数据库表的分布式锁"><a href="#基于数据库表的分布式锁" class="headerlink" title="基于数据库表的分布式锁"></a>基于数据库表的分布式锁</h5><h6 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h6><p>乐观锁认为不会有人同时修改数据，即不会上锁，只有在最终更新数据的时候判断一下再次期间别人有无修改数据，如果有修改，则放弃操作，否则执行操作。</p><p><strong>实现原理：</strong></p><p>一般通过version来实现，也就是在数据库表创建一个 version 字段，每次更新成功，则 version+1，读取数据时，我们将 version 字段一并读出，每次更新时将会对版本号进行比较，如果一致则执行此操作，否则更新失败！</p><h6 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h6><p>基于InnoDB引擎，使用数据库的排它锁实现，在操作数据时直接把数据锁住，直到操作完成再释放锁，上锁期间其他人不能修改数据。</p><p><strong>排它锁原理：</strong></p><p><strong>for update</strong>是一种行级锁，又叫排它锁。一旦用户对某个行施加了行级加锁，则该用户可以查询也可以更新被加锁的数据行，其它用户只能查询但不能更新被加锁的数据行。行锁永远是<strong>独占方式</strong>锁。只有当出现如下的条件时，才会释放锁：<strong>1、执行提交（COMMIT）语句；2、退出数据库（LOG　OFF）；3、程序停止运行。</strong></p><p><strong>实现原理：</strong></p><p>创建一个数据表用于记录分布式锁（可以区分业务模块），然后在需要使用分布式锁的地方，通过select……for update获取对应业务模块的锁记录，如果获取成功，该记录行被锁定，其他线程将只能等待，当该线程执行结束后，就会释放锁，其他线程就可以获取锁并继续执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lock</span><span class="params">()</span>&#123;</span><br><span class="line">    connection.setAutoCommit(<span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            result = select * from methodLock where method_name=xxx <span class="keyword">for</span> update;</span><br><span class="line">            <span class="keyword">if</span>(result==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以下方法解锁：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">void</span> <span class="title function_">unlock</span>(<span class="params"></span>)&#123;</span><br><span class="line">    connection.<span class="title function_">commit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="基于Zookeeper实现分布式锁"><a href="#基于Zookeeper实现分布式锁" class="headerlink" title="基于Zookeeper实现分布式锁"></a>基于Zookeeper实现分布式锁</h5><p>实现原理为：</p><ol><li>建立一个节点，假如名为 lock 。节点类型为持久节点（Persistent）</li><li>每当进程需要访问共享资源时，会调用分布式锁的 lock() 或 tryLock() 方法获得锁，这个时候会在第一步创建的 lock 节点下建立相应的顺序子节点，节点类型为临时顺序节点（<code>EPHEMERAL_SEQUENTIAL</code>），通过组成特定的名字 name+lock+顺序号。</li><li>在建立子节点后，对 lock 下面的所有以 name 开头的子节点进行排序，判断刚刚建立的子节点顺序号是否是最小的节点，假如是最小节点，则获得该锁对资源进行访问。</li><li>假如不是该节点，就获得该节点的上一顺序节点，并监测该节点是否存在注册监听事件（上一个节点是不是被删除）。同时在这里阻塞。等待监听事件的发生，获得锁控制权。前一个Znode删除的时候，会触发Znode事件，当前节点能监听到删除事件，就是轮到了自己占有锁的时候。第一个通知第二个、第二个通知第三个，击鼓传花似的依次向后，只要上一个节点被删除了，就进行再一次判断，看看自己是不是序号最小的那个节点，如果是，自己就获得锁。</li><li>当调用完共享资源后，调用 unlock() 方法，关闭 ZooKeeper，进而可以引发监听事件，释放该锁。</li></ol>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程导出excel</title>
      <link href="/2023/08/19/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AF%BC%E5%87%BAexcel/"/>
      <url>/2023/08/19/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AF%BC%E5%87%BAexcel/</url>
      
        <content type="html"><![CDATA[<h4 id="线程池的5种状态"><a href="#线程池的5种状态" class="headerlink" title="线程池的5种状态"></a>线程池的5种状态</h4><h5 id="状态分类"><a href="#状态分类" class="headerlink" title="状态分类"></a>状态分类</h5><h6 id="RUNNING"><a href="#RUNNING" class="headerlink" title="RUNNING"></a>RUNNING</h6><p>线程池处在 RUNNING 状态时，能够接收新任务，以及对已添加的任务进行处理。该状态是线程池的初始状态，线程池一旦被创建，就处于 RUNNING 状态</p><h6 id="SHUTDOWN"><a href="#SHUTDOWN" class="headerlink" title="SHUTDOWN"></a>SHUTDOWN</h6><p>线程池处于 SHUTDOWN 状态时，不接收新任务，但能处理等待队列中的任务。线程池在 RUNNING 状态下，调用 shutdown() 方法，会变成 SHUTDOWN 状态。</p><h6 id="STOP"><a href="#STOP" class="headerlink" title="STOP"></a>STOP</h6><p>线程池处于 STOP 状态时，不接收新任务，不再处理等待队列中的任务，并且会中断正在处理的任务线程池在 RUNNING 状态下，调用 shutdownNow() 方法，变为 STOP 状态</p><h6 id="TIDYING"><a href="#TIDYING" class="headerlink" title="TIDYING"></a>TIDYING</h6><p>所有的任务都销毁了，工作线程数量为0，线程池的状态在转换为 TIDYING 状态时，会执行钩子方法 terminated()线程池在 SHUTDOWN 状态时，阻塞队列为空并且线程池中执行的任务也为空时，就会由 SHUTDOWN 状态变为 TIDYING 状态；线程池在 STOP 状态时，线程池中执行的任务为空时，就会由 STOP 状态变为 TIDYING 。</p><h6 id="TERMINATED"><a href="#TERMINATED" class="headerlink" title="TERMINATED"></a>TERMINATED</h6><p>terminated() 方法执行之后，线程池彻底终止，就变成 TERMINATED 状态。</p><p><img src="D:\Typora\pictrue\b2d68600f0dbea2606b1077ff12a04d3.png" alt="b2d68600f0dbea2606b1077ff12a04d3.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> XSSFWorkbook <span class="title function_">createExcel</span><span class="params">(List&lt;DataHistory&gt; list, ArrayList&lt;String&gt; titles)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 创建工作薄对象</span></span><br><span class="line">        <span class="type">XSSFWorkbook</span> <span class="variable">workbook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>();</span><br><span class="line">        <span class="comment">// 创建sheet页</span></span><br><span class="line">        <span class="type">XSSFSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> workbook.createSheet();</span><br><span class="line">        <span class="comment">// 自动换行</span></span><br><span class="line">        <span class="type">XSSFCellStyle</span> <span class="variable">style</span> <span class="operator">=</span> workbook.createCellStyle();</span><br><span class="line">        style.setWrapText(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 创建sheet页的行  表头</span></span><br><span class="line">        <span class="type">XSSFRow</span> <span class="variable">row</span> <span class="operator">=</span> sheet.createRow(<span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">columnIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (String value : titles) &#123;</span><br><span class="line">            <span class="comment">// 创建单元格</span></span><br><span class="line">            <span class="type">XSSFCell</span> <span class="variable">cell</span> <span class="operator">=</span> row.createCell(columnIndex++);</span><br><span class="line">            cell.setCellValue(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//写入每行的数据</span></span><br><span class="line">        <span class="keyword">if</span> (list != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">rowNum</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">//从第一行开始</span></span><br><span class="line">            <span class="keyword">for</span> (DataHistory dataHistory : list) &#123;</span><br><span class="line">                columnIndex = <span class="number">0</span>; <span class="comment">//列数重置为0</span></span><br><span class="line">                <span class="type">XSSFRow</span> <span class="variable">newRow</span> <span class="operator">=</span> sheet.createRow(rowNum++);</span><br><span class="line">                <span class="comment">//创建线程池</span></span><br><span class="line">                <span class="type">ExecutorService</span> <span class="variable">es</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">                </span><br><span class="line">                <span class="type">CountDownLatch</span> <span class="variable">doneSignal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">5</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (String value : titles) &#123;</span><br><span class="line">                        <span class="type">XSSFCell</span> <span class="variable">cell</span> <span class="operator">=</span> newRow.createCell(columnIndex++);</span><br><span class="line">                        es.submit(</span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                                    <span class="meta">@Override</span></span><br><span class="line">                                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                                        cell.setCellValue(getValues(value, dataHistory));</span><br><span class="line">                                        doneSignal.countDown();</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                        );</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//使用CountDownLatch的await方法，等待所有线程完成sheet操作</span></span><br><span class="line">                    doneSignal.await();</span><br><span class="line">                    es.shutdown();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> workbook;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a><code>CountDownLatch</code></h4><p>是一个同步工具类，用来协调多个线程之间的同步，能够使一个线程在等待另外一些线程完成各自工作之后，再继续执行。使用一个计数器进行实现。计数器初始值为线程的数量。当每一个线程完成自己任务后，计数器的值就会减一。当计数器的值为0时，表示所有的线程都已经完成一些任务，然后在CountDownLatch上等待的线程就可以恢复执行接下来的任务</p><h4 id="线程池实现方式"><a href="#线程池实现方式" class="headerlink" title="线程池实现方式"></a>线程池实现方式</h4><h5 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h5><p>Executor 接口是线程池框架中最基础的部分，定义了一个 <code>void execute(Runnable command)</code> 方法，代表提交一个任务，由线程池来执行这个任务。</p><h5 id="ExecutorService"><a href="#ExecutorService" class="headerlink" title="ExecutorService"></a>ExecutorService</h5><p>Executor 下有一个重要子接口 ExecutorService，其中定义了一些可以操作线程池的方法：</p><p>public interface ExecutorService extends Executor {</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关闭线程池，已经提交的任务继续执行，不再接受新的任务</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 尝试停止正在执行的任务，返回等待执行的任务列表。因为停止正在执行的线程使用 Thread.interrupt() 方法， 所以不保证能够完全停止</span></span><br><span class="line">List&lt;Runnable&gt; <span class="title function_">shutdownNow</span><span class="params">()</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 当前线程池是否已经关闭</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isShutdown</span><span class="params">()</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 如果关闭后，所有任务都已经完成，则返回true</span></span><br><span class="line"><span class="comment">// 并且只有先调用 shutdown 或 shutdownNow 才会返回 true</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isTerminated</span><span class="params">()</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 等待请求关闭线程池后，所有的任务完成或者等待超时</span></span><br><span class="line"><span class="comment">// 如果所有的任务都已经完成了，则返回 true，超时的话返回 false</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">awaitTermination</span><span class="params">(<span class="type">long</span> timeout, TimeUnit unit)</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 提交一个 Callable 任务，并返回一个表示任务的挂起结果的 Future，之后可以通过 Future 的 get() 方法来获取任务成功完成后返回的结果</span></span><br><span class="line">&lt;T&gt; Future <span class="title function_">submit</span><span class="params">(Callable&lt;T&gt; task)</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 提交一个 Runnable 任务，因为 Runable 的 run() 方法没有返回值，第二个参数会放到 Future 中作为返回值</span></span><br><span class="line">&lt;T&gt; Future <span class="title function_">submit</span><span class="params">(Runnalbe task, T result)</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 提交一个 Runable 任务，因为没有指定返回值，所以之后在 Future 中获取的返回值为 null</span></span><br><span class="line">Future&lt;?&gt; submit(Runnable task);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 执行所有任务，返回 Future 类型的集合</span></span><br><span class="line">&lt;T&gt; List&lt;Future&lt;T&gt;&gt; <span class="title function_">invokeAll</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 执行所有任务，但设置了超时时间</span></span><br><span class="line">&lt;T&gt; List&lt;Future&lt;T&gt;&gt; <span class="title function_">invokeAll</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks, <span class="type">long</span> timeout, TimeUnit unit)</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 执行所有的任务，只要其中一个执行结束，就可以返回那个任务的结果</span></span><br><span class="line">&lt;T&gt; invokeAny(Collection&lt;? <span class="keyword">extends</span> <span class="title class_">Callable</span>&lt;T&gt;&gt; tasks);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 同上一个方法，设置了超时时间</span></span><br><span class="line">&lt;T&gt; T <span class="title function_">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks, <span class="type">long</span> timeout, TimeUnit unit)</span>;</span><br></pre></td></tr></table></figure><h5 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h5><p> JDK 中线程池的默认实现，实现了线程池中的基本方法，可以直接使用，或者基本它扩展，来实现我们需要的功能,下面这个是 <code>ThreadPoolExecutor</code> 的核心构造函数，其他的构造函数最终都会走到该构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,</span></span><br><span class="line"><span class="params">                         <span class="type">int</span> maximumPoolSize,</span></span><br><span class="line"><span class="params">                         <span class="type">long</span> keepAliveTime,</span></span><br><span class="line"><span class="params">                         TimeUnit unit,</span></span><br><span class="line"><span class="params">                         BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class="line"><span class="params">                         ThreadFactory threadFactory,</span></span><br><span class="line"><span class="params">                         RejectExecutionHandler handler</span></span><br></pre></td></tr></table></figure><h6 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h6><ul><li><code>corePoolSize</code> 是线程池中的<strong>核心线程数</strong>，<code>maxinumPoolSize</code> 是线程池中允许的<strong>最大线程数</strong>，当当前正在运行的线程数小于 <code>corePoolSize</code> 值，新提交任务时，会创建一个新的线程来执行，即使有空闲的线程；当当前正在运行的线程数大于 <code>corePoolSize</code> 值，且小于<code>maximumPoolSize</code> 值，新任务会提交到等待队列中，直到<strong>等待队列</strong>满了，才会创建新的线程执行任务。</li><li><code>keepAliveTime</code>线程允许的最大空闲时间。且默认情况下，只会在超时后，销毁非核心线程。也可以通过调用 <code>allowCoreThreadTimeOut(true)</code> 方法，来将这种策略应用于核心线程</li><li><code>unit</code>,<code>keepAliveTime</code> 的时间单位</li><li><code>workQueue</code> 是用来保存等待被执行任务的阻塞队列，通常和线程池的大小对应调整。</li><li><code>threadFactory</code>创建线程的工厂类，用来创建新线程</li><li><code>handler</code>线程池的拒绝策略,当线程池处于关闭状态，或者阻塞队列满了，而且线程数量已经达到了 <code>maximumPoolSize</code>，再提交任务时，就会执行当前指定的策略</li></ul>]]></content>
      
      
      <categories>
          
          <category> 调优记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
