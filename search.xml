<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>负载均衡</title>
      <link href="/2023/08/21/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>/2023/08/21/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="实现请求负载均衡"><a href="#实现请求负载均衡" class="headerlink" title="实现请求负载均衡"></a>实现请求负载均衡</h3><p><strong>配置多个目标服务器，当一台服务器出现故障时，<code>nginx</code> 能将请求自动转向另一台服务器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    sendfile_max_chunk 100k;  <span class="comment">#每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。</span></span><br><span class="line">    keepalive_timeout 65;  <span class="comment">#连接超时时间，默认为75s，可以在http，server，location块。</span></span><br><span class="line"></span><br><span class="line">    upstream mysvr &#123;   </span><br><span class="line">      server 127.0.0.1:7878 weight=2;</span><br><span class="line">      server 192.168.10.121:3333 backup weight=1;  <span class="comment">#根据权重进行轮询负载均衡</span></span><br><span class="line">    &#125;</span><br><span class="line">    error_page 404 https://www.baidu.com; <span class="comment">#错误页</span></span><br><span class="line">    server &#123;</span><br><span class="line">        keepalive_requests 120; <span class="comment">#单连接请求上限次数。</span></span><br><span class="line">        listen       9090;   <span class="comment">#监听端口</span></span><br><span class="line">        server_name  127.0.0.1;   <span class="comment">#监听地址       </span></span><br><span class="line">        location  ~*^.+$ &#123;       <span class="comment">#请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。</span></span><br><span class="line">           <span class="comment">#root path;  #根目录</span></span><br><span class="line">           <span class="comment">#index vv.txt;  #设置默认页</span></span><br><span class="line">           proxy_pass  http://mysvr;  <span class="comment">#请求转向mysvr 定义的服务器列表</span></span><br><span class="line">           deny 127.0.0.1;  <span class="comment">#拒绝的ip</span></span><br><span class="line">           allow 172.18.5.54; <span class="comment">#允许的ip    </span></span><br><span class="line">         <span class="comment"># expires 设置客户端缓存</span></span><br><span class="line">            <span class="comment">#expires 1h;</span></span><br><span class="line">            index index.php index.html; </span><br><span class="line">            <span class="comment"># 资源重定向，如访问http://shop.devops.com/index.html后会被重写为访问        http://shop.devops.com/index.php，permanent表示永久重定向</span></span><br><span class="line">            rewrite /index.html /index.php permanent;</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 资源重定向，$request_filename为nginx的内置变量，表示资源文件路径</span></span><br><span class="line">            <span class="keyword">if</span> (!-e <span class="variable">$request_filename</span>) &#123;</span><br><span class="line">                rewrite ^(.*)$ /index.php?s=/<span class="variable">$1</span> last;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>当服务器 <code>ocalhost:8080</code> 挂掉时，<code>nginx</code>能将请求自动转向服务器 <code>192.168.101.9:8080</code>。上面还加了一个 <code>weight</code> 属性，此属性表示各服务器被访问到的权重，<code>weight</code> 越高被访问到的几率越高。</strong></p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> 负载均衡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows下静态资源代理</title>
      <link href="/2023/08/21/windows%E4%B8%8B%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E4%BB%A3%E7%90%86/"/>
      <url>/2023/08/21/windows%E4%B8%8B%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="静态资源访问配置"><a href="#静态资源访问配置" class="headerlink" title="静态资源访问配置"></a>静态资源访问配置</h3><p><code>windows下</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        keepalive_requests 120; <span class="comment">#单连接请求上限次数。</span></span><br><span class="line">        listen       9090;   <span class="comment">#监听端口</span></span><br><span class="line">        server_name  127.0.0.1;   <span class="comment">#监听地址       </span></span><br><span class="line">        location  ~*^.+$ &#123;       <span class="comment">#请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。</span></span><br><span class="line">           <span class="comment">#root path;  #根目录</span></span><br><span class="line">           <span class="comment">#index vv.txt;  #设置默认页</span></span><br><span class="line">           proxy_pass  http://mysvr;  <span class="comment">#请求转向mysvr 定义的服务器列表</span></span><br><span class="line">           deny 127.0.0.1;  <span class="comment">#拒绝的ip</span></span><br><span class="line">           allow 172.18.5.54; <span class="comment">#允许的ip    </span></span><br><span class="line">         <span class="comment"># expires 设置客户端缓存</span></span><br><span class="line">            <span class="comment">#expires 1h;</span></span><br><span class="line">            index index.php index.html; </span><br><span class="line">            <span class="comment"># 资源重定向，如访问http://shop.devops.com/index.html后会被重写为访问http://shop.devops.com/index.php，permanent表示永久重定向</span></span><br><span class="line">            rewrite /index.html /index.php permanent;</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 资源重定向，$request_filename为nginx的内置变量，表示资源文件路径</span></span><br><span class="line">            <span class="keyword">if</span> (!-e <span class="variable">$request_filename</span>) &#123;</span><br><span class="line">                rewrite ^(.*)$ /index.php?s=/<span class="variable">$1</span> last;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        location ~ \.(js|css|jpg|png) &#123;</span><br><span class="line">            <span class="comment"># 告诉客户端所有js,css,jpg,png文件都可以缓存1小时，不用重新在服务器下载</span></span><br><span class="line">            expires 1h;</span><br><span class="line">            <span class="comment"># 防盗链实现，所有不是从shop.devops.com跳转过去访问js|css|jpg|png文件的都被拦截，返回404</span></span><br><span class="line">            valid_referers shop.devops.com;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$invalid_referer</span>) &#123;</span><br><span class="line">                <span class="built_in">return</span> 404;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">server &#123;</span><br><span class="line">       listen       9091;</span><br><span class="line">       server_name  localhost;</span><br><span class="line">       </span><br><span class="line">       location /image &#123;</span><br><span class="line">           root   D:\apache-tomcat-10.0.23\webapps\patrol ;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>请求url：<a href="http://localhost:9090/image/a.jpg">http://localhost:9090/image/a.jpg</a></p><p>实际请求地址：D:\apache-tomcat-10.0.23\webapps\patrol\image\a.jpg</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>æ¢反向代理</title>
      <link href="/2023/08/21/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
      <url>/2023/08/21/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="nginx的proxy-pass配置路径，加与不加“-”差异巨大"><a href="#nginx的proxy-pass配置路径，加与不加“-”差异巨大" class="headerlink" title="nginx的proxy_pass配置路径，加与不加“&#x2F;”差异巨大"></a>nginx的proxy_pass配置路径，加与不加“&#x2F;”差异巨大</h2><h3 id="1-1-绝对路径"><a href="#1-1-绝对路径" class="headerlink" title="1.1 绝对路径"></a>1.1 绝对路径</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /proxy &#123;</span><br><span class="line">    proxy_pass http://192.168.137.181:8080/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当访问 <code>http://127.0.0.1/proxy/test/test.txt</code>时，nginx匹配到&#x2F;proxy路径，把请求转发给192.168.137.181:8080服务，实际请求路径为<br> <code>http://10.0.0.1:8080/test/test.txt</code>，nginx会去掉匹配的“&#x2F;proxy”。</p><h3 id="1-2-相对路径"><a href="#1-2-相对路径" class="headerlink" title="1.2 相对路径"></a>1.2 相对路径</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /proxy &#123;</span><br><span class="line">    proxy_pass http://10.0.0.1:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当访问 <code>http://127.0.0.1/proxy/test/test.txt</code>时，nginx匹配到&#x2F;proxy路径，把请求转发给<code>192.168.137.181:8080</code>服务，实际请求代理服务器的路径为<br> <code>http://192.168.137.181:8080/proxy/test/test.txt</code>， 此时nginx会把匹配的“&#x2F;proxy”也代理给代理服务器。</p><h3 id="1-3-代理路径添加uri"><a href="#1-3-代理路径添加uri" class="headerlink" title="1.3 代理路径添加uri"></a>1.3 代理路径添加uri</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /proxy &#123;</span><br><span class="line">    proxy_pass http://10.0.0.1:8080/static01/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当访问 <code>http://127.0.0.1/proxy/test/test.txt</code>时，nginx匹配到&#x2F;proxy路径，把请求转发给192.168.137.181:8080服务，实际请求代理服务器的路径为<br> <code>http://10.0.0.1:8080/static01/test/test.txt</code>。<br> 实际上2、3是一种情况，即加了“&#x2F;”就会去掉匹配前缀。这就引出了下一个问题。</p><h2 id="2-nginx反向代理去掉前缀的另一种方法"><a href="#2-nginx反向代理去掉前缀的另一种方法" class="headerlink" title="2.nginx反向代理去掉前缀的另一种方法"></a>2.nginx反向代理去掉前缀的另一种方法</h2><p>我们使用nginx的很多时候都需要去掉前缀。前缀只是为了让nginx用来区分转发到哪个服务器，不是实际URL的一部分。例如我们需要代理访问<code>http://10.0.0.1:8080/test/test.txt</code>，如果不去掉前缀，nginx代理访问的就是<code>http://192.168.137.181:8080/proxy/test/test.txt</code>，那么这时候就需要改变代理服务器原来写好的url，这是不合理的。<br> 一个种方案是上面提到的proxy_pass后面加根路径“&#x2F;”。另一种方案是使用正则重写url。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /resource &#123;</span><br><span class="line">    rewrite  ^/resource/?(.*)$ /$1 break;</span><br><span class="line">    proxy_pass http://192.168.137.189:8082/; # 转发地址</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite <span class="string">&quot;^/resource/(.)$&quot;</span> /<span class="variable">$1</span> <span class="built_in">break</span></span><br></pre></td></tr></table></figure><p>就是路径重写，其中：</p><ul><li><code>&quot;^/resource/(.)$&quot;</code>：匹配路径的正则表达式，用了分组语法就是<code>*(.)*</code>，把&#x2F;resource&#x2F;以后的所有部分当做1组</li><li><code>/$1</code>：重写的目标路径，这里用$1引用前面正则表达式匹配到的分组（组编号从1开始，也就是api），即&#x2F;resource&#x2F;后面的所有。这样新的路径就是除去&#x2F;resource&#x2F;以外的所有，就达到了去除&#x2F;resource前缀的目的；</li><li>break：指令，重写路径结束后。</li></ul><h3 id="重启nginx、测试语法正确性"><a href="#重启nginx、测试语法正确性" class="headerlink" title="重启nginx、测试语法正确性"></a>重启nginx、测试语法正确性</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br><span class="line">nginx -t</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> 反向代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BCryptPasswordEncoder使用</title>
      <link href="/2023/08/21/BCryptPasswordEncoder%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/08/21/BCryptPasswordEncoder%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="BCryptPasswordEncoder使用"><a href="#BCryptPasswordEncoder使用" class="headerlink" title="BCryptPasswordEncoder使用"></a>BCryptPasswordEncoder使用</h4><p> 在 Spring Security 中有一个加密的类 BCryptPasswordEncoder ，它的使用非常的简单而且也比较有趣。让我们来看看它的使用。</p><p> 首先创建一个 SpringBoot 的项目，在创建项目的时候添加 Spring Security 的依赖。然后我们添加一个测试类，写如下的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">final private <span class="title class_">String</span> password = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Test</span></span><br><span class="line">public <span class="keyword">void</span> <span class="title class_">TestCrypt</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title class_">BCryptPasswordEncoder</span> bCryptPasswordEncoder = <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line"></span><br><span class="line">    <span class="title class_">String</span> encode1 = bCryptPasswordEncoder.<span class="title function_">encode</span>(password);</span><br><span class="line">    <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;encode1:&quot;</span> + encode1);</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">String</span> encode2 = bCryptPasswordEncoder.<span class="title function_">encode</span>(password);</span><br><span class="line">    <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;encode2:&quot;</span> + encode2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中，首先实例化了一个 BCryptPasswordEncoder 类，然后使用该类的 encode 方法对同一个明文字符串进行了加密，并输出。运行上面的代码，查看输出。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">encode1</span>:$2a$10$SqbQb0pD3KYrH7ZVTWdRZOhPAelQqa..<span class="property">lUnysXoWag6RvMkyC5SE6</span></span><br><span class="line"><span class="attr">encode2</span>:$2a$10$0sjBLlwrrch2EjgYls197e9dGRCMbQ7KUIt/<span class="title class_">ODPTSU0W</span>.<span class="property">mEPaGkfG</span></span><br></pre></td></tr></table></figure><p> 从上面的输出可以看出，同一个明文加密两次，却输出了不同的结果。是不是很神奇？但是这样有一个问题，如果使用 BCryptPasswordEncoder 去加密登录密码的话，还能进行验证么？当然是可以验证的。验证的话，使用的是 BCryptPasswordEncoder 的 matches 方法，代码如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">final private <span class="title class_">String</span> password = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Test</span></span><br><span class="line">public <span class="keyword">void</span> <span class="title class_">TestCrypt</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title class_">BCryptPasswordEncoder</span> bCryptPasswordEncoder = <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line"></span><br><span class="line">    <span class="title class_">String</span> encode1 = bCryptPasswordEncoder.<span class="title function_">encode</span>(password);</span><br><span class="line">    <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;encode1:&quot;</span> + encode1);</span><br><span class="line"></span><br><span class="line">    boolean matches1 = bCryptPasswordEncoder.<span class="title function_">matches</span>(password, encode1);</span><br><span class="line">    <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;matches1:&quot;</span> + matches1);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">String</span> encode2 = bCryptPasswordEncoder.<span class="title function_">encode</span>(password);</span><br><span class="line">    <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;encode2:&quot;</span> + encode2);</span><br><span class="line"></span><br><span class="line">    boolean matches2 = bCryptPasswordEncoder.<span class="title function_">matches</span>(password, encode2);</span><br><span class="line">    <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;matches2:&quot;</span> + matches2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复制</p><p>使用 matches 方法可以对加密前和加密后是否匹配进行验证。输出如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">encode1</span>:$2a$10$qxU.<span class="property">rFLeTmZg47FyqJlZwu</span>.<span class="property">QNX9RpEvqBUJiwUvUE0p4ENR</span>.<span class="property">EndfS</span></span><br><span class="line"><span class="attr">matches1</span>:<span class="literal">true</span></span><br><span class="line"><span class="attr">encode2</span>:$2a$10$NyGEOsQ1Hxv2gvYRmaEENueORlVDtSqoB/fHN76KkvQDeg7fbTy22</span><br><span class="line"><span class="attr">matches2</span>:<span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BCryptPasswordEncoder </tag>
            
            <tag> Spring Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JwT的工作流程</title>
      <link href="/2023/08/21/JwT%E7%9A%84%E7%AE%80%E5%8D%95%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/"/>
      <url>/2023/08/21/JwT%E7%9A%84%E7%AE%80%E5%8D%95%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是JWT？"><a href="#什么是JWT？" class="headerlink" title="什么是JWT？"></a>什么是JWT？</h3><p>JWT是Json Web Token的缩写。它是基于 RFC 7519 标准定义的一种可以安全传输的 小巧 和 自包含 的JSON对象。由于数据是使用数字签名的，所以是可信任的和安全的。JWT可以使用HMAC算法对secret进行加密或者使用RSA的公钥私钥对来进行签名。</p><h3 id="JWT的工作流程"><a href="#JWT的工作流程" class="headerlink" title="JWT的工作流程"></a>JWT的工作流程</h3><p>下面是一个JWT的工作流程图。模拟一下实际的流程是这样的（假设受保护的API在&#x2F;protected中）</p><ul><li>用户导航到登录页，输入用户名、密码，进行登录</li><li>服务器验证登录鉴权，如果改用户合法，根据用户的信息和服务器的规则生成JWT Token</li><li>服务器将该token以json形式返回（不一定要json形式，这里说的是一种常见的做法）</li><li>用户得到token，存在localStorage、cookie或其它数据存储形式中。</li><li>以后用户请求&#x2F;protected中的API时，在请求的header中加入Authorization: Bearer xxxx(token)。此处注意token之前有一个7字符长度的 Bearer</li><li>服务器端对此token进行检验，如果合法就解析其中内容，根据其拥有的权限和自己的业务逻辑给出对应的响应结果。</li><li>用户取得结果</li></ul><p><img src="https://img1.imgtp.com/2023/08/21/VkHrEFRX.png" alt="image-20221129144255035"></p><h3 id="JWT的主要应用场景"><a href="#JWT的主要应用场景" class="headerlink" title="JWT的主要应用场景"></a>JWT的主要应用场景</h3><p>身份认证在这种场景下，一旦用户完成了登陆，在接下来的每个请求中包含JWT，可以用来验证用户身份以及对路由，服务和资源的访问权限进行验证。由于它的开销非常小，可以轻松的在不同域名的系统中传递，所有目前在单点登录（SSO）中比较广泛的使用了该技术。 信息交换在通信的双方之间使用JWT对数据进行编码是一种非常安全的方式，由于它的信息是经过签名的，可以确保发送者发送的信息是没有经过伪造的。</p><p>优点<br>1.简洁(Compact): 可以通过URL，POST参数或者在HTTP header发送，因为数据量小，传输速度也很快<br>2.自包含(Self-contained)：负载中包含了所有用户所需要的信息，避免了多次查询数据库<br>3.因为Token是以JSON加密的形式保存在客户端的，所以JWT是跨语言的，原则上任何web形式都支持。<br>4.不需要在服务端保存会话信息，特别适用于分布式微服务。</p><h3 id="JWT的结构"><a href="#JWT的结构" class="headerlink" title="JWT的结构"></a>JWT的结构</h3><p>JWT是由三段信息构成的，将这三段信息文本用.链接一起就构成了JWT字符串。<br>就像这样:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span><br></pre></td></tr></table></figure><p>JWT包含了三部分：<br>Header 头部(标题包含了令牌的元数据，并且包含签名和&#x2F;或加密算法的类型)<br>Payload 负载 (类似于飞机上承载的物品)<br>Signature 签名&#x2F;签证</p><p>Header<br>JWT的头部承载两部分信息：token类型和采用的加密算法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;,</span><br><span class="line">   &quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>声明类型:这里是jwt<br>声明加密的算法:通常直接使用 HMAC SHA256</p><p>加密算法是单向函数散列算法，常见的有MD5 、SHA 、HAMC 。<br>MD5(message-digest algorithm 5) （信息-摘要算法）缩写，广泛用于加密和解密技术，常用于文件校验。校验？不管文件多大，经过MD5后都能生成唯一的MD5值<br>SHA (Secure Hash Algorithm，安全散列算法），数字签名等密码学应用中重要的工具，安全性高于MD5<br>HMAC (Hash Message Authentication Code)，散列消息鉴别码，基于密钥的Hash算法的认证协议。用公开函数和密钥产生一个固定长度的值作为认证标识，用这个标识鉴别消息的完整性。常用于接口签名验证</p><p>Payload<br>载荷就是存放有效信息的地方。<br>有效信息包含三个部分<br>1.标准中注册的声明<br>2.公共的声明<br>3.私有的声明</p><p>标准中注册的声明 (建议但不强制使用) ：<br>iss: jwt签发者<br>sub: 面向的用户(jwt所面向的用户)<br>aud: 接收jwt的一方<br>exp: 过期时间戳(jwt的过期时间，这个过期时间必须要大于签发时间)<br>nbf: 定义在什么时间之前，该jwt都是不可用的.<br>iat: jwt的签发时间<br>jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</p><p>公共的声明 ：<br>公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密.</p><p>私有的声明 ：<br>私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。</p><p>Signature<br>jwt的第三部分是一个签证信息，这个签证信息由三部分组成：<br>header (base64后的)<br>payload (base64后的)<br>secret<br>这个部分需要base64加密后的header和base64加密后的payload使用.连接组成的字符串，然后通过header中声明的加密方式进行加盐secret组合加密，然后就构成了jwt的第三部分。<br>密钥secret是保存在服务端的，服务端会根据这个密钥进行生成token和进行验证，所以需要保护好。</p><h3 id="SpringBoot-Spring-Security和JWT的集成实现token验证"><a href="#SpringBoot-Spring-Security和JWT的集成实现token验证" class="headerlink" title="SpringBoot+Spring Security和JWT的集成实现token验证"></a>SpringBoot+Spring Security和JWT的集成实现token验证</h3><h4 id="引入JWT依赖"><a href="#引入JWT依赖" class="headerlink" title="引入JWT依赖"></a>引入JWT依赖</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jjwt&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.9.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="JWT的生成和解析工具类"><a href="#JWT的生成和解析工具类" class="headerlink" title="JWT的生成和解析工具类"></a>JWT的生成和解析工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.jsonwebtoken.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: xxm</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/5/28 15:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**过期时间---24 hour*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">EXPIRATION_TIME</span> <span class="operator">=</span> <span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>;</span><br><span class="line">    <span class="comment">/**自己设定的秘钥*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SECRET</span> <span class="operator">=</span> <span class="string">&quot;023bdc63c3c5a4587*9ee6581508b9d03ad39a74fc0c9a9cce604743367c9646b&quot;</span>;</span><br><span class="line">    <span class="comment">/**前缀*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TOKEN_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;Bearer &quot;</span>;</span><br><span class="line">    <span class="comment">/**表头授权*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">AUTHORIZATION</span> <span class="operator">=</span> <span class="string">&quot;Authorization&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span>: xxm</span></span><br><span class="line"><span class="comment">     * 功能描述:创建Token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>: 2020/5/28 16:09</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>: </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateToken</span><span class="params">(String userName)</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line">        <span class="comment">// 设置签发时间</span></span><br><span class="line">        calendar.setTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="comment">// 设置过期时间</span></span><br><span class="line">        <span class="comment">// 添加秒钟</span></span><br><span class="line">        calendar.add(Calendar.SECOND, EXPIRATION_TIME);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">time</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//you can put any data in the map</span></span><br><span class="line">        map.put(<span class="string">&quot;userName&quot;</span>, userName);</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                .setClaims(map)</span><br><span class="line">                <span class="comment">//签发时间</span></span><br><span class="line">                .setIssuedAt(now)</span><br><span class="line">                <span class="comment">//过期时间</span></span><br><span class="line">                .setExpiration(time)</span><br><span class="line">                .signWith(SignatureAlgorithm.HS256, SECRET)</span><br><span class="line">                .compact();</span><br><span class="line">        <span class="comment">//jwt前面一般都会加Bearer</span></span><br><span class="line">        <span class="keyword">return</span> TOKEN_PREFIX + jwt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span>: xxm</span></span><br><span class="line"><span class="comment">     * 功能描述: 解密Token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>: 2020/5/28 16:18</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>: </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">validateToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// parse the token.</span></span><br><span class="line">            Map&lt;String, Object&gt; body = Jwts.parser()</span><br><span class="line">                    .setSigningKey(SECRET)</span><br><span class="line">                    .parseClaimsJws(token.replace(TOKEN_PREFIX, <span class="string">&quot;&quot;</span>))</span><br><span class="line">                    .getBody();</span><br><span class="line">            <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> body.get(<span class="string">&quot;userName&quot;</span>).toString();</span><br><span class="line">            <span class="keyword">return</span> userName;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ExpiredJwtException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedJwtException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedJwtException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SignatureException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Spring-Security配置"><a href="#Spring-Security配置" class="headerlink" title="Spring Security配置"></a>Spring Security配置</h4><p>Spring Security是一个基于Spring的通用安全框架，里面内容太多了，本文的主要目的也不是展开讲这个框架，而是如何利用Spring Security和JWT一起来完成API保护。所以关于Spring Secruity的基础内容或展开内容，请自行去官网学习（<a href="http://projects.spring.io/spring-security/">官网</a>）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: xxm</span></span><br><span class="line"><span class="comment"> * 功能描述: SpringSecurity的配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/5/28 15:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(securedEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要放行的URL</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] AUTH_WHITELIST = &#123;</span><br><span class="line">            <span class="string">&quot;/user/login&quot;</span></span><br><span class="line">            <span class="comment">// other public endpoints of your API may be appended to this array</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置请求拦截</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.cors().and()</span><br><span class="line">                <span class="comment">//由于使用的是JWT，我们这里不需要csrf</span></span><br><span class="line">                .csrf().disable()</span><br><span class="line">                <span class="comment">//基于token，所以不需要session</span></span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">//可以匿名访问的链接</span></span><br><span class="line">                .antMatchers(AUTH_WHITELIST).permitAll()</span><br><span class="line">                <span class="comment">//其他所有请求需要身份认证</span></span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line"></span><br><span class="line">                .and()</span><br><span class="line">                <span class="comment">//.addFilter(new JWTLoginFilter(authenticationManager()))</span></span><br><span class="line">                .addFilter(<span class="keyword">new</span> <span class="title class_">JWTAuthenticationFilter</span>(authenticationManager()));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这是标准的SpringSecurity配置内容，就不在详细说明。注意其中的</p><p>.addFilter(new JwtAuthenticationFilter(authenticationManager()))</p><p>这行，将我们定义的JWT方法加入SpringSecurity的处理流程中。</p><p>重点就是配置请求拦截，由于我做的是一个接口服务，所以暂时除了登录验证，其他接口链接全部都要拦截，通过JWTAuthenticationFilter 过滤器来实现token的验证</p><h4 id="登录生成token"><a href="#登录生成token" class="headerlink" title="登录生成token"></a>登录生成token</h4><p>验证用户名密码正确后，生成一个token，并将token返回给客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/login&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toLogin</span><span class="params">(SysUser user)</span> &#123;</span><br><span class="line">        JSONObject json=<span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        <span class="type">BCryptPasswordEncoder</span> <span class="variable">bCryptPasswordEncoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">SysUser</span> <span class="variable">user1</span> <span class="operator">=</span> userControllerClient.getUserInfoByLoginName(user.getUsername());</span><br><span class="line">            <span class="keyword">if</span> (user1!=<span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">dbPassWord</span> <span class="operator">=</span> user1.getPassword();</span><br><span class="line">                <span class="keyword">if</span> (bCryptPasswordEncoder.matches(user.getPassword(),dbPassWord)) &#123;</span><br><span class="line">                    <span class="comment">//创建token</span></span><br><span class="line"></span><br><span class="line">                    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JwtUtil.generateToken(user.getUsername());</span><br><span class="line">                    json.put(<span class="string">&quot;success&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">                    json.put(<span class="string">&quot;code&quot;</span>, <span class="number">1</span>);</span><br><span class="line">                    <span class="comment">//json.put(&quot;result&quot;, user1);</span></span><br><span class="line">                    json.put(<span class="string">&quot;time&quot;</span>, DateUtil.dateToString(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">                    json.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;登陆成功&quot;</span>);</span><br><span class="line">                    json.put(JwtUtil.AUTHORIZATION,token);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    json.put(<span class="string">&quot;success&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">                    json.put(<span class="string">&quot;code&quot;</span>, -<span class="number">1</span>);</span><br><span class="line">                    json.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;登陆失败,密码错误&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                json.put(<span class="string">&quot;success&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">                json.put(<span class="string">&quot;code&quot;</span>, <span class="number">0</span>);</span><br><span class="line">                json.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;无此用户信息&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            json.put(<span class="string">&quot;code&quot;</span>, -<span class="number">2</span>);</span><br><span class="line">            json.put(<span class="string">&quot;success&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            json.put(<span class="string">&quot;message&quot;</span>, e.getMessage());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(json);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>授权验证</p><p>用户一旦登录成功后，会拿到token，后续的请求都会带着这个token，服务端会验证token的合法性。</p><p>创建<code>JWTAuthenticationFilter</code>类，我们在这个类中实现token的校验功能。</p><h4 id="token的校验"><a href="#token的校验" class="headerlink" title="token的校验"></a>token的校验</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * token的校验</span></span><br><span class="line"><span class="comment"> * 该类继承自BasicAuthenticationFilter，在doFilterInternal方法中，</span></span><br><span class="line"><span class="comment"> * 从http头的Authorization 项读取token数据，然后用Jwts包提供的方法校验token的合法性。</span></span><br><span class="line"><span class="comment"> * 如果校验通过，就认为这是一个取得授权的合法请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xxm</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JWTAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title class_">BasicAuthenticationFilter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(<span class="built_in">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JWTAuthenticationFilter</span><span class="params">(AuthenticationManager authenticationManager)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(authenticationManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        <span class="type">String</span> <span class="variable">header</span> <span class="operator">=</span> request.getHeader(JwtUtil.AUTHORIZATION);</span><br><span class="line"></span><br><span class="line">        JSONObject json=<span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        <span class="comment">//跳过不需要验证的路径</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> != SpringSecurityConfig.AUTH_WHITELIST&amp;&amp;Arrays.asList(SpringSecurityConfig.AUTH_WHITELIST).contains(url))&#123;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(header) || !header.startsWith(JwtUtil.TOKEN_PREFIX)) &#123;</span><br><span class="line">            </span><br><span class="line">            json.put(<span class="string">&quot;codeCheck&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            json.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Token为空&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            response.getWriter().write(JSON.toJSONString(json));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authentication</span> <span class="operator">=</span> getAuthentication(request,response);</span><br><span class="line"></span><br><span class="line">            SecurityContextHolder.getContext().setAuthentication(authentication);</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (ExpiredJwtException e) &#123;</span><br><span class="line">            <span class="comment">//json.put(&quot;status&quot;, &quot;-2&quot;);</span></span><br><span class="line">            json.put(<span class="string">&quot;codeCheck&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            json.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Token已过期&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            response.getWriter().write(JSON.toJSONString(json));</span><br><span class="line">            logger.error(<span class="string">&quot;Token已过期: &#123;&#125; &quot;</span> + e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedJwtException e) &#123;</span><br><span class="line">            <span class="comment">//json.put(&quot;status&quot;, &quot;-3&quot;);</span></span><br><span class="line">            json.put(<span class="string">&quot;codeCheck&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            json.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Token格式错误&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            response.getWriter().write(JSON.toJSONString(json));</span><br><span class="line">            logger.error(<span class="string">&quot;Token格式错误: &#123;&#125; &quot;</span> + e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedJwtException e) &#123;</span><br><span class="line">            <span class="comment">//json.put(&quot;status&quot;, &quot;-4&quot;);</span></span><br><span class="line">            json.put(<span class="string">&quot;codeCheck&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            json.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Token没有被正确构造&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            response.getWriter().write(JSON.toJSONString(json));</span><br><span class="line">            logger.error(<span class="string">&quot;Token没有被正确构造: &#123;&#125; &quot;</span> + e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SignatureException e) &#123;</span><br><span class="line">            <span class="comment">//json.put(&quot;status&quot;, &quot;-5&quot;);</span></span><br><span class="line">            json.put(<span class="string">&quot;codeCheck&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            json.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Token签名失败&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            response.getWriter().write(JSON.toJSONString(json));</span><br><span class="line">            logger.error(<span class="string">&quot;签名失败: &#123;&#125; &quot;</span> + e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            <span class="comment">//json.put(&quot;status&quot;, &quot;-6&quot;);</span></span><br><span class="line">            json.put(<span class="string">&quot;codeCheck&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            json.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Token非法参数异常&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            response.getWriter().write(JSON.toJSONString(json));</span><br><span class="line">            logger.error(<span class="string">&quot;非法参数异常: &#123;&#125; &quot;</span> + e);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="comment">//json.put(&quot;status&quot;, &quot;-9&quot;);</span></span><br><span class="line">            json.put(<span class="string">&quot;codeCheck&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            json.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Invalid Token&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            response.getWriter().write(JSON.toJSONString(json));</span><br><span class="line">            logger.error(<span class="string">&quot;Invalid Token &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UsernamePasswordAuthenticationToken <span class="title function_">getAuthentication</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span>  &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(JwtUtil.AUTHORIZATION);</span><br><span class="line">        <span class="keyword">if</span> (token != <span class="literal">null</span>) &#123;</span><br><span class="line">            String userName=<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 解密Token</span></span><br><span class="line">                userName = JwtUtil.validateToken(token);</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isNotBlank(userName)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(userName, <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (ExpiredJwtException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">                <span class="comment">//throw new TokenException(&quot;Token已过期&quot;);</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedJwtException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">                <span class="comment">//throw new TokenException(&quot;Token格式错误&quot;);</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (MalformedJwtException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">                <span class="comment">//throw new TokenException(&quot;Token没有被正确构造&quot;);</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SignatureException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">                <span class="comment">//throw new TokenException(&quot;签名失败&quot;);</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">                <span class="comment">//throw new TokenException(&quot;非法参数异常&quot;);</span></span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">                <span class="comment">//throw new IllegalStateException(&quot;Invalid Token. &quot;+e.getMessage());</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该类继承自BasicAuthenticationFilter，在doFilterInternal方法中，从http头的Authorization 项读取token数据，然后用Jwts包提供的方法校验token的合法性。如果校验通过，就认为这是一个取得授权的合法请求。<br>这其中也包括了，token验证异常处理的返回信息</p>]]></content>
      
      
      <categories>
          
          <category> java进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+typra+picgo+gitee搭建博客写作环境</title>
      <link href="/2023/08/21/hexo-typra-picgo-gitee%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%86%99%E4%BD%9C%E7%8E%AF%E5%A2%83/"/>
      <url>/2023/08/21/hexo-typra-picgo-gitee%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%86%99%E4%BD%9C%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>博客使用hexo，部署在github page，Typora支持markdown非常棒，但是图片之类的无法直接上传到云端，因为它的图片是本地的，这几天看到网上有介绍Typora设置免费的图床（gitee），而且图片粘贴上去，直接自动上传到图床生成链接，这样将<code>md</code>文件发给别人，再也不用担心图片无法正常显示的问题了。设置好之后，写一篇教程，记录一下。</p><h4 id="安装下载PicGo"><a href="#安装下载PicGo" class="headerlink" title="安装下载PicGo"></a>安装下载PicGo</h4><p>山东大学镜像站 <a href="https://mirrors.sdu.edu.cn/github-release/Molunerfinn_PicGo/%EF%BC%8C%E9%80%89%E6%8B%A9%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD">https://mirrors.sdu.edu.cn/github-release/Molunerfinn_PicGo/，选择最新版本下载</a></p><p><img src="https://gitee.com/lcfsgitee/image-library/raw/master/image-20230821151540523.png" alt="image-20230821151540523"></p><h4 id="新建gitee仓库-生成令牌"><a href="#新建gitee仓库-生成令牌" class="headerlink" title="新建gitee仓库-生成令牌"></a>新建gitee仓库-生成令牌</h4><p>新仓库要初始化readme！！！</p><p><img src="https://gitee.com/lcfsgitee/image-library/raw/master/image-20230821151620466.png" alt="image-20230821151620466"></p><h5 id="在PicGo设置图床参数"><a href="#在PicGo设置图床参数" class="headerlink" title="在PicGo设置图床参数"></a>在PicGo设置图床参数</h5><p><code>repo：用户名/网址仓库名</code>,并设置为默认图库</p><p><img src="https://gitee.com/lcfsgitee/image-library/raw/master/image-20230821151639633.png" alt="image-20230821151639633"></p><h4 id="设置typra"><a href="#设置typra" class="headerlink" title="设置typra"></a>设置typra</h4><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://gitee.com/lcfsgitee/image-library/raw/master/image-20230821151701055.png" alt="image-20230821151701055"></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo new post <span class="string">&quot;xxx&quot;</span></span><br><span class="line">hexo c</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> gitee </tag>
            
            <tag> PicGo </tag>
            
            <tag> Typra </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态监听搜索实现</title>
      <link href="/2023/08/21/%E5%8A%A8%E6%80%81%E7%9B%91%E5%90%AC%E6%90%9C%E7%B4%A2%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/08/21/%E5%8A%A8%E6%80%81%E7%9B%91%E5%90%AC%E6%90%9C%E7%B4%A2%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="需求是怎样的"><a href="#需求是怎样的" class="headerlink" title="需求是怎样的"></a>需求是怎样的</h3><p>因为数据条数过多，用户要求新增搜索功能</p><p><img src="https://gitee.com/lcfsgitee/image-library/raw/master/image-20230821151723985.png" alt="image-20230821151723985"></p><h3 id="实际如何做"><a href="#实际如何做" class="headerlink" title="实际如何做"></a>实际如何做</h3><p>面板头部头部空间有限，再加之考虑美观性，决定通过<strong>动态监听搜索框</strong>内所输入的数据，展示匹配结果。因为监听变量位于对象内，故采用<strong>深度监听</strong>。</p><h4 id="两种监听方式"><a href="#两种监听方式" class="headerlink" title="两种监听方式"></a>两种监听方式</h4><h5 id="普通监听"><a href="#普通监听" class="headerlink" title="普通监听"></a>普通监听</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">data()&#123;</span><br><span class="line">variable:null,</span><br><span class="line">&#125;,</span><br><span class="line">watch:&#123;</span><br><span class="line">// 此处监听variable变量，当期有变化时执行</span><br><span class="line">variable(item1,item2)&#123;</span><br><span class="line">// item1为新值，item2为旧值</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="深度监听（变量在对象内）"><a href="#深度监听（变量在对象内）" class="headerlink" title="深度监听（变量在对象内）"></a>深度监听（变量在对象内）</h5><h6 id="一个变量"><a href="#一个变量" class="headerlink" title="一个变量"></a>一个变量</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">data()&#123;</span><br><span class="line">obj:&#123;</span><br><span class="line">a:&#x27;&#x27;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">watch:&#123;</span><br><span class="line">// 此处监听obj属性a值变量</span><br><span class="line">&#x27;obj.a&#x27;(item1,item2)&#123;</span><br><span class="line">// item1为新值，item2为旧值</span><br><span class="line">&#125;,</span><br><span class="line">deep:true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h6 id="多个变量"><a href="#多个变量" class="headerlink" title="多个变量"></a>多个变量</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">data()&#123;</span><br><span class="line">obj:&#123;</span><br><span class="line">a:&#x27;&#x27;,</span><br><span class="line">b:&#x27;&#x27;,</span><br><span class="line">c:&#x27;&#x27;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">watch:&#123;</span><br><span class="line">obj:&#123;</span><br><span class="line">// 此处监听obj属性a值变量</span><br><span class="line">handler(item1,item2)&#123;</span><br><span class="line">// item1为新值，item2为旧值</span><br><span class="line">&#125;,</span><br><span class="line">deep:true </span><br><span class="line">// 对象中对象属性变化监测需要使用deep:true，多少层内产生变化都可以监测到</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="实际代码"><a href="#实际代码" class="headerlink" title="实际代码"></a>实际代码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">overviewForm</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="attr">name</span>:<span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">watch</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="string">&#x27;overviewForm.name&#x27;</span> (newName) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">this</span>.<span class="title function_">fetchOverviewData</span>(newName);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        methods：&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="comment">//获取车间信息</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">fetchWorkShopData</span>(<span class="params">param</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="title function_">axios</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="attr">headers</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="string">&quot;Access-Control-Allow-Origin&quot;</span>:<span class="string">&quot;*&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="attr">url</span>: <span class="title class_">HTTPUrl</span>+<span class="string">&#x27;reason/queryWorkShopList&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="attr">company_id</span>: param,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="keyword">if</span>(res.<span class="property">status</span>===<span class="number">200</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="variable language_">this</span>.<span class="property">workshopList</span>=res.<span class="property">data</span>.<span class="property">data</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                            <span class="comment">// this.alarmTypeList=res.data.data.alarmTypeList;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="最终实现结果"><a href="#最终实现结果" class="headerlink" title="最终实现结果"></a>最终实现结果</h4><p><img src="https://gitee.com/lcfsgitee/image-library/raw/master/image-20230821151741296.png" alt="image-20230821151741296"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> element </tag>
            
            <tag> 深度监听 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql条件查询</title>
      <link href="/2023/08/20/sql%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2/"/>
      <url>/2023/08/20/sql%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<h4 id="sql条件查询"><a href="#sql条件查询" class="headerlink" title="sql条件查询-"></a>sql条件查询-</h4><h5 id="使用like-实现模糊查询，子查询"><a href="#使用like-实现模糊查询，子查询" class="headerlink" title="使用like,实现模糊查询，子查询"></a>使用like,<strong>实现模糊查询</strong>，子查询</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">            <span class="built_in">MAX</span>( ctime ) <span class="keyword">AS</span> max_ctime</span><br><span class="line">        <span class="keyword">FROM</span></span><br><span class="line">            ( <span class="keyword">SELECT</span> ctime <span class="keyword">FROM</span> alarm_monitor <span class="keyword">WHERE</span> alarm_status <span class="operator">=</span> <span class="string">&#x27;true&#x27;</span> <span class="keyword">AND</span> is_under <span class="keyword">like</span> <span class="string">&#x27;%0&#x27;</span> ) <span class="keyword">as</span> a</span><br></pre></td></tr></table></figure><h5 id="使用自定义值，默认查询所有"><a href="#使用自定义值，默认查询所有" class="headerlink" title="使用自定义值，默认查询所有"></a>使用自定义值，默认查询所有</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="variable">@pos</span><span class="operator">=</span>&quot;&quot;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> (name<span class="operator">=</span><span class="variable">@pos</span> <span class="keyword">or</span> <span class="variable">@pos</span><span class="operator">=</span>&quot;&quot;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 条件查询 </tag>
            
            <tag> 子查询 </tag>
            
            <tag> 模糊查询 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于mysql大小写敏感问题</title>
      <link href="/2023/08/20/%E5%85%B3%E4%BA%8Emysql%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/"/>
      <url>/2023/08/20/%E5%85%B3%E4%BA%8Emysql%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="1-决定大小写是否敏感的参数"><a href="#1-决定大小写是否敏感的参数" class="headerlink" title="1.决定大小写是否敏感的参数"></a>1.决定大小写是否敏感的参数</h4><p>在 <a href="https://cloud.tencent.com/product/cdb?from=10680">MySQL</a> 中，数据库与 data 目录中的目录相对应。数据库中的每个表都对应于数据库目录中的至少一个文件（可能是多个文件，具体取决于存储引擎）。因此，操作系统的大小写是否敏感决定了数据库大小写是否敏感，而 Windows 系统是对大小写不敏感的，Linux 系统对大小写敏感。</p><p>默认情况下，库表名在 Windows 系统下是不区分大小写的，而在 Linux 系统下是区分大小写的。列名，索引名，存储过程、函数及事件名称在任何操作系统下都不区分大小写，列别名也不区分大小写。</p><p>除此之外，MySQL 还提供了 lower_case_table_names 系统变量，该参数会影响表和数据库名称在磁盘上的存储方式以及在 MySQL 中的使用方式，在 Linux 系统，该参数默认为 0 ，在 Windows 系统，默认值为 1 ，在 macOS 系统，默认值为 2 。下面再来看下各个值的具体含义：</p><table><thead><tr><th align="left">Value</th><th align="left">Meaning</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">库表名以创建语句中指定的字母大小写存储在磁盘上，名称比较区分大小写。</td></tr><tr><td align="left">1</td><td align="left">库表名以小写形式存储在磁盘上，名称比较不区分大小写。MySQL 在存储和查找时将所有表名转换为小写。此行为也适用于数据库名称和表别名。</td></tr><tr><td align="left">2</td><td align="left">库表名以创建语句中指定的字母大小写存储在磁盘上，但是 MySQL 在查找时将它们转换为小写。名称比较不区分大小写。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日总结-8.10</title>
      <link href="/2023/08/19/%E6%AF%8F%E6%97%A5%E6%80%BB%E7%BB%93-8-10/"/>
      <url>/2023/08/19/%E6%AF%8F%E6%97%A5%E6%80%BB%E7%BB%93-8-10/</url>
      
        <content type="html"><![CDATA[<h5 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h5><ol><li><p>使用springboot自动注入，没有引用接口，而是直接引用的类，导致在类名修改的时候，要寻找到引用类名的地方，在修改类名</p></li><li><p>不同数据库表的pojo类复用，导致后期在数据库表的数据相差较大时，还需再次定义对应的pojo类，此时大量的逻辑都是针对之前的pojo类操作，导致代码改动较大</p></li><li><p>在编写dao层时，对于方法的通用性考虑不足，<strong>不符合开闭原则</strong>，例如在传参时，固定传参某个对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;PatrolArea&gt; queryFirstAreaByAreaId(PatrolDevice patrolDevice)</span><br></pre></td></tr></table></figure><p>造成如果此时有另一对象同样含有areaid，那么需要再写一个方法去适应这种变化，</p><p><strong>改进方案</strong></p><ol><li><p>将传参类型变为基础类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;PatrolArea&gt; queryFirstAreaByAreaId(String id)</span><br></pre></td></tr></table></figure></li><li><p>或者将传参改为接口，只要实现接口，都可以作为参数被传入，如果实现类中没有查询条件，也就是<strong>areaid</strong>，那么查询就会出错，此时需要在接口中实现赋值方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class PatrolArea implements interface&#123;</span><br><span class="line">   String areaId=‘’；</span><br><span class="line">   void setAreaId(String id);</span><br><span class="line">&#125;</span><br><span class="line">List&lt;PatrolArea&gt; queryFirstAreaByAreaId(interface param)</span><br></pre></td></tr></table></figure></li></ol></li></ol><h5 id="获得的经验"><a href="#获得的经验" class="headerlink" title="获得的经验"></a>获得的经验</h5><ol><li><p>使用hutool自定义线程池，并提交任务以及判断，任务结束时返回响应的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> ExecutorBuilder.create()</span><br><span class="line">                .setCorePoolSize(<span class="number">3</span>)</span><br><span class="line">                .setMaxPoolSize(<span class="number">6</span>)</span><br><span class="line">                .setWorkQueue(<span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">100</span>))</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Future task1=executor.submit(<span class="keyword">new</span> <span class="title class_">InsertRecordTask</span>());</span><br><span class="line">            Future task2=executor.submit(<span class="keyword">new</span> <span class="title class_">InsertItemTask</span>());</span><br><span class="line">            Future task3=executor.submit(<span class="keyword">new</span> <span class="title class_">InsertImageTask</span>());</span><br><span class="line">            <span class="keyword">if</span>(task1.get()==<span class="literal">null</span> &amp;&amp; task2.get() == <span class="literal">null</span> &amp;&amp; task3.get() ==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseDTO</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            executor.shutdown();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseDTO</span>(<span class="string">&quot;线程执行异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseDTO</span>(<span class="string">&quot;线程执行任务失败&quot;</span>);</span><br><span class="line">        </span><br></pre></td></tr></table></figure><p>java提交线程池的两种方式：<strong>execute</strong>和<strong>submit</strong></p><ol><li><p>execute用于提交无返回值的任务，也就是某个class继承了Runnable接口并且重写了run方法的任务。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">static class ThreadTask implements Runnable&#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            System.out.println(&quot;正在执行多线程任务......&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> executor.submit(new Runnable() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure></li><li><p>submit用于提交有返回值的任务，也就是继承了Callable接口并且重写了call方法的任务，最好指定返回类型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">static class CallableTask implements Callable&#123;</span><br><span class="line">        @Override</span><br><span class="line">        public String call() throws Exception &#123;</span><br><span class="line">            return &quot;正在有返回值的多线程任务......&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li><li><p>使用hutool文件工具，接受上传的图片，并保存到本地用ngnix映射的目录方法</p></li><li><p>在对项目运行较重要的逻辑部分，要习惯抛出异常，最后由路由捕捉，统一返回到前端，避免大量的判断逻辑</p></li><li><p>解析前端较复杂的数据时，可针对数据格式指定对应的dto类，使用注解自动解析（@resquestBody注解只能解析一次）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class PatrolRectifiedDTO &#123;</span><br><span class="line"></span><br><span class="line">    public List&lt;PatrolImage&gt; rectifiedImages;</span><br><span class="line"></span><br><span class="line">    public PatrolRecord rectifiedResult;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 每日总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> hutool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口改造多线程</title>
      <link href="/2023/08/19/%E6%8E%A5%E5%8F%A3%E6%94%B9%E9%80%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2023/08/19/%E6%8E%A5%E5%8F%A3%E6%94%B9%E9%80%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h5 id="采用共享变量＋Callable的方式"><a href="#采用共享变量＋Callable的方式" class="headerlink" title="采用共享变量＋Callable的方式"></a>采用共享变量＋Callable的方式</h5><p>需求：将同步代码改成多线程</p><p>原始同步代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  JSONObject resultJson=<span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line"><span class="comment">//查询该用户是否存在该任务</span></span><br><span class="line">   patrolDevice.setHead_people_id_number(userService.getUserDetailAndCheckIdNumber(token));</span><br><span class="line">        List&lt;PatrolDevice&gt; results=patrolDeviceDao.queryDeviceByObjectNoPagination(patrolDevice);</span><br><span class="line">        <span class="keyword">if</span>(results.isEmpty() || results.size()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MissingArgumentException</span>(<span class="string">&quot;本设备不属于当前登录人员的巡检任务&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        PatrolDevice resultDevice=results.get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(resultDevice.getDevice_type()==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MissingArgumentException</span>(<span class="string">&quot;获取巡检任务类型异常，获取检查项失败，请完善巡检任务基础信息&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> interval= TimeUtil.getExpireIntervalByExpireTime(resultDevice.getExpiry_time());</span><br><span class="line">        resultDevice.setExpire_interval(interval);</span><br><span class="line">        List&lt;PatrolCheckItem&gt;resultItems=patrolCheckItemDao.queryCheckItemByTypeName(<span class="keyword">new</span> <span class="title class_">PatrolDeviceType</span>(resultDevice.getDevice_type()));</span><br><span class="line">        <span class="type">AppUser</span> <span class="variable">resultUser</span> <span class="operator">=</span> userService.getUserDetail(token);</span><br><span class="line"></span><br><span class="line">        resultJson.put(<span class="string">&quot;checkItem&quot;</span>,resultItems);</span><br><span class="line">        resultJson.put(<span class="string">&quot;taskDetail&quot;</span>, resultDevice);</span><br><span class="line">        resultJson.put(<span class="string">&quot;userDetail&quot;</span>, resultUser);</span><br><span class="line">        <span class="keyword">return</span> resultJson;</span><br></pre></td></tr></table></figure><p>改进成多线程方式</p><p>首先使用<strong>ExecutorService</strong>线程池固定生成三个线程：</p><ul><li><p>身份验证线程</p></li><li><p>用户详情查询线程</p></li><li><p>任务详情查询功能</p></li></ul><p>但是，后两种线程需要第一个线程的执行结果，且三个线程需要共同将执行结果<strong>put</strong>到结果json类中，<strong>期间用户详情查询线程需要根据身份验证线程的返回结果作补充</strong>。</p><p>采用<strong>Future</strong>父类接受执行结果，利用<strong>get</strong>（）函数阻塞，实现在身份验证线程执行完后，在异步执行后两种线程。自定义有参构造函数，实现参数的接续传递和共享。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> JSONObject <span class="title function_">queryCheckTaskDetailByUserToken</span><span class="params">(String token, PatrolDevice patrolDevice)</span> <span class="keyword">throws</span> MissingArgumentException &#123;</span><br><span class="line">        JSONObject resultJson=<span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Future&lt;PatrolDevice&gt; futureIdentifier = executorService.submit(<span class="keyword">new</span> <span class="title class_">IdentifierTask</span>(patrolDevice,token));</span><br><span class="line">            PatrolDevice resultDevice=futureIdentifier.get();</span><br><span class="line">            Future&lt;List&lt;PatrolCheckItem&gt;&gt; futurePatrolTask = executorService.submit(<span class="keyword">new</span> <span class="title class_">FetchPatrolTask</span>(resultDevice,resultJson));</span><br><span class="line">            Future&lt;AppUser&gt; futureUser = executorService.submit(<span class="keyword">new</span> <span class="title class_">FetchUserDetail</span>(token,resultJson));</span><br><span class="line">            <span class="keyword">if</span>(futurePatrolTask.get()==<span class="literal">null</span> &amp;&amp; futureUser.get()==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> resultJson;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            executorService.shutdown();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MissingArgumentException</span>(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultJson;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程任务类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IdentifierTask</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;PatrolDevice&gt; &#123;</span><br><span class="line">        <span class="keyword">public</span> PatrolDevice patrolDevice;</span><br><span class="line">        <span class="keyword">public</span> String token;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">IdentifierTask</span><span class="params">(PatrolDevice patrolDevice, String token)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.patrolDevice = patrolDevice;</span><br><span class="line">            <span class="built_in">this</span>.token = token;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> PatrolDevice <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            patrolDevice.setHead_people_id_number(userService.getUserDetailAndCheckIdNumber(token));</span><br><span class="line">            List&lt;PatrolDevice&gt; results=patrolDeviceDao.queryDeviceByObjectNoPagination(patrolDevice);</span><br><span class="line">            <span class="keyword">if</span>(results.isEmpty() || results.size()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MissingArgumentException</span>(<span class="string">&quot;本设备不属于当前登录人员的巡检任务&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> results.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">FetchPatrolTask</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;List&lt;PatrolCheckItem&gt;&gt;&#123;</span><br><span class="line">        <span class="keyword">public</span> PatrolDevice  resultDevice;</span><br><span class="line">        <span class="keyword">public</span> JSONObject resultJson;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">FetchPatrolTask</span><span class="params">(PatrolDevice resultDevice, JSONObject resultJson)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.resultDevice = resultDevice;</span><br><span class="line">            <span class="built_in">this</span>.resultJson = resultJson;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> List&lt;PatrolCheckItem&gt; <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="keyword">if</span>(resultDevice.getDevice_type()==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MissingArgumentException</span>(<span class="string">&quot;获取巡检任务类型异常，获取检查项失败，请完善巡检任务基础信息&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">long</span> interval= TimeUtil.getExpireIntervalByExpireTime(resultDevice.getExpiry_time());</span><br><span class="line">            resultDevice.setExpire_interval(interval);</span><br><span class="line">            List&lt;PatrolCheckItem&gt;resultItems=patrolCheckItemDao.queryCheckItemByTypeName(<span class="keyword">new</span> <span class="title class_">PatrolDeviceType</span>(resultDevice.getDevice_type()));</span><br><span class="line">            resultJson.put(<span class="string">&quot;checkItem&quot;</span>,resultItems);</span><br><span class="line">            resultJson.put(<span class="string">&quot;taskDetail&quot;</span>, resultDevice);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">FetchUserDetail</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;AppUser&gt; &#123;</span><br><span class="line">        <span class="keyword">public</span> String token;</span><br><span class="line">        <span class="keyword">public</span> JSONObject resultJson;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">FetchUserDetail</span><span class="params">(String token, JSONObject resultJson)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.token = token;</span><br><span class="line">            <span class="built_in">this</span>.resultJson = resultJson;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> AppUser <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="type">AppUser</span> <span class="variable">resultUser</span> <span class="operator">=</span> userService.getUserDetail(token);</span><br><span class="line">            resultJson.put(<span class="string">&quot;userDetail&quot;</span>, resultUser);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br></pre></td></tr></table></figure><h5 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h5><p>单线程<strong>10000</strong>次请求的压力测试，设定100ms的响应时间为标准：</p><table><thead><tr><th align="center"></th><th align="center">通过</th><th align="center">未通过</th></tr></thead><tbody><tr><td align="center">改进前</td><td align="center">9106次</td><td align="center">896次</td></tr><tr><td align="center">改进后</td><td align="center">9254</td><td align="center">746</td></tr></tbody></table><p>单线程100次压力测试，设定30ms的响应时间为标准</p><table><thead><tr><th align="center"></th><th align="center">通过</th><th align="center">未通过</th></tr></thead><tbody><tr><td align="center">改进前</td><td align="center">53</td><td align="center">47</td></tr><tr><td align="center">改进后</td><td align="center">58</td><td align="center">42</td></tr></tbody></table><p>单线程100次压力测试，设定10ms的响应时间为标准</p><table><thead><tr><th align="center"></th><th align="center">通过</th><th align="center">未通过</th></tr></thead><tbody><tr><td align="center">改进前</td><td align="center">0</td><td align="center">100</td></tr><tr><td align="center">改进后</td><td align="center">2</td><td align="center">98</td></tr></tbody></table><p>测试结果由于现场网络情况较差且不稳定原因，会有偏差，但是综合来看，改进后响应速度还是有提升，特别是在压力较大的情况下，提升较为明显。</p>]]></content>
      
      
      <categories>
          
          <category> 调优记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式锁</title>
      <link href="/2023/08/19/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>/2023/08/19/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h4 id="线程锁"><a href="#线程锁" class="headerlink" title="线程锁"></a>线程锁</h4><p>给方法、代码块加锁，某个方法或代码使用锁，在同一时刻仅有一个线程执行该方法或该代码段。线程锁只在同一JVM中有效果，因为线程锁的实现在根本上是依靠线程之间共享内存实现的，比如Synchronized、Lock等</p><h4 id="进程锁"><a href="#进程锁" class="headerlink" title="进程锁"></a>进程锁</h4><p>控制同一个系统中多个线程访问同一个共享资源，因为程序的独立性，各个进程无法控制其他进程对资源的访问，可以利用操作系统的信号量机制</p><h4 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h4><p>多个进程不在同一个系统中，使用分布式锁控制多个进程对同一资源的访问</p><h5 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h5><ul><li><strong>互斥性</strong>：任意时刻，只能有一个客户端可以获取锁</li><li><strong>安全性</strong>::  锁只能被持有该锁的客户端删除，不能由其它客户端删除</li><li><strong>死锁</strong>: 获取锁的客户端因为某些原因（如down机等）而未能释放锁，其它客户端再也无法获取到该锁。</li><li><strong>容错</strong>：当部分节点（redis节点等）down机时，客户端仍然能够获取锁和释放锁</li></ul><h5 id="实现分布式锁的三种方式"><a href="#实现分布式锁的三种方式" class="headerlink" title="实现分布式锁的三种方式"></a>实现分布式锁的三种方式</h5><ul><li>基于缓存（Redis等）实现分布式锁； </li><li>基于数据库实现分布式锁； </li><li>基于Zookeeper实现分布式锁；</li></ul><h5 id="基于Redis的分布式锁"><a href="#基于Redis的分布式锁" class="headerlink" title="基于Redis的分布式锁"></a>基于Redis的分布式锁</h5><h6 id="利用SETNX和SETEX"><a href="#利用SETNX和SETEX" class="headerlink" title="利用SETNX和SETEX"></a>利用SETNX和SETEX</h6><p>使用key-value的方式，以数据的某个属性作为键，给改代码块或者对象加锁。在进程初次使用改数据时，会先检查键是不是已经被创建（被锁），否则创建键（加锁）。发现数据被锁后，会不断的在设置超时时间的范围内循环请求该数据，直到超出超时时间。</p><p><strong>缺点：</strong></p><ol><li>高并发的情况下，如果两个线程同时进入循环，可能导致加锁失败。</li><li>SETNX 是一个耗时操作，因为它需要判断 Key 是否存在，因为会存在性能问题。</li></ol><p>官方推荐使用Redlock实现分布式锁，更加可靠；</p><h5 id="基于数据库表的分布式锁"><a href="#基于数据库表的分布式锁" class="headerlink" title="基于数据库表的分布式锁"></a>基于数据库表的分布式锁</h5><h6 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h6><p>乐观锁认为不会有人同时修改数据，即不会上锁，只有在最终更新数据的时候判断一下再次期间别人有无修改数据，如果有修改，则放弃操作，否则执行操作。</p><p><strong>实现原理：</strong></p><p>一般通过version来实现，也就是在数据库表创建一个 version 字段，每次更新成功，则 version+1，读取数据时，我们将 version 字段一并读出，每次更新时将会对版本号进行比较，如果一致则执行此操作，否则更新失败！</p><h6 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h6><p>基于InnoDB引擎，使用数据库的排它锁实现，在操作数据时直接把数据锁住，直到操作完成再释放锁，上锁期间其他人不能修改数据。</p><p><strong>排它锁原理：</strong></p><p><strong>for update</strong>是一种行级锁，又叫排它锁。一旦用户对某个行施加了行级加锁，则该用户可以查询也可以更新被加锁的数据行，其它用户只能查询但不能更新被加锁的数据行。行锁永远是<strong>独占方式</strong>锁。只有当出现如下的条件时，才会释放锁：<strong>1、执行提交（COMMIT）语句；2、退出数据库（LOG　OFF）；3、程序停止运行。</strong></p><p><strong>实现原理：</strong></p><p>创建一个数据表用于记录分布式锁（可以区分业务模块），然后在需要使用分布式锁的地方，通过select……for update获取对应业务模块的锁记录，如果获取成功，该记录行被锁定，其他线程将只能等待，当该线程执行结束后，就会释放锁，其他线程就可以获取锁并继续执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lock</span><span class="params">()</span>&#123;</span><br><span class="line">    connection.setAutoCommit(<span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            result = select * from methodLock where method_name=xxx <span class="keyword">for</span> update;</span><br><span class="line">            <span class="keyword">if</span>(result==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以下方法解锁：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">void</span> <span class="title function_">unlock</span>(<span class="params"></span>)&#123;</span><br><span class="line">    connection.<span class="title function_">commit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="基于Zookeeper实现分布式锁"><a href="#基于Zookeeper实现分布式锁" class="headerlink" title="基于Zookeeper实现分布式锁"></a>基于Zookeeper实现分布式锁</h5><p>实现原理为：</p><ol><li>建立一个节点，假如名为 lock 。节点类型为持久节点（Persistent）</li><li>每当进程需要访问共享资源时，会调用分布式锁的 lock() 或 tryLock() 方法获得锁，这个时候会在第一步创建的 lock 节点下建立相应的顺序子节点，节点类型为临时顺序节点（<code>EPHEMERAL_SEQUENTIAL</code>），通过组成特定的名字 name+lock+顺序号。</li><li>在建立子节点后，对 lock 下面的所有以 name 开头的子节点进行排序，判断刚刚建立的子节点顺序号是否是最小的节点，假如是最小节点，则获得该锁对资源进行访问。</li><li>假如不是该节点，就获得该节点的上一顺序节点，并监测该节点是否存在注册监听事件（上一个节点是不是被删除）。同时在这里阻塞。等待监听事件的发生，获得锁控制权。前一个Znode删除的时候，会触发Znode事件，当前节点能监听到删除事件，就是轮到了自己占有锁的时候。第一个通知第二个、第二个通知第三个，击鼓传花似的依次向后，只要上一个节点被删除了，就进行再一次判断，看看自己是不是序号最小的那个节点，如果是，自己就获得锁。</li><li>当调用完共享资源后，调用 unlock() 方法，关闭 ZooKeeper，进而可以引发监听事件，释放该锁。</li></ol>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程导出excel</title>
      <link href="/2023/08/19/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AF%BC%E5%87%BAexcel/"/>
      <url>/2023/08/19/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AF%BC%E5%87%BAexcel/</url>
      
        <content type="html"><![CDATA[<h4 id="线程池的5种状态"><a href="#线程池的5种状态" class="headerlink" title="线程池的5种状态"></a>线程池的5种状态</h4><h5 id="状态分类"><a href="#状态分类" class="headerlink" title="状态分类"></a>状态分类</h5><h6 id="RUNNING"><a href="#RUNNING" class="headerlink" title="RUNNING"></a>RUNNING</h6><p>线程池处在 RUNNING 状态时，能够接收新任务，以及对已添加的任务进行处理。该状态是线程池的初始状态，线程池一旦被创建，就处于 RUNNING 状态</p><h6 id="SHUTDOWN"><a href="#SHUTDOWN" class="headerlink" title="SHUTDOWN"></a>SHUTDOWN</h6><p>线程池处于 SHUTDOWN 状态时，不接收新任务，但能处理等待队列中的任务。线程池在 RUNNING 状态下，调用 shutdown() 方法，会变成 SHUTDOWN 状态。</p><h6 id="STOP"><a href="#STOP" class="headerlink" title="STOP"></a>STOP</h6><p>线程池处于 STOP 状态时，不接收新任务，不再处理等待队列中的任务，并且会中断正在处理的任务线程池在 RUNNING 状态下，调用 shutdownNow() 方法，变为 STOP 状态</p><h6 id="TIDYING"><a href="#TIDYING" class="headerlink" title="TIDYING"></a>TIDYING</h6><p>所有的任务都销毁了，工作线程数量为0，线程池的状态在转换为 TIDYING 状态时，会执行钩子方法 terminated()线程池在 SHUTDOWN 状态时，阻塞队列为空并且线程池中执行的任务也为空时，就会由 SHUTDOWN 状态变为 TIDYING 状态；线程池在 STOP 状态时，线程池中执行的任务为空时，就会由 STOP 状态变为 TIDYING 。</p><h6 id="TERMINATED"><a href="#TERMINATED" class="headerlink" title="TERMINATED"></a>TERMINATED</h6><p>terminated() 方法执行之后，线程池彻底终止，就变成 TERMINATED 状态。</p><p><img src="D:\Typora\pictrue\b2d68600f0dbea2606b1077ff12a04d3.png" alt="b2d68600f0dbea2606b1077ff12a04d3.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> XSSFWorkbook <span class="title function_">createExcel</span><span class="params">(List&lt;DataHistory&gt; list, ArrayList&lt;String&gt; titles)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 创建工作薄对象</span></span><br><span class="line">        <span class="type">XSSFWorkbook</span> <span class="variable">workbook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>();</span><br><span class="line">        <span class="comment">// 创建sheet页</span></span><br><span class="line">        <span class="type">XSSFSheet</span> <span class="variable">sheet</span> <span class="operator">=</span> workbook.createSheet();</span><br><span class="line">        <span class="comment">// 自动换行</span></span><br><span class="line">        <span class="type">XSSFCellStyle</span> <span class="variable">style</span> <span class="operator">=</span> workbook.createCellStyle();</span><br><span class="line">        style.setWrapText(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 创建sheet页的行  表头</span></span><br><span class="line">        <span class="type">XSSFRow</span> <span class="variable">row</span> <span class="operator">=</span> sheet.createRow(<span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">columnIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (String value : titles) &#123;</span><br><span class="line">            <span class="comment">// 创建单元格</span></span><br><span class="line">            <span class="type">XSSFCell</span> <span class="variable">cell</span> <span class="operator">=</span> row.createCell(columnIndex++);</span><br><span class="line">            cell.setCellValue(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//写入每行的数据</span></span><br><span class="line">        <span class="keyword">if</span> (list != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">rowNum</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">//从第一行开始</span></span><br><span class="line">            <span class="keyword">for</span> (DataHistory dataHistory : list) &#123;</span><br><span class="line">                columnIndex = <span class="number">0</span>; <span class="comment">//列数重置为0</span></span><br><span class="line">                <span class="type">XSSFRow</span> <span class="variable">newRow</span> <span class="operator">=</span> sheet.createRow(rowNum++);</span><br><span class="line">                <span class="comment">//创建线程池</span></span><br><span class="line">                <span class="type">ExecutorService</span> <span class="variable">es</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">                </span><br><span class="line">                <span class="type">CountDownLatch</span> <span class="variable">doneSignal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">5</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (String value : titles) &#123;</span><br><span class="line">                        <span class="type">XSSFCell</span> <span class="variable">cell</span> <span class="operator">=</span> newRow.createCell(columnIndex++);</span><br><span class="line">                        es.submit(</span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                                    <span class="meta">@Override</span></span><br><span class="line">                                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                                        cell.setCellValue(getValues(value, dataHistory));</span><br><span class="line">                                        doneSignal.countDown();</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                        );</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//使用CountDownLatch的await方法，等待所有线程完成sheet操作</span></span><br><span class="line">                    doneSignal.await();</span><br><span class="line">                    es.shutdown();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> workbook;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a><code>CountDownLatch</code></h4><p>是一个同步工具类，用来协调多个线程之间的同步，能够使一个线程在等待另外一些线程完成各自工作之后，再继续执行。使用一个计数器进行实现。计数器初始值为线程的数量。当每一个线程完成自己任务后，计数器的值就会减一。当计数器的值为0时，表示所有的线程都已经完成一些任务，然后在CountDownLatch上等待的线程就可以恢复执行接下来的任务</p><h4 id="线程池实现方式"><a href="#线程池实现方式" class="headerlink" title="线程池实现方式"></a>线程池实现方式</h4><h5 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h5><p>Executor 接口是线程池框架中最基础的部分，定义了一个 <code>void execute(Runnable command)</code> 方法，代表提交一个任务，由线程池来执行这个任务。</p><h5 id="ExecutorService"><a href="#ExecutorService" class="headerlink" title="ExecutorService"></a>ExecutorService</h5><p>Executor 下有一个重要子接口 ExecutorService，其中定义了一些可以操作线程池的方法：</p><p>public interface ExecutorService extends Executor {</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关闭线程池，已经提交的任务继续执行，不再接受新的任务</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 尝试停止正在执行的任务，返回等待执行的任务列表。因为停止正在执行的线程使用 Thread.interrupt() 方法， 所以不保证能够完全停止</span></span><br><span class="line">List&lt;Runnable&gt; <span class="title function_">shutdownNow</span><span class="params">()</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 当前线程池是否已经关闭</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isShutdown</span><span class="params">()</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 如果关闭后，所有任务都已经完成，则返回true</span></span><br><span class="line"><span class="comment">// 并且只有先调用 shutdown 或 shutdownNow 才会返回 true</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isTerminated</span><span class="params">()</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 等待请求关闭线程池后，所有的任务完成或者等待超时</span></span><br><span class="line"><span class="comment">// 如果所有的任务都已经完成了，则返回 true，超时的话返回 false</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">awaitTermination</span><span class="params">(<span class="type">long</span> timeout, TimeUnit unit)</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 提交一个 Callable 任务，并返回一个表示任务的挂起结果的 Future，之后可以通过 Future 的 get() 方法来获取任务成功完成后返回的结果</span></span><br><span class="line">&lt;T&gt; Future <span class="title function_">submit</span><span class="params">(Callable&lt;T&gt; task)</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 提交一个 Runnable 任务，因为 Runable 的 run() 方法没有返回值，第二个参数会放到 Future 中作为返回值</span></span><br><span class="line">&lt;T&gt; Future <span class="title function_">submit</span><span class="params">(Runnalbe task, T result)</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 提交一个 Runable 任务，因为没有指定返回值，所以之后在 Future 中获取的返回值为 null</span></span><br><span class="line">Future&lt;?&gt; submit(Runnable task);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 执行所有任务，返回 Future 类型的集合</span></span><br><span class="line">&lt;T&gt; List&lt;Future&lt;T&gt;&gt; <span class="title function_">invokeAll</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 执行所有任务，但设置了超时时间</span></span><br><span class="line">&lt;T&gt; List&lt;Future&lt;T&gt;&gt; <span class="title function_">invokeAll</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks, <span class="type">long</span> timeout, TimeUnit unit)</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 执行所有的任务，只要其中一个执行结束，就可以返回那个任务的结果</span></span><br><span class="line">&lt;T&gt; invokeAny(Collection&lt;? <span class="keyword">extends</span> <span class="title class_">Callable</span>&lt;T&gt;&gt; tasks);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 同上一个方法，设置了超时时间</span></span><br><span class="line">&lt;T&gt; T <span class="title function_">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks, <span class="type">long</span> timeout, TimeUnit unit)</span>;</span><br></pre></td></tr></table></figure><h5 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h5><p> JDK 中线程池的默认实现，实现了线程池中的基本方法，可以直接使用，或者基本它扩展，来实现我们需要的功能,下面这个是 <code>ThreadPoolExecutor</code> 的核心构造函数，其他的构造函数最终都会走到该构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,</span></span><br><span class="line"><span class="params">                         <span class="type">int</span> maximumPoolSize,</span></span><br><span class="line"><span class="params">                         <span class="type">long</span> keepAliveTime,</span></span><br><span class="line"><span class="params">                         TimeUnit unit,</span></span><br><span class="line"><span class="params">                         BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class="line"><span class="params">                         ThreadFactory threadFactory,</span></span><br><span class="line"><span class="params">                         RejectExecutionHandler handler</span></span><br></pre></td></tr></table></figure><h6 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h6><ul><li><code>corePoolSize</code> 是线程池中的<strong>核心线程数</strong>，<code>maxinumPoolSize</code> 是线程池中允许的<strong>最大线程数</strong>，当当前正在运行的线程数小于 <code>corePoolSize</code> 值，新提交任务时，会创建一个新的线程来执行，即使有空闲的线程；当当前正在运行的线程数大于 <code>corePoolSize</code> 值，且小于<code>maximumPoolSize</code> 值，新任务会提交到等待队列中，直到<strong>等待队列</strong>满了，才会创建新的线程执行任务。</li><li><code>keepAliveTime</code>线程允许的最大空闲时间。且默认情况下，只会在超时后，销毁非核心线程。也可以通过调用 <code>allowCoreThreadTimeOut(true)</code> 方法，来将这种策略应用于核心线程</li><li><code>unit</code>,<code>keepAliveTime</code> 的时间单位</li><li><code>workQueue</code> 是用来保存等待被执行任务的阻塞队列，通常和线程池的大小对应调整。</li><li><code>threadFactory</code>创建线程的工厂类，用来创建新线程</li><li><code>handler</code>线程池的拒绝策略,当线程池处于关闭状态，或者阻塞队列满了，而且线程数量已经达到了 <code>maximumPoolSize</code>，再提交任务时，就会执行当前指定的策略</li></ul>]]></content>
      
      
      <categories>
          
          <category> 调优记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
